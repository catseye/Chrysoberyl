# encoding: UTF-8

"""Functions for working with local clones of repositories of distributions
named in Chrysoberyl.

Currently only supports Mercurial repositories hosted on Bitbucket.

"""

import codecs
import os
import re

import yaml
try:
    from yaml import CDumper as Dumper
except ImportError:
    from yaml import Dumper
assert Dumper


### Utilities ###


def bitbucket_repos(data):
    """Generator which yields information about every Mercurial repository
    on Bitbucket referenced by some distribution in Chrysoberyl.

    Information is a triple of the distribution key, the Bitbucket username,
    and the repository name.

    """
    for key in data:
        if data[key]['type'] != 'Distribution':
            continue
        if 'bitbucket' not in data[key]:
            continue
        (user, repo) = data[key]['bitbucket'].split('/')
        yield (key, user, repo)


def for_each_repo(data, clone_dir, fun):
    """Runs the given function for each local repository clone found, passing
    it the distribution key and the repository name, and first changing into
    the clone directory.

    Returns the number of local repository clones traversed.

    """
    cwd = os.getcwd()
    count = 0
    for (distribution, user, repo) in sorted(bitbucket_repos(data)):
        if user != 'catseye':
            print "#-- non-catseye distribution: %s" % \
              (distribution)
            continue
        os.chdir(os.path.join(clone_dir, repo))
        result = fun(distribution, repo)
        if result != False:
            count += 1
    os.chdir(cwd)
    return count


### Repository-Traversing Commands ###


DOC_PATTERNS = (
    r'^LICENSE$',
    r'^UNLICENSE$',
    r'^README',
    r'^.*?\.markdown$',
    r'^.*?\.txt$',
    r'^.*?\.lhs$',
)


def troll_docs(data, clone_dir, output_filename):
    """Looks for documentation in local repository clones and writes out
    a files that can be used to update the Documentation nodes in the
    Chrysoberyl data.

    """
    docdict = {}

    def troll_repo(distribution, repo):
        if data[distribution].get('skip-docs', False):
            print "#!! Skipping %s" % distribution
            return
        for root, dirnames, filenames in os.walk('.'):
            if root.endswith(".hg"):
                del dirnames[:]
                continue
            for filename in filenames:
                for pattern in DOC_PATTERNS:
                    if re.match(pattern, filename):
                        path = os.path.join(root, filename)[2:]
                        docdict[distribution + '/' + path] = {
                            'type': 'Document',
                            'filename': path,
                            'distribution': distribution,
                        }
                        break

    count = for_each_repo(data, clone_dir, troll_repo)

    with codecs.open(output_filename, 'w', 'utf-8') as file:
        file.write('# encoding: UTF-8\n')
        file.write('# AUTOMATICALLY GENERATED BY chrysoberyl.py\n')
        file.write(yaml.dump(docdict, Dumper=Dumper, default_flow_style=False))
    print "Doc lists extracted from %d clones." % count
