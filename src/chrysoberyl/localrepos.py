# encoding: UTF-8

import codecs
import os
import re

import yaml
try:
    from yaml import CDumper as Dumper
except ImportError:
    from yaml import Dumper


def bitbucket_repos(data):
    for key in data:
        if data[key]['type'] != 'Distribution':
            continue
        if 'bitbucket' not in data[key]:
            continue
        (user, repo) = data[key]['bitbucket'].split('/')
        yield (key, user, repo)


def troll_docs(data, clone_dir, data_dir):
    cwd = os.getcwd()

    count = 0
    docdict = {}
    for (distribution, user, repo) in bitbucket_repos(data):
        if distribution in ('pibfi distribution',):
            print "#!! Skipping %s" % distribution
            continue

        if user != 'catseye':
            print "#-- non-catseye distribution: %s" % \
              (distribution)
            continue

        docdict[distribution] = \
            hunt_for_docs(os.path.join(clone_dir, repo))
        count += 1

    os.chdir(cwd)
    
    docdata = {
        'Documentation Index': {
            'type': 'Metadata',
            'entries': docdict,
        }
    }
    output_filename = os.path.join(data_dir, 'documentation.yaml')
    with codecs.open(output_filename, 'w', 'utf-8') as file:
        file.write('# encoding: UTF-8\n')
        file.write('# AUTOMATICALLY GENERATED BY chrysoberyl.py\n')
        file.write(yaml.dump(docdata, Dumper=Dumper, default_flow_style=False))
    print "Doc lists extracted from %d clones." % count


DOC_PATTERNS = (
    r'^LICENSE$',
    r'^UNLICENSE$',
    r'^README',
    r'^.*?\.html$',
    r'^.*?\.markdown$',
    r'^.*?\.txt$',
    r'^.*?\.lhs$',
)

def hunt_for_docs(dirname):
    os.chdir(dirname)
    docs = []
    for root, dirnames, filenames in os.walk('.'):
        if root.endswith(".hg"):
            del dirnames[:]
            continue
        for filename in filenames:
            for pattern in DOC_PATTERNS:
                if re.match(pattern, filename):
                    path = os.path.join(root, filename)[2:]
                    docs.append(path)
                    break
    return docs
