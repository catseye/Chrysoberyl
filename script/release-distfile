#!/usr/bin/env python

"""
Create a release distfile from the latest tag in a docked source.
"""

import os
import re
import sys
import subprocess


def match_tag(distro, tag):
    match = re.match(r'^rel_(\d+)_(\d+)_(\d+)_(\d+)$', tag)
    if match:
        v_maj = match.group(1)
        v_min = match.group(2)
        r_maj = match.group(3)
        r_min = match.group(4)
        filename = '%s-%s.%s-%s.%s.zip' % (
            distro, v_maj, v_min, r_maj, r_min
        )
        return (v_maj, v_min, r_maj, r_min, filename)

    match = re.match(r'^rel_(\d+)_(\d+)$', tag)
    if match:
        v_maj = match.group(1)
        v_min = match.group(2)
        filename = '%s-%s.%s.zip' % (distro, v_maj, v_min)
        return (v_maj, v_min, "0", "0", filename)

    match = re.match(r'^v?(\d+)\.(\d+)\-(\d+)\.(\d+)$', tag)
    if match:
        v_maj = match.group(1)
        v_min = match.group(2)
        r_maj = match.group(3)
        r_min = match.group(4)
        filename = '%s-%s.%s-%s.%s.zip' % (
            distro, v_maj, v_min, r_maj, r_min
        )
        return (v_maj, v_min, r_maj, r_min, filename)

    match = re.match(r'^v?(\d+)\.(\d+)$', tag)
    if match:
        v_maj = match.group(1)
        v_min = match.group(2)
        filename = '%s-%s.%s.zip' % (distro, v_maj, v_min)
        return (v_maj, v_min, "0", "0", filename)

    raise ValueError("Not a release tag that I understand: %s" % tag)


def do_it(command, **kwargs):
    subprocess.check_call(command, shell=True, **kwargs)


def get_it(command):
    return subprocess.Popen(
        command, shell=True, stdout=subprocess.PIPE
    ).communicate()[0]


def each_tag():
    # borrowed from http://stackoverflow.com/a/24830212, could probably be simplified
    output = get_it("git for-each-ref --format='%(*committerdate:raw)%(committerdate:raw) %(refname) %(*objectname) %(objectname)' refs/tags | sort -n | awk '{ print $3; }'")
    for line in output.split('\n'):
        if line:
            match = re.match(r'^refs/tags/(.*?)$', line)
            if match:
               yield match.group(1)


def main(args):
    dry_run = False
    if args[0] == '--dry-run':
        args = args[1:]
        dry_run = True

    latest_tag = None
    if args[0] == '--tag':
        args = args[1:]
        latest_tag = args[0]
        args = args[1:]
    else:
        for tag in each_tag():
            latest_tag = tag
    print latest_tag

    distro = args[0]
    (v_maj, v_min, r_maj, r_min, zip_filename) = match_tag(distro, latest_tag)
    print repr((v_maj, v_min, r_maj, r_min, zip_filename))
    dest_dir = os.path.join(os.getenv('HOME'), 'canonical', 'mine', 'catseye.tc', 'distfiles')
    full_filename = os.path.join(dest_dir, zip_filename)
    if os.path.exists(full_filename):
        raise IOError("{} exists".format(full_filename))
    do_it('ls -l {}/{}* || echo First'.format(dest_dir, distro))
    command = "git archive --format=zip {} -o {}".format(latest_tag, full_filename)
    print command
    if not dry_run:
        do_it(command)
        do_it("unzip -v {}".format(full_filename))
    sys.exit(0)


if __name__ == '__main__':
    main(sys.argv[1:])
