#!/usr/bin/env python3

"""
Create a release distfile from the latest tag in a docked source.
"""

from argparse import ArgumentParser
import json
import os
from os import path
import re
import sys
import subprocess


def match_tag(distro, tag):
    match = re.match(r'^rel_(\d+)_(\d+)_(\d+)_(\d+)$', tag)
    if match:
        v_maj = match.group(1)
        v_min = match.group(2)
        r_maj = match.group(3)
        r_min = match.group(4)
        filename = '%s-%s.%s-%s.%s' % (
            distro, v_maj, v_min, r_maj, r_min
        )
        return (v_maj, v_min, r_maj, r_min, filename)

    match = re.match(r'^rel_(\d+)_(\d+)$', tag)
    if match:
        v_maj = match.group(1)
        v_min = match.group(2)
        filename = '%s-%s.%s' % (distro, v_maj, v_min)
        return (v_maj, v_min, "0", "0", filename)

    match = re.match(r'^v?(\d+)\.(\d+)\-(\d+)\.(\d+)$', tag)
    if match:
        v_maj = match.group(1)
        v_min = match.group(2)
        r_maj = match.group(3)
        r_min = match.group(4)
        filename = '%s-%s.%s-%s.%s' % (
            distro, v_maj, v_min, r_maj, r_min
        )
        return (v_maj, v_min, r_maj, r_min, filename)

    match = re.match(r'^v?(\d+)\.(\d+)$', tag)
    if match:
        v_maj = match.group(1)
        v_min = match.group(2)
        filename = '%s-%s.%s' % (distro, v_maj, v_min)
        return (v_maj, v_min, "0", "0", filename)

    raise ValueError("Not a release tag that I understand: %s" % tag)


def do_it(command, **kwargs):
    subprocess.check_call(command, shell=True, **kwargs)


def get_it(command):
    return subprocess.Popen(
        command, shell=True, stdout=subprocess.PIPE
    ).communicate()[0].decode('utf-8')


def each_tag():
    # borrowed from http://stackoverflow.com/a/24830212, could probably be simplified
    output = get_it("git for-each-ref --format='%(*committerdate:raw)%(committerdate:raw) %(refname) %(*objectname) %(objectname)' refs/tags | sort -n | awk '{ print $3; }'")
    for line in output.split('\n'):
        if line:
            match = re.match(r'^refs/tags/(.*?)$', line)
            if match:
               yield match.group(1)


def main(args):
    argparser = ArgumentParser()

    argparser.add_argument('distro', type=str)
    argparser.add_argument('--dry-run', action='store_true', default=False)
    argparser.add_argument('--tag', type=str, default=None)
    argparser.add_argument('--force', action='store_true', default=False)
    argparser.add_argument('--entry', type=str, default=None)

    options = argparser.parse_args(sys.argv[1:])

    distributions_filename = path.join(path.dirname(path.realpath(sys.argv[0])), '..', 'distribution', 'distributions.json')
    with open(distributions_filename, 'r') as f:
        distributions = json.loads(f.read())

    latest_tag = options.tag
    if latest_tag is None:
        for tag in each_tag():
            latest_tag = tag
    print(latest_tag)

    (v_maj, v_min, r_maj, r_min, base_projectame) = match_tag(options.distro, latest_tag)
    zip_filename = '{}.zip'.format(base_projectame)
    print(repr((v_maj, v_min, r_maj, r_min, zip_filename)))
    dest_dir = os.path.join(os.getenv('HOME'), 'canonical', 'mine', 'catseye.tc', 'distfiles')
    dest_dir = os.path.join(os.getenv('HOME'), 'distfiles')
    if not os.path.exists(dest_dir):
        raise IOError("{} not available".format(dest_dir))
    full_filename = os.path.join(dest_dir, zip_filename)
    if os.path.exists(full_filename) and not options.force:
        raise IOError("{} exists".format(full_filename))
    do_it('ls -l {}/{}* || echo First'.format(dest_dir, options.distro))
    command = "git archive --prefix={}/ --format=zip {} -o {}".format(base_projectame, latest_tag, full_filename)
    print(command)
    if not options.dry_run:
        do_it(command)
        do_it("unzip -v {}".format(full_filename))

    if options.entry is not None:
        version = "{}.{}".format(v_maj, v_min)
        revision = "{}.{}".format(r_maj, r_min)
        url = 'https://catseye.tc/distfiles/{}'.format(zip_filename)
        info = {
            'version': version,
            'revision': revision,
            'url': url,
        }
        distributions["{} distribution".format(options.entry)]['releases'].append(info)

    with open(distributions_filename, 'w') as f:
        f.write(json.dumps(distributions, indent=4, sort_keys=True))

    sys.exit(0)


if __name__ == '__main__':
    main(sys.argv[1:])
