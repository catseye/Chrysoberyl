#!/usr/bin/env python3

from argparse import ArgumentParser
import json
import os
import re
import sys


LANGS = [
    'Py',
    'PL',
    'C',
    'JS',
    'HS',
    'R5',
    'Lua',
    'sh',
    'BASIC',
    'YASM',
    'Pixley',
    'Befunge-93',
    'ALPACA',
    'Py2',
    'Erlang',
    'Java',
    'Julia',
    'Makefile',
    'Many',
    'OpenZz',
    'Ophis',
    '6502',
    'R',
    'Ruby',
]


def dump_project_matrix(reg):
    sys.stdout.write('Project | ')
    for lang in LANGS:
        sys.stdout.write(lang + ' | ')
    sys.stdout.write('\n')

    sys.stdout.write('--- | ')
    for lang in LANGS:
        sys.stdout.write('--- | ')
    sys.stdout.write('\n')

    for key, value in sorted(reg.items()):
        line = '{}'.format(key)
        for lang in LANGS:
            if lang in value:
                line += '| {} '.format(lang)
            else:
                line += '| '
        sys.stdout.write(line + '\n')


def rewrite_distributions(reg):
    distributions_filename = os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), '..', 'distribution', 'distributions.json')
    with open(distributions_filename, 'r') as f:
        distributions = json.loads(f.read())

    for key, value in sorted(reg.items()):
        reponame, version = key.split('@')

        found_distribution = False
        for distname, distribution in sorted(distributions.items()):
            if distribution.get('reponame') == reponame:
                found_distribution = distributions[distname]
        assert found_distribution, reponame
        found_distribution['impllangs'] = sorted(value)


def main(options):

    reg = {}
    # langs = set()
    for line in sys.stdin:
        match = re.match(r'^([^|\s]*)\s*\|(.*?)$', line)
        if match and match.group(1):
            things = match.group(2).split('|')
            things = set([t.strip() for t in things if t.strip()])
            for thing in things:
                if thing in ('(JS)', '--'):
                    continue
                # langs.add(thing)
                if thing not in LANGS:
                    raise ValueError(thing)
            reg[match.group(1)] = sorted(things)

    # dump_project_matrix(reg)

    rewrite_distributions(reg)


if __name__ == '__main__':
    argparser = ArgumentParser()
    options = argparser.parse_args(sys.argv[1:])
    main(options)
