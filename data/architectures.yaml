# encoding: UTF-8
# architectures, also their machine languages and other supported languages,
# and emulators for them
Amiga 500:
  type: Platform
  # for now...
  no-specification: true
  # even if it isn't technically vintage, it's really close
  development-stage: vintage
  native-language: 68000 machine code
  other-languages: []
  wikipedia: Amiga_500
  description: |
    A home computer of old.  You may have heard of it?

68000 machine code:
  type: Programming Language
  genre: Machine language
  paradigms:
  - Imperative
  computational-class: Finite-automata-complete
  no-specification: true
  development-stage: mature
  authors: []

E-UAE:
  type: Implementation
  implementation-of:
  - Amiga 500
  implementation-type: emulator
  generally-recommended: true
  host-language: C++
  license: GPL
  links:
  - 'http://www.rcdrummond.net/uae/'


Apple II:
  type: Platform
  # haha
  standards-body: http://apple.com/
  development-stage: vintage
  native-language: 6502 machine code
  other-languages:
  - Applesoft BASIC
  links:
  - 'http://www.zophar.net/apple2.html'
  wikipedia: Apple_II
  description: |
    A home computer of old.  You may have heard of it?

6502 machine code:
  type: Programming Language
  genre: Machine language
  paradigms:
  - Imperative
  wikipedia: MOS_Technology_6502
  computational-class: Finite-automata-complete
  specification-link: http://bytecollector.com/archive/misc/6500-50A_MCS6500pgmManJan76.pdf
  development-stage: vintage
  references:
  - title: 6502 Instruction Set
    description: 6502 Instruction Set reference
    url: http://www.obelisk.demon.co.uk/6502/instructions.html
  - title: scc6502
    url: http://www.reocities.com/SiliconValley/Way/4588/scc6502.html
    description: Small-C for 6502 and LUnix
  - title: cc65
    url: http://www.cc65.org/
    description: Freeware C compiler for 6502-based systems
  authors: []

Applesoft BASIC:
  type: Programming Language
  genre: Production language
  member-of: BASIC
  paradigms:
  - Imperative
  computational-class: believed Turing-complete
  specification-link: http://www.scribd.com/doc/232832/Applesoft-Basic-Programming-Reference-Manual
  development-stage: vintage
  authors: []
  links:
  - 'http://www.zophar.net/apple2.html'
  wikipedia: Applesoft_BASIC
  description: |
    Applesoft BASIC was a dialect of [[BASIC]] that was available for
    (in fact, generally shipped with) the [[Apple II]] series of
    microcomputers, including the Apple ][+ and Apple //e.

AppleWin:
  type: Implementation
  implementation-of:
  - Apple II
  implementation-type: emulator
  prebuilt-for-platforms:
  - Windows
  links:
  - 'http://applewin.berlios.de/'
  license: GPL
  host-language: C++


Commodore 64:
  type: Platform
  specification-link: http://www.commodore.ca/manuals/c64_programmers_reference/c64-programmers_reference.htm
  development-stage: vintage
  links:
  - http://www.zimmers.net/anonftp/pub/cbm/
  wikipedia: Commodore_64
  native-language: 6502 machine code
  other-languages:
  - Commodore BASIC 2.0
  description: |
    A home computer of old.  You may have heard of it?

Commodore BASIC 2.0:
  # should we consider 2.0 to be just a language version?
  type: Programming Language
  genre: Production language
  member-of: BASIC
  paradigms:
  - Imperative
  computational-class: believed Turing-complete
  specification-link: http://www.commodore.ca/manuals/c64_programmers_reference/c64-programmers_reference.htm
  development-stage: vintage
  authors: []

VICE:
  type: Implementation
  implementation-of:
  - Commodore 64
  - Commodore VIC-20
  - Commodore BASIC 2.0
  implementation-type: emulator
  prebuilt-for-platforms:
  - native code
  license: GPL
  links:
  - 'http://vice-emu.sourceforge.net/'
  host-language: C99
  generally-recommended: true
  description: |
    VICE is often called a Commodore 64 emulator, but
    the VICE distribution actually contains emulators for many
    Commodore computers: Commodore 64, Commodore 128, Vic 20, PET, etc,


Commodore VIC-20:
  type: Platform
  no-specification: true
  development-stage: vintage
  native-language: 6502 machine code
  other-languages:
  - Commodore BASIC 2.0
  description: |
    A home computer of old.  You may have heard of it?


IBM PC compatible:
  type: Platform
  # there are just so many damn specifications I could point to... for now:
  description: |
    The computer architecture that just wouldn't die.  You may have heard of it?
  no-specification: true
  development-stage: mature
  wikipedia: IBM PC compatible
  native-language: x86 machine code
  other-languages: []
  references:
  - title: RBIL
    description: Ralf Brown's Interrupt List
    url: http://www.cs.cmu.edu/afs/cs/user/ralf/pub/WWW/files.html
  - title: Keyboard Scancodes
    description: Raw codes generated by PC keyboards
    url: http://www.win.tue.nl/~aeb/linux/kbd/scancodes.html

x86 machine code:
  type: Programming Language
  genre: Machine language
  paradigms:
  - Imperative
  wikipedia: X86
  computational-class: Finite-automata-complete
  specification-link: http://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-vol-1-manual.html
  development-stage: mature
  authors: []

Bochs:
  type: Implementation
  implementation-of:
  - IBM PC compatible
  prebuilt-for-platforms:
  - native code
  links:
  - 'http://bochs.sourceforge.net/'
  license: LGPL
  host-language: C++
  implementation-type: emulator

QEMU:
  type: Implementation
  implementation-of:
  - IBM PC compatible
  prebuilt-for-platforms:
  - native code
  # and a host of other contributors... we should have a facility for indicating that
  authors:
  - Fabrice Bellard
  links:
  - 'http://qemu.org/'
  license: GPL
  host-language: C99
  implementation-type: emulator
  generally-recommended: true

v86:
  type: Implementation
  implementation-of:
  - IBM PC compatible
  prebuilt-for-platforms:
  - HTML5
  authors:
  - Fabian Hemmer
  links:
  - 'https://github.com/copy/v86'
  - 'http://copy.sh/v24/'
  license: BSD license
  host-language: Javascript
  implementation-type: emulator


native code:
  type: Programming Language
  genre: Machine language
  paradigms: []
  no-specification: true
  authors: []
  development-stage: mature
  description: |
    This node is used to describe the code generated by compilers
    that can handle many different platforms.  (Chances are it will
    generate native code for your system, no matter what system
    you have.)


## game stuff ##

Z-Machine:
  type: Platform
  # TODO: look up spec, i'm sure it's online
  no-specification: true
  development-stage: vintage
  native-language: Z-Machine code
  other-languages: []
  description: |
    A portable system for interactive fiction.

Z-Machine code:
  type: Programming Language
  genre: Machine language
  paradigms:
  - Imperative
  computational-class: Finite-automata-complete
  no-specification: true
  development-stage: vintage
  # TODO: Infocom
  authors: []

Zplet:
  type: Implementation
  reference: false
  license: Artistic License
  implementation-of:
  - Z-Machine
  implementation-type: emulator
  host-language: Java
  description: |
    Zplet is a Java application which emulates a Z-Machine, which allows
    Infocom text adventure games (and other interactive fiction and other
    things using the same format) to be played.
