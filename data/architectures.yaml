# encoding: UTF-8
# architectures, also their machine languages and other supported languages,
# and emulators for them
Apple II:
  type: Platform
  # haha
  standards-body: http://apple.com/
  development-stage: vintage
  native-language: 6502 machine code
  other-languages:
  - Applesoft BASIC
  links:
  - 'http://www.zophar.net/apple2.html'
  commentary: |
    [[AppleWin]] is definitely the nicest emulator that we've found for
    this platform, for [[Windows]].  [[Linux]]?  Still looking.

AppleWin:
  type: Implementation
  implementation-of:
  - Apple II
  implementation-type: emulator
  prebuilt-for-platforms:
  - Windows
  links:
  - 'http://applewin.berlios.de/'
  license: GPL
  host-language: C++

Applesoft BASIC:
  type: Programming Language
  genre: Production language
  member-of: BASIC
  paradigms:
  - Imperative
  computational-class: believed Turing-complete
  specification-link: http://www.scribd.com/doc/232832/Applesoft-Basic-Programming-Reference-Manual
  development-stage: vintage
  authors: []
  links:
  - 'http://www.zophar.net/apple2.html'
  description: |
    Programs written in Applesoft BASIC assume that they
    will be running on an Apple ][+, great microcomputer of old.
    Most such software will also run on an Apple //e or similar model.
    Of course, these days, it's more likely you'd be running
    this software on an emulator instead of a museum piece.
  commentary: |
    I've found AppleWin to be a decent Apple emulator on Windows;
    I have yet to find one for *nix that's
    good enough to be my go-to emulator (pun? what pun?).


6502 machine code:
  type: Programming Language
  genre: Machine language
  paradigms:
  - Imperative
  wikipedia: MOS_Technology_6502
  computational-class: Finite-automata-complete
  specification-link: http://bytecollector.com/archive/misc/6500-50A_MCS6500pgmManJan76.pdf
  development-stage: vintage
  references:
  - title: 6502 Instruction Set
    description: 6502 Instruction Set reference
    url: http://www.obelisk.demon.co.uk/6502/instructions.html
  authors: []


Commodore 64:
  type: Platform
  specification-link: http://www.commodore.ca/manuals/c64_programmers_reference/c64-programmers_reference.htm
  development-stage: vintage
  links:
  - http://www.zimmers.net/anonftp/pub/cbm/
  native-language: 6502 machine code
  other-languages:
  - Commodore BASIC 2.0

VICE:
  type: Implementation
  implementation-of:
  - Commodore 64
  - Commodore VIC-20
  implementation-type: emulator
  prebuilt-for-platforms:
  - native code
  license: GPL
  links:
  - 'http://vice-emu.sourceforge.net/'
  host-language: C99
  generally-recommended: true
  description: |
    The VICE distribution actually contains emulators for many
    Commodore computers: Commodore 64, Commodore 128, Vic 20, PET, etc,

Commodore BASIC 2.0:
  # should we consider 2.0 to be just a language version?
  type: Programming Language
  genre: Production language
  member-of: BASIC
  paradigms:
  - Imperative
  computational-class: believed Turing-complete
  specification-link: http://www.commodore.ca/manuals/c64_programmers_reference/c64-programmers_reference.htm
  development-stage: vintage
  authors: []

Commodore VIC-20:
  type: Platform
  no-specification: true
  development-stage: vintage
  native-language: 6502 machine code
  other-languages:
  - Commodore BASIC 2.0


Amiga 500:
  type: Platform
  # for now...
  no-specification: true
  # vintage yet? lessee, 2012-1992=20 years... well, close, but isn't
  # the line drawn at 25 years?
  development-stage: mature
  native-language: 68000 machine code
  other-languages: []

68000 machine code:
  type: Programming Language
  genre: Machine language
  paradigms:
  - Imperative
  computational-class: Finite-automata-complete
  no-specification: true
  development-stage: mature
  authors: []


IBM PC compatible:
  type: Platform
  # there are just so many damn specifications I could point to... for now:
  no-specification: true
  development-stage: mature
  wikipedia: IBM PC compatible
  native-language: x86 machine code
  other-languages: []
  commentary: |
    A project that requires this assumes that it will be running on a fairly standard
    x86-based (IA-32) computer architecture, from the lineage that dates
    back to those old IBM PC's. Probably a 486 with a BIOS, keyboard, and
    basic VGA is the minimum to make it worthwhile. While most modern PC's
    can handle that reasonably well, often a better choice — because it can
    run under a modern OS, rather than actually dedicating the entire
    computer to it — is to run such things under an emulator. In which case,
    we recommend Bochs.
  references:
  - title: RBIL
    description: Ralf Brown's Interrupt List
    url: http://www.cs.cmu.edu/afs/cs/user/ralf/pub/WWW/files.html

x86 machine code:
  type: Programming Language
  genre: Machine language
  paradigms:
  - Imperative
  wikipedia: X86
  computational-class: Finite-automata-complete
  specification-link: http://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-vol-1-manual.html
  development-stage: mature
  authors: []

Bochs:
  type: Implementation
  implementation-of:
  - IBM PC compatible
  prebuilt-for-platforms:
  - native code
  links:
  - 'http://bochs.sourceforge.net/'
  license: LGPL
  host-language: C++
  implementation-type: emulator


Z80 machine code:
  type: Programming Language
  genre: Machine language
  paradigms:
  - Imperative
  computational-class: Finite-automata-complete
  no-specification: true
  development-stage: vintage
  authors: []


native code:
  type: Programming Language
  genre: Machine language
  paradigms: []
  no-specification: true
  authors: []
  development-stage: mature
  description: |
    This node is used to describe the code generated by compilers
    that can handle many different platforms.  (Chances are it will
    generate native code for your system, no matter what system
    you have.)
