# encoding: UTF-8
# actually some of these do have reference distributions
ANSI C:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  generally-compiled: true
  computational-class: Finite-automata-complete
  authors: []
  specification-link: http://clc-wiki.net/wiki/C89
  development-stage: mature
  references: 
  - title: ANSI C docs
    description: Interesting documents about the standardization of C
    url: http://www.lysator.liu.se/c/
  description: |
    ANSI C is a systems-programming language, and one of the first
    programming languages to become really popular.
  # not perfectly considered yet. alas.
  references:
  - url: http://gcc.gnu.org/
    title: GCC
    description: The GNU Compiler Collection
  - url: http://www.delorie.com/djgpp/
    title: DJGPP
    description: DJ Delorie's port of GCC to MS-DOS
  - url: http://edn.embarcadero.com//article/20841
    title: Turbo C 2.01
    description: C compiler for MS-DOS circa 1989, now freeware
  - url: http://www.openwatcom.org/
    title: OpenWatcom
    description: Open-source Watcom C/C++
  - url: http://www.ten15.org/
    title: TenDRA
    description: BSD-licensed, ANDF-based C/C++ compiler
  - url: http://clang.llvm.org/
    title: clang
    description: C language family frontend for LLVM
  - url: http://pcc.ludd.ltu.se/
    title: PCC
    description: Portable C Compiler
  - url: http://www.cs.princeton.edu/software/lcc/
    title: lcc
    description: Retargetable compiler for ANSI C
  - url: http://www.desmet-c.com/
    title: DeSmet C
    description: Reasonably sized open-source ANSI C compiler
  - url: http://www.tinycc.org/
    title: TCC
    description: Tiny, fast, LGPL C compiler
  - url: http://www.cpm.z80.de/small_c.html
    title: Small-C
    description: Older, 8-bit portable C-subset compiler
  - url: http://sdcc.sourceforge.net/
    title: SDCC
    description: Small Device C Compiler
  - url: http://mingw.sourceforge.net/
    title: MinGW
    description: Headers, import libraries, and Windows runtime
  - url: http://www.delorie.com/howto/cygwin/mno-cygwin-howto.html
    title: -mno-cygwin
    description: Building MinGW Executables using Cygwin

Assembly:
  type: Programming Language Family
  genre: Production language
  authors: []
  development-stage: vintage
  no-specification: true
  description: |
    Refers to many kind of languages which compile ("assemble") to
    [[native code]].  Assembler syntax often has the property that
    it is not too hard to write a program in assembly to parse it,
    for bootstrapping purposes.

BASIC:
  type: Programming Language Family
  # close, but "Beginner language" might be better
  genre: Pedagogical language
  wikipedia: BASIC
  paradigms:
  - Imperative
  authors: []
  development-stage: vintage
  # ehhhh close enough
  specification-link: http://en.wikipedia.org/wiki/BASIC
  description: |
    Popularized by the rash of 8-bit home microcomputers in the 80's,
    BASIC stands for "Beginner's All-purpose Symbolic Instruction Code."

Borland C:
  type: Programming Language
  genre: Production language
  variant-of: ANSI C
  generally-compiled: true
  no-specification: true
  development-stage: vintage
  # Well, Borland.  duh.
  authors: []
  paradigms:
  - Imperative
  description: |
    The dialect of C supported by the [[Borland C++ compiler]] included
    libraries for writing directly to the console, reading directly from the
    keyboard, and so forth.


Bourne shell:
  type: Programming Language
  genre: Production language
  wikipedia: Bourne_shell
  generally-compiled: false
  development-stage: mature
  specification-link: 'http://steve-parker.org/sh/bourne.shtml'
  authors:
  - Stephen Bourne
  # "scripting"
  paradigms:
  - Imperative
    

C99:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  generally-compiled: true
  computational-class: Finite-automata-complete
  authors: []
  specification-link: http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf
  development-stage: mature
  links:
  - http://www.opengroup.org/onlinepubs/9699919799/

gcc 3.4:
  type: Implementation
  implementation-of:
  - ANSI C
  - C99
  implementation-type: compiler
  host-language: C99
  target-language: native code
  license: GPL
  prebuilt-for-platforms:
  - native code
  links:
  - http://gcc.gnu.org/gcc-3.4/


C++:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  - Object-oriented
  generally-compiled: true
  computational-class: Finite-automata-complete
  authors: []
  standards-body: http://www.open-std.org/jtc1/sc22/wg21/
  development-stage: mature
  references:
  - title: C++ FAQ Lite
    description: Comprehensive compilation of C++ questions and answers
    url: http://www.parashift.com/c++-faq-lite/
  - title: C++ FQA Lite
    description: 'A "Rebuttal" to C++ FAQ Lite: Frequently Questioned Answers'
    url: http://yosefk.com/c++fqa/
  - title: STL
    description: SGI's Standard Template Library Programmer's Guide
    url: http://www.sgi.com/tech/stl/index.html
  - title: Boost
    description: Boost provides free peer-reviewed portable C++ source libraries
    url: http://www.boost.org/
  - title: TFoo::operator=
    description: The Anatomy of the Assignment Operator
    url: http://icu-project.org/docs/papers/cpp_report/the_anatomy_of_the_assignment_operator.html
  - title: The Dark Side of C++ (PDF)
    description: Slides for a talk about the dark side of C++
    url: http://miek.nl/downloads/2010/c++-talk.pdf


CSS:
  type: Programming Language
  genre: Production language
  paradigms:
  - Declarative
  computational-class: unknown computational class
  specification-link: http://www.w3.org/TR/CSS2/
  # only because "what is this i don't even" isn't a development stage
  development-stage: mature
  authors: []


Erlang:
  type: Programming Language
  genre: Production language
  paradigms:
  - Functional
  generally-compiled: true
  computational-class: Turing-complete
  standards-body: http://www.erlang.org/
  development-stage: mature
  authors: []
  references:
  - title: Open Source Erlang/OTP
    description: Ericsson's official distribution site
    url: http://www.erlang.org/
  description: |
    Erlang is a single-assignment functional programming language with
    pattern matching.  It is almost entirely pure, save for the fact that
    lightweight Erlang processes can exchange messages with each other.

Erlang/OTP R13B:
  type: Implementation
  reference: true
  implementation-of:
  - Erlang
  # well, it builds beam files, but
  implementation-type: interpreter
  host-language: C99
  license: Erlang Public License
  prebuilt-for-platforms:
  - native code
  links:
  - http://www.erlang.org/


# should probably call this Haskell 98
Haskell:
  type: Programming Language
  genre: Production language
  paradigms:
  - Functional
  - Lazy
  computational-class: Turing-complete
  standards-body: http://www.haskell.org/
  development-stage: mature
  authors: []
  references:
  - url: http://cs.anu.edu.au/Student/comp1100/haskell/tourofsyntax.html
    title: Tour of Haskell Syntax
    description: Informal overview of the syntax of Haskell
  - url: http://www.serpentine.com/blog/2007/02/27/a-haskell-regular-expression-tutorial/
    title: A Haskell regular expression tutorial
    description: A Haskell regular expression tutorial
  - url: http://sequence.complete.org/node/258
    title: A simple TCP server
    description: Short tutorial for network programming in Haskell
  description: |
    Haskell is a pure functional language with lazy evaluation.

ghc:
  type: Implementation
  implementation-of:
  - Haskell
  implementation-type: compiler
  host-language: Haskell
  target-language: native code
  license: BSD license
  generally-recommended: true
  prebuilt-for-platforms:
  - native code
  links:
  - http://www.haskell.org/ghc/

hugs:
  type: Implementation
  implementation-of:
  - Haskell
  implementation-type: interpreter
  host-language: C99
  # http://cvs.haskell.org/Hugs/pages/users_guide/license.html
  license: BSD license
  prebuilt-for-platforms:
  - native code
  links:
  - http://www.haskell.org/hugs/


Java:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  - Object-oriented
  # just, not to native code
  generally-compiled: true
  computational-class: Turing-complete
  standards-body: http://www.oracle.com/technetwork/java/index.html
  development-stage: mature
  authors: []
  references:
  - title: Oracle Technology Network > Java
    description: Official website of the Java™ Platform
    url: http://www.oracle.com/technetwork/java/index.html
  - title: Java Specs
    description: The Java™ Virtual Machine and Language Specifications
    url: http://docs.oracle.com/javase/specs/

Java SE 6 JDK 1.6.0:
  type: Implementation
  reference: true
  implementation-of:
  - Java
  # well, it builds class files, but
  implementation-type: interpreter
  host-language: Unknown language
  # it's actually the "Oracle Binary Code License Agreement for Java SE"
  license: Unknown license
  prebuilt-for-platforms:
  - native code
  links:
  - http://www.oracle.com/technetwork/java/javase/downloads/jdk7u7-downloads-1836413.html


Javascript:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  - Functional
  - Object-oriented
  computational-class: Turing-complete
  specification-link: http://www.ecma-international.org/publications/standards/Ecma-262.htm
  development-stage: mature
  authors: []
  description: |
    Javascript (also and more properly known as ECMAScript) is a
    programming language that is implemented primarily in web browsers
    in order to let scripts control the dynamic behaviour of a web page,
    such as what happens when the user clicks on some region of text.
  references:
  - url: http://www.quirksmode.org/js/contents.html
    title: JavaScript at quirksmode
    description: Nice, large set of JS documents, examples, explanations
  - url: http://onlinetools.org/articles/unobtrusivejavascript/
    title: Unobtrustive JavaScript
    description: Seperation of concerns between Javascript, CSS, &amp; HTML
  - url: http://betterexplained.com/articles/speed-up-your-javascript-load-time/
    title: Speed Up Your Javascript Load Time
    description: Assorted useful tips for, uh, speeding up Javascript load time

Firefox:
  type: Implementation
  reference: false
  implementation-of:
  - Javascript
  implementation-type: interpreter
  host-language: C++
  license: MPL 2.0
  prebuilt-for-platforms:
  - native code
  links:
  - http://www.mozilla.org/


Lisp: 
  type: Programming Language
  genre: Production language
  paradigms:
  - Functional
  - Imperative
  computational-class: Turing-complete
  specification-link: http://www.lispworks.com/documentation/HyperSpec/Front/index.htm
  development-stage: mature
  authors: []
  description: |
    Lisp was one of the first programming languages to attempt to be a functional
    programming language.

Lua:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  - Functional
  - Object-oriented
  computational-class: Turing-complete
  standards-body: http://www.lua.org/
  development-stage: mature
  authors: []
  references:
  - title: Lua
    description: Official Lua website
    url: http://www.lua.org/

lua 5.0.3:
  type: Implementation
  reference: true
  implementation-of:
  - Lua
  implementation-type: interpreter
  host-language: C99
  license: MIT license
  prebuilt-for-platforms:
  - native code
  links:
  - http://www.lua.org/versions.html#5.0

MSIL:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  member-of: Assembly
  generally-compiled: true
  computational-class: unknown computational class
  specification-link: http://www.ecma-international.org/publications/standards/Ecma-335.htm
  development-stage: mature
  authors: []

ilasm:
  type: Implementation
  implementation-of:
  - MSIL
  implementation-type: compiler
  host-language: Unknown language
  target-language: .NET executable
  prebuilt-for-platforms:
  - native code
  license: Unknown license


Perl:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  - Functional
  - Object-oriented
  computational-class: Turing-complete
  standards-body: http://www.perl.org/
  development-stage: mature
  authors: []
  description: |
    Perl is a scripting language which borrows much of its syntax from
    command-line interfaces such as the [[Bourne shell]].  It was one of
    the first programming languages to become really popular for backend
    web development.

perl 5.8.8:
  type: Implementation
  reference: true
  implementation-of:
  - Perl
  implementation-type: interpreter
  host-language: C99
  prebuilt-for-platforms:
  - native code
  license: Artistic License


PHP:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  - Object-oriented
  computational-class: Turing-complete
  standards-body: http://www.php.net/
  development-stage: mature
  authors: []


Plankalkül:
  type: Programming Language
  genre: Experimental language
  paradigms:
  - Imperative
  - 2-dimensional
  # I really don't know
  computational-class: unknown computational class
  # actually there is probably a good spec out there somewhere these days
  no-specification: true
  authors:
  - Konrad Zuse
  development-stage: vintage
  links:
  - 'http://catseye.tc/gallery/languages/plankalkuel/'
  description: |
    Plankalkül was probably the very first attempt at a formalized notation for
    computer programs, and is considered by many to be the first programming language.
    The linked article describing the language, transliterated to HTML
    from scans provided by the Retrocomputing Museum, originally appeared in
    Communications of the ACM, July 1972, Volume 15, Number 7.


Python:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  - Functional
  - Object-oriented
  computational-class: Turing-complete
  standards-body: http://www.python.org/
  development-stage: mature
  authors: []
  references:
  - title: Python
    description: Official website of the Python Programming Language
    url: http://www.python.org/
  - title: Python IAQ
    description: Infrequently Answered Questions about Python
    url: http://norvig.com/python-iaq.html

cPython 2.6.7:
  type: Implementation
  reference: true
  implementation-of:
  - Python
  implementation-type: interpreter
  host-language: C99
  license: Unknown license
  prebuilt-for-platforms:
  - native code
  generally-recommended: true
  links:
  - http://docs.python.org/license.html

Jython 2.5.1:
  type: Implementation
  summary: Implementation of Python for the JVM
  reference: false
  implementation-of:
  - Python
  implementation-type: interpreter
  host-language: Java
  license: Unknown license
  links:
  - http://www.jython.org/
  - http://www.jython.org/license.html

Skulpt:
  type: Implementation
  summary: Implementation of Python in Javascript
  reference: false
  implementation-of:
  - Python
  implementation-type: interpreter
  host-language: Javascript
  license: MIT license
  links:
  - http://www.skulpt.org/


R:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  - Functional
  computational-class: Turing-complete
  standards-body: http://www.r-project.org/
  # only because there's no development stage "THE FUTURE"
  development-stage: mature
  authors: []
  isbn: 3-900051-07-0

R 2.13.1:
  type: Implementation
  implementation-of:
  - R
  implementation-type: interpreter
  host-language: Unknown language
  license: GPL
  prebuilt-for-platforms:
  - native code
  links:
  - http://www.r-project.org/


Ruby:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  - Functional
  - Object-oriented
  computational-class: Turing-complete
  standards-body: http://www.ruby-lang.org/
  development-stage: mature
  authors: []
  references:
  - url: http://www.fincher.org/tips/Languages/Ruby/
    title: Ruby Tutorial
    description: Ruby Tutorial with Code Samples

ruby 1.8.7:
  type: Implementation
  reference: true
  implementation-of:
  - Ruby
  implementation-type: interpreter
  host-language: C99
  license: BSD license
  prebuilt-for-platforms:
  - native code
  links:
  - http://www.ruby-lang.org/en/downloads/
    http://www.ruby-lang.org/en/about/license.txt


Rust:
  type: Programming Language
  genre: Production language
  # not really OO, more like algebraic type classes; should add that?
  paradigms:
  - Imperative
  computational-class: Turing-complete
  standards-body: http://www.rust-lang.org/
  development-stage: work in progress
  authors: []

rust (Rust):
  type: Implementation
  reference: true
  implementation-of:
  - Rust
  implementation-type: compiler
  host-language: Rust
  target-language: native code
  license: Unknown license
  prebuilt-for-platforms:
  - native code


# should call this R5RS Scheme
Scheme: 
  type: Programming Language
  genre: Production language
  paradigms:
  - Functional
  computational-class: Turing-complete
  specification-link: http://schemers.org/Documents/Standards/R5RS/
  development-stage: mature
  authors: []
  description: |
    Scheme is a simple programming language with an extremely regular syntax
    and a succinct, well-defined semantics.
  references:
  - url: http://pobox.com/~oleg/ftp/
    title: Oleg Kiselyov's Projects
    description: Algorithms, Theorems, Functional Programming, ...

plt-r5rs:
  type: Implementation
  implementation-of:
  - Scheme
  implementation-type: interpreter
  host-language: C99
  license: LGPL
  prebuilt-for-platforms:
  - native code
  links:
  - http://racket-lang.org/

husk:
  type: Implementation
  implementation-of:
  - Scheme
  # also compiles, apparently
  implementation-type: interpreter
  host-language: Haskell
  license: MIT license
  generally-recommended: true
  links:
  - http://justinethier.github.io/husk-scheme/


SETL: 
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  computational-class: Turing-complete
  specification-link: http://setl.org/setl/doc/
  # archival?
  development-stage: mature
  authors: []


Visual Basic:
  type: Programming Language
  genre: Production language
  member-of: BASIC
  standards-body: http://microsoft.com/
  development-stage: mature
  paradigms:
  - Imperative
  authors: []


XML: 
  # sigh
  type: Programming Language
  genre: DSL
  paradigms:
  - Declarative
  specification-link: http://www.w3.org/TR/REC-xml/
  development-stage: mature
  authors: []

Markdown:
  type: Programming Language
  development-stage: mature
  genre: DSL
  authors: []
  paradigms:
  - Declarative
  specification-link: http://daringfireball.net/projects/markdown/syntax


Zz:
  type: Programming Language
  genre: Experimental language
  paradigms:
  - Metalanguage
  computational-class: unknown computational class
  specification-link: http://openzz.cvs.sourceforge.net/*checkout*/openzz/openzz/doc/zzdoc.html
  # abandoned?
  development-stage: mature
  authors: []
  links:
  - 'http://openzz.sourceforge.net/'


#----------------------------------------------------------------------------
# low-level things
#----------------------------------------------------------------------------

Ophis Assembler:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  member-of: Assembly
  generally-compiled: true
  computational-class: Finite-automata-complete
  development-stage: mature
  authors:
  - Michael C. Martin
  links:
  - 'http://hkn.eecs.berkeley.edu/~mcmartin/ophis/'
  - 'https://github.com/michaelcmartin/Ophis'
  description: |
    Ophis is an assembler for the 6502 series of microprocessors.
    Files in the Ophis assembler format often have the file extension `.oph`,
    although files written the Ophis' predecessor, P65, with the `.p65` file extension,
    will generally build with Ophis too.
    You'll need an assembler that conforms to Ophis' syntax in order
    to build executables from these files, and your best bet with that is
    probably the Ophis assembler itself.

Ophis Assembler distribution:
  type: Distribution
  github: michaelcmartin/Ophis

Ophis:
  type: Implementation
  implementation-of:
  - Ophis Assembler
  implementation-type: compiler
  reference: true
  license: MIT license
  host-language: Python
  target-language: 6502 machine code
  in-distribution: Ophis Assembler distribution


NASM Assembler:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  member-of: Assembly
  generally-compiled: true
  computational-class: Finite-automata-complete
  standards-body: http://nasm.us/
  development-stage: mature
  authors: []

NASM:
  type: Implementation
  implementation-of:
  - NASM Assembler
  implementation-type: compiler
  reference: true
  license: MIT license
  host-language: C99
  target-language: x86 machine code
  in-distribution: NASM Assembler distribution

NASM Assembler distribution:
  type: Distribution
  reference: true
  links:
  - http://www.nasm.us/


# heh.  for sf2tab:
lookup table:
  type: Programming Language
  genre: Pedagogical language
  paradigms:
  - Declarative
  computational-class: Finite-automata-complete
  # it's, uh.  pretty self-explanatory, actually.
  no-specification: true
  development-stage: mature
  authors: []


Wireworld:
  type: Programming Language
  # recreational language?
  genre: Experimental language
  paradigms:
  - Cellular automaton
  computational-class: Finite-automata-complete
  # i'll look it up someday
  no-specification: true
  development-stage: mature
  authors: []


.NET executable:
  type: Programming Language
  # albeit virtual
  genre: Machine language
  paradigms: []
  no-specification: true
  development-stage: mature
  authors: []
  references:
  - url: http://www.msdn.microsoft.com/netframework/
    title: MSDN .NET
    description: Microsoft .NET Developer Center
  - url: http://plas.fit.qut.edu.au/gpcp/
    title: GPCP
    description: Gardens Point Component Pascal


#----------------------------------------------------------------------------
# miscellany!
#----------------------------------------------------------------------------

Unknown language:
  type: Programming Language
  genre: Production language
  paradigms: []
  no-specification: true
  # yes, the unknown language has been in widespread use for a while now
  development-stage: mature
  authors: []
  description: |
    This node represents the fact that I don't know what language some
    implementation was written in.
