# encoding: UTF-8
# actually some of these do have reference distributions
ANSI C:
  type: Programming Language
  genre: Production language
  computational-class: Finite-automata-complete
  has-reference-distribution: false
  implementations: []
  authors: []
C99:
  type: Programming Language
  genre: Production language
  commentary: |
    If an implementation of something here is written in C99,
    that implies you need POSIX to compile it, too.
    But some things here written in C99 can also be compiled as
    ANSI C by defining a symbol -- see the Makefile as appropriate.
  computational-class: Finite-automata-complete
  has-reference-distribution: false
  implementations: []
  authors: []
Java:
  type: Programming Language
  genre: Production language
  computational-class: shown Turing-complete
  has-reference-distribution: false
  implementations: []
  authors: []
Perl:
  type: Programming Language
  genre: Production language
  computational-class: shown Turing-complete
  has-reference-distribution: false
  implementations: []
  authors: []
  commentary: |
    We mean Perl 5 here; probably Perl 5.10 is the best version to
    make sure everything runs.
Python:
  type: Programming Language
  genre: Production language
  computational-class: shown Turing-complete
  has-reference-distribution: false
  implementations: []
  authors: []
  commentary: |-
    Mostly harmless.
Ruby:
  type: Programming Language
  genre: Production language
  computational-class: shown Turing-complete
  has-reference-distribution: false
  implementations: []
  authors: []
Scheme: 
  type: Programming Language
  genre: Production language
  computational-class: shown Turing-complete
  has-reference-distribution: false
  implementations: []
  authors: []
Haskell:
  type: Programming Language
  genre: Production language
  computational-class: shown Turing-complete
  has-reference-distribution: false
  implementations: []
  authors: []
Erlang:
  type: Programming Language
  genre: Production language
  computational-class: shown Turing-complete
  has-reference-distribution: false
  implementations: []
  authors: []
Lua:
  type: Programming Language
  genre: Production language
  computational-class: shown Turing-complete
  has-reference-distribution: false
  implementations: []
  authors: []
  commentary: |
    We mean Lua 5.0 here.
MSIL:
  type: Programming Language
  genre: Production language
  computational-class: unknown computational class
  has-reference-distribution: false
  implementations: []
  authors: []
Zz:
  type: Programming Language
  genre: Metalanguage
  computational-class: unknown computational class
  has-reference-distribution: false
  implementations: []
  authors: []
Ophis Assembler:
  type: Programming Language
  # "Assembly language"?
  genre: Production language
  computational-class: Finite-automata-complete
  has-reference-distribution: false
  implementations: []
  authors: []
NASM Assembler:
  type: Programming Language
  # "Assembly language"?
  genre: Production language
  computational-class: Finite-automata-complete
  has-reference-distribution: false
  implementations: []
  authors: []
Commodore BASIC 2.0:
  # should we consider 2.0 to be just a language version?
  type: Programming Language
  genre: Production language
  computational-class: believed Turing-complete
  has-reference-distribution: false
  implementations: []
  authors: []
Applesoft BASIC:
  type: Programming Language
  genre: Production language
  computational-class: believed Turing-complete
  has-reference-distribution: false
  implementations: []
  authors: []

# for targets of compilers:
x86 machine code:
  type: Programming Language
  genre: Production language
  computational-class: Finite-automata-complete
  has-reference-distribution: false
  implementations: []
  authors: []

# heh.  for sf2tab:
lookup table:
  type: Programming Language
  genre: Production language
  computational-class: Finite-automata-complete
  has-reference-distribution: false
  implementations: []
  authors: []

Wireworld:
  type: Programming Language
  genre: Cellular Automaton
  computational-class: Finite-automata-complete
  has-reference-distribution: false
  implementations: []
  authors: []

dummy:
  type: type
  unsorted-requirements:
    what: |
      If an implementation is in "ANSI C" we expect you to be able to deal with that.
      If an implementation is in "Perl" we expect you to be able to deal with that.
      If an implementation is in "Scheme" we expect you to be able to deal with that.
      If an implementation is in "Lua" we expect you to be able to deal with that.
      If an implementation is in "Haskell" we expect you to be able to deal with that.
      If an implementation is in "Python" we expect you to be able to deal with that.
      If an implementation is in "Erlang" we expect you to be able to deal with that.
    apple-befunge:
      requirements:
        run: apple_ii
    befos:
      requirements:
        build: nasm and ansi_c and perl5
        run: x86
    etcha:
      requirements:
        build: jdk6 not_required
        run: jre6
    illberon:
      requirements:
        build: bcc
        run: perl5
    illgol:
      requirements:
        build: bcc
    illgola-2:
      requirements:
        build: bcc
        run: perl5
    illgolpp:
      requirements:
        build: bcc
        run: perl5
    n-dcnc:
      requirements:
        build: ansi_c
        run: perl5
    pail:
      requirements:
        run: hs and parsec
    pl-goto.net:
      requirements:
        run: hs and parsec and ilasm
    redgreen:
      requirements:
        build: alpaca
        run: perl5
    rube:
      requirements:
        build: bcc or ansi_c or (c99 and posix)
        run: ansiterm
    rube_ii:
      requirements:
        build: bcc or ansi_c
        run: ansiterm
    shelta:
      requirements:
        build: nasm
        run: msdos
    whothm:
      requirements:
        build: jdk6 not_required
        run: jre6
    worb:
      requirements:
        run: perl5 or yoob
    yoob:
      requirements:
        build: jdk6 not_required
        run: jre6
    ypsilax:
      requirements:
        run: perl5 or yoob
