# encoding: UTF-8
# actually some of these do have reference distributions
ANSI C:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  generally-compiled: true
  computational-class: Finite-automata-complete
  authors: []
  specification-link: http://clc-wiki.net/wiki/C89
  development-stage: mature
  references: 
  - title: ANSI C docs
    description: Interesting documents about the standardization of C
    url: http://www.lysator.liu.se/c/
  description: |
    ANSI C is a systems-programming language, and one of the first
    programming languages to become really popular.
  # not perfectly considered yet. alas.
  references:
  - url: http://gcc.gnu.org/
    title: GCC
    description: The GNU Compiler Collection
  - url: http://www.delorie.com/djgpp/
    title: DJGPP
    description: DJ Delorie's port of GCC to MS-DOS
  - url: http://edn.embarcadero.com//article/20841
    title: Turbo C 2.01
    description: C compiler for MS-DOS circa 1989, now freeware
  - url: http://www.openwatcom.org/
    title: OpenWatcom
    description: Open-source Watcom C/C++
  - url: http://www.ten15.org/
    title: TenDRA
    description: BSD-licensed, ANDF-based C/C++ compiler
  - url: http://clang.llvm.org/
    title: clang
    description: C language family frontend for LLVM
  - url: http://pcc.ludd.ltu.se/
    title: PCC
    description: Portable C Compiler
  - url: http://www.cs.princeton.edu/software/lcc/
    title: lcc
    description: Retargetable compiler for ANSI C
  - url: http://www.desmet-c.com/
    title: DeSmet C
    description: Reasonably sized open-source ANSI C compiler
  - url: http://www.tinycc.org/
    title: TCC
    description: Tiny, fast, LGPL C compiler
  - url: http://www.cpm.z80.de/small_c.html
    title: Small-C
    description: Older, 8-bit portable C-subset compiler
  - url: http://sdcc.sourceforge.net/
    title: SDCC
    description: Small Device C Compiler
  - url: http://mingw.sourceforge.net/
    title: MinGW
    description: Headers, import libraries, and Windows runtime
  - url: http://www.delorie.com/howto/cygwin/mno-cygwin-howto.html
    title: -mno-cygwin
    description: Building MinGW Executables using Cygwin


BASIC:
  type: Programming Language Family
  # close, but "Beginner language" might be better
  genre: Pedagogical language
  wikipedia: BASIC
  paradigms:
  - Imperative
  authors: []
  development-stage: vintage
  # ehhhh close enough
  specification-link: http://en.wikipedia.org/wiki/BASIC
  description: |
    Popularized by the rash of 8-bit home microcomputers in the 80's,
    BASIC stands for "Beginner's All-purpose Symbolic Instruction Code."


C99:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  generally-compiled: true
  computational-class: Finite-automata-complete
  authors: []
  specification-link: http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf
  development-stage: mature
  links:
  - http://www.opengroup.org/onlinepubs/9699919799/

gcc 3.4:
  type: Implementation
  implementation-of:
  - ANSI C
  - C99
  implementation-type: compiler
  host-language: C99
  target-language: native code
  license: GPL
  prebuilt-for-platforms:
  - native code
  links:
  - http://gcc.gnu.org/gcc-3.4/


C++:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  - Object-oriented
  generally-compiled: true
  computational-class: Finite-automata-complete
  authors: []
  standards-body: http://www.open-std.org/jtc1/sc22/wg21/
  development-stage: mature
  references:
  - title: C++ FAQ Lite
    description: Comprehensive compilation of C++ questions and answers
    url: http://www.parashift.com/c++-faq-lite/
  - title: C++ FQA Lite
    description: 'A "Rebuttal" to C++ FAQ Lite: Frequently Questioned Answers'
    url: http://yosefk.com/c++fqa/
  - title: STL
    description: SGI's Standard Template Library Programmer's Guide
    url: http://www.sgi.com/tech/stl/index.html
  - title: Boost
    description: Boost provides free peer-reviewed portable C++ source libraries
    url: http://www.boost.org/
  - title: TFoo::operator=
    description: The Anatomy of the Assignment Operator
    url: http://icu-project.org/docs/papers/cpp_report/the_anatomy_of_the_assignment_operator.html
  - title: The Dark Side of C++ (PDF)
    description: Slides for a talk about the dark side of C++
    url: http://miek.nl/downloads/2010/c++-talk.pdf


Plankalkül:
  type: Programming Language
  genre: Experimental language
  paradigms:
  - Imperative
  - 2-dimensional
  # I really don't know
  computational-class: unknown computational class
  # actually there is probably a good spec out there somewhere these days
  no-specification: true
  authors:
  - Konrad Zuse
  development-stage: vintage
  links:
  - 'http://catseye.tc/gallery/languages/plankalkuel/'
  description: |
    Plankalkül was probably the very first attempt at a formalized notation for
    computer programs, and is considered by many to be the first programming language.
    The linked article describing the language, transliterated to HTML
    from scans provided by the Retrocomputing Museum, originally appeared in
    Communications of the ACM, July 1972, Volume 15, Number 7.


Python:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  - Functional
  - Object-oriented
  computational-class: Turing-complete
  standards-body: http://www.python.org/
  development-stage: mature
  authors: []
  references:
  - title: Python
    description: Official website of the Python Programming Language
    url: http://www.python.org/
  - title: Python IAQ
    description: Infrequently Answered Questions about Python
    url: http://norvig.com/python-iaq.html

cPython 2.6.7:
  type: Implementation
  reference: true
  implementation-of:
  - Python
  implementation-type: interpreter
  host-language: C99
  license: Unknown license
  prebuilt-for-platforms:
  - native code
  generally-recommended: true
  links:
  - http://docs.python.org/license.html

Jython 2.5.1:
  type: Implementation
  summary: Implementation of Python for the JVM
  reference: false
  implementation-of:
  - Python
  implementation-type: interpreter
  host-language: Java
  license: Unknown license
  links:
  - http://www.jython.org/
  - http://www.jython.org/license.html

Skulpt:
  type: Implementation
  summary: Implementation of Python in Javascript
  reference: false
  implementation-of:
  - Python
  implementation-type: interpreter
  host-language: Javascript
  license: MIT license
  links:
  - http://www.skulpt.org/


R:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  - Functional
  computational-class: Turing-complete
  standards-body: http://www.r-project.org/
  # only because there's no development stage "THE FUTURE"
  development-stage: mature
  authors: []
  isbn: 3-900051-07-0

R 2.13.1:
  type: Implementation
  implementation-of:
  - R
  implementation-type: interpreter
  host-language: Unknown language
  license: GPL
  prebuilt-for-platforms:
  - native code
  links:
  - http://www.r-project.org/


# should call this R5RS Scheme
Scheme: 
  type: Programming Language
  genre: Production language
  paradigms:
  - Functional
  computational-class: Turing-complete
  specification-link: http://schemers.org/Documents/Standards/R5RS/
  development-stage: mature
  authors: []
  description: |
    Scheme is a simple programming language with an extremely regular syntax
    and a succinct, well-defined semantics.
  references:
  - url: http://pobox.com/~oleg/ftp/
    title: Oleg Kiselyov's Projects
    description: Algorithms, Theorems, Functional Programming, ...

plt-r5rs:
  type: Implementation
  implementation-of:
  - Scheme
  implementation-type: interpreter
  host-language: C99
  license: LGPL
  prebuilt-for-platforms:
  - native code
  links:
  - http://racket-lang.org/

husk:
  type: Implementation
  implementation-of:
  - Scheme
  # also compiles, apparently
  implementation-type: interpreter
  host-language: Haskell
  license: MIT license
  generally-recommended: true
  links:
  - http://justinethier.github.io/husk-scheme/


Zz:
  type: Programming Language
  genre: Experimental language
  paradigms:
  - Metalanguage
  computational-class: unknown computational class
  specification-link: http://openzz.cvs.sourceforge.net/*checkout*/openzz/openzz/doc/zzdoc.html
  # abandoned?
  development-stage: mature
  authors: []
  links:
  - 'http://openzz.sourceforge.net/'


#----------------------------------------------------------------------------
# low-level things
#----------------------------------------------------------------------------

Ophis Assembler:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  member-of: Assembly
  generally-compiled: true
  computational-class: Finite-automata-complete
  development-stage: mature
  authors:
  - Michael C. Martin
  links:
  - 'http://hkn.eecs.berkeley.edu/~mcmartin/ophis/'
  - 'https://github.com/michaelcmartin/Ophis'
  description: |
    Ophis is an assembler for the 6502 series of microprocessors.
    Files in the Ophis assembler format often have the file extension `.oph`,
    although files written the Ophis' predecessor, P65, with the `.p65` file extension,
    will generally build with Ophis too.
    You'll need an assembler that conforms to Ophis' syntax in order
    to build executables from these files, and your best bet with that is
    probably the Ophis assembler itself.

Ophis Assembler distribution:
  type: Distribution
  github: michaelcmartin/Ophis
  fixed-tag: OMIT

Ophis:
  type: Implementation
  implementation-of:
  - Ophis Assembler
  implementation-type: compiler
  reference: true
  license: MIT license
  host-language: Python
  target-language: 6502 machine code
  in-distribution: Ophis Assembler distribution


# I have implemented this.  Should it go into implemented-languages.yaml...?
Conway's Game of Life:
  type: Automaton
  genre: Experimental language
  paradigms:
  - 2-dimensional
  - Cellular automaton
  development-stage: vintage
  # yuck
  specification-link: http://en.wikipedia.org/wiki/Conway's_Game_of_Life
  wikipedia: Conway's_Game_of_Life
  authors:
  - John Conway
  inception-date: 1970


# I have implemented this.  Should it go into implemented-languages.yaml...?
Wireworld:
  type: Automaton
  # recreational language?
  genre: Experimental language
  paradigms:
  - Cellular automaton
  computational-class: Finite-automata-complete
  # i'll look it up someday
  no-specification: true
  development-stage: mature
  authors: []
