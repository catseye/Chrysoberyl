# encoding: UTF-8
### Games ###

'Bubble Escape (JaC64)':
  type: Online Installation
  # Bubble Escape 2K, actually, but for now this field is an implementable
  installation-of: Bubble Escape
  exhibit: Computer Games Exhibit
  interactive: true
  animated: true
  mediums:
  - 6502 machine code
  - JaC64
  - Java applet
  - HTML5
  summary: |
    [[Bubble Escape 2K]] is an [[Mini Game Compo 2009|award-winning]]
    video game where you guide a soap bubble through a multi-screen maze.
    You can play it online in this applet running [[JaC64]].
    Use your arrow keys to guide the bubble through the maze.  Avoid the
    hazards and find the five keys to unlock the exit.
  description: |
    [[Bubble Escape 2K]] is an video game where you guide a soap bubble
    through a multi-screen maze.  Based on the cheesy original written in
    [[Commodore BASIC 2.0|BASIC]] in the 80's, this version
    was rewritten in [[Ophis Assembler|6502 assembly]], crunched to fit
    into 2K, and submitted to the [[Mini Game Compo 2009]], where
    it got first place in its class.
  commentary: |
    If this game doesn't seem too impressive to you, try to remember, it's
    only two kilobytes of code!  These days you can't even sneeze in less
    than a megabyte.

'Super Wumpus Land (HTML5)':
  type: Online Installation
  installation-of: Super Wumpus Land
  exhibit: Computer Games Exhibit
  interactive: true
  animated: true
  mediums:
  - Javascript
  - HTML5
  summary: |
    [[Super Wumpus Land]], our "extended dance mix" version of
    Gregory Yob's [[Hunt the Wumpus]], is playable online in an
    HTML5 canvas simulating an old-school green-screen terminal.
  description: |
    [[Super Wumpus Land]], our "extended dance mix" version of
    Gregory Yob's [[Hunt the Wumpus]], is playable online in an
    HTML5 canvas simulating an old-school green-screen terminal.

### Esolangs ###

'Braktif (HTML5)':
  type: Online Installation
  installation-of: Braktif
  exhibit: Esolangs Exhibit
  interactive: true
  animated: true
  mediums:
  - Javascript
  - HTML5
  ca-definition-link: https://github.com/catseye/Braktif/blob/master/src/braktif.alp
  description: |
    The [[Braktif]] cellular automaton, compiled to Javascript using [[ALPACA]]
    and animated using [[yoob.js]].

'Circute (HTML5)':
  type: Online Installation
  installation-of: Circute
  exhibit: Esolangs Exhibit
  interactive: true
  animated: true
  mediums:
  - Javascript
  - HTML5
  ca-definition-link: https://github.com/catseye/Circute/blob/master/src/circute.alp
  description: |
    The [[Circute]] cellular automaton, compiled to Javascript using [[ALPACA]]
    and animated using [[yoob.js]].

'Etcha (HTML5)':
  type: Online Installation
  installation-of: Etcha
  exhibit: Esolangs Exhibit
  interactive: true
  animated: true
  mediums:
  - Javascript
  - HTML5
  description: |
    This is an online implementation of [[Etcha]], a 2-dimensional esolang
    which could be thought of as an attempt to combine [[Jeffry Johnston]]'s
    [[BitChanger]] with turtle graphics.

'Gemooy (HTML5)':
  type: Online Installation
  installation-of: Gemooy
  exhibit: Esolangs Exhibit
  interactive: true
  animated: true
  mediums:
  - Javascript
  - HTML5
  description: |
    [[Gemooy]] is a 2-dimensional esolang with 3 instructions (5 initial symbols).
    This online Gemooy interpreter is implemented in Javascript, on an HTML5 canvas.

'Jaccia (HTML5)':
  type: Online Installation
  installation-of: Jaccia
  exhibit: Esolangs Exhibit
  interactive: true
  animated: true
  mediums:
  - Javascript
  - HTML5
  ca-definition-link: https://github.com/catseye/Jaccia/blob/master/src/jaccia.alp
  summary: |
    The [[Jaccia]] cellular automaton, which demonstrates that cellular automata are
    [intelligent maze-solvers, just like slime molds](http://web.archive.org/web/20020220163303/http://www.riken.go.jp/lab-www/frontier-div/NEWSLETTER/feb2001/ameboid_e.htm).
  description: |
    The [[Jaccia]] cellular automaton, compiled to Javascript using [[ALPACA]]
    and animated using [[yoob.js]].
    
    Jaccia demonstrates that cellular automata are
    [intelligent maze-solvers, just like slime molds](http://web.archive.org/web/20020220163303/http://www.riken.go.jp/lab-www/frontier-div/NEWSLETTER/feb2001/ameboid_e.htm).
    See also [[Jacciata (HTML5)]].

'Jacciata (HTML5)':
  type: Online Installation
  installation-of: Jacciata
  exhibit: Esolangs Exhibit
  interactive: true
  animated: true
  mediums:
  - Javascript
  - HTML5
  ca-definition-link: https://github.com/catseye/Jaccia/blob/master/src/jacciata.alp
  summary: |
    The [[Jacciata]] cellular automaton, which demonstrates that cellular automata are
    [intelligent maze-solvers, just like slime molds](http://web.archive.org/web/20020220163303/http://www.riken.go.jp/lab-www/frontier-div/NEWSLETTER/feb2001/ameboid_e.htm).
  description: |
    The [[Jacciata]] cellular automaton, compiled to Javascript using [[ALPACA]]
    and animated using [[yoob.js]].
    
    Jacciata demonstrates that cellular automata are
    [intelligent maze-solvers, just like slime molds](http://web.archive.org/web/20020220163303/http://www.riken.go.jp/lab-www/frontier-div/NEWSLETTER/feb2001/ameboid_e.htm).
    See also [[Jaccia (HTML5)]].

"noit o' mnain worb (HTML5)":
  type: Online Installation
  installation-of: "noit o' mnain worb"
  exhibit: Esolangs Exhibit
  interactive: true
  animated: true
  mediums:
  - Javascript
  - HTML5
  description: |
    [[noit o' mnain worb]] is a probabilistic particle automaton.
    This online interpreter is implemented in Javascript, on an HTML5 canvas.

'Pixley (HTML5)':
  type: Online Installation
  installation-of: Pixley
  # arguably Pixley is not an esolang, or at least not a very eso one.
  exhibit: Esolangs Exhibit
  interactive: true
  animated: false
  mediums:
  - Javascript
  - Web Workers
  - HTML5
  description: |
    This is an online implementation of [[Pixley]], an extremely small
    subset of [[Scheme]], with only 12 built-in functions.
    
    This online installation also depicts the Pixley program as a
    series of coloured, nested rectangles.
  commentary: |
    This [[Javascript]] implementation of Pixley uses the *Web Workers*
    facility of your browser to run the evaluation process.  So, if your
    browser does not support Web Workers, it may not function correctly.
    
    For the Pixley project, a Pixley interpreter was implemented in
    Pixley itself ("meta-circularly") and in this installation,
    the **Wrap in Pixley Interpreter** button will take the Pixley
    program that has been loaded and put it inside this
    Pixley-interpreter-in-Pixley.
    
    Evaluating a program wrapped in a Pixley interpreter will result
    in the same result as the unwrapped program.  It will just take
    longer.
    
    Evaluating a program wrapped in a Pixley interpreter
    *wrapped in a Pixley interpreter* will also result
    in the same result as the unwrapped program.  It will just take
    *quite a bit* longer.
    
    In theory, this "tower" of wrapped interpreters could go on forever,
    and they should all produce the same result.
    
    However, in physical reality, computers have limitations, such as
    a finite amount of memory available.  In my installation of Firefox,
    for example, wrapping a program in three levels of interpreters
    results in a "stack overflow" error being displayed in the Javascript
    console, and the evaluation process never finishing.
  instructions: |
    Select an example program from the dropdown box,
    then click "Start" to run it.  Or click "Edit" to modify an example
    program, or create your own program.

'REDGREEN (HTML5)':
  type: Online Installation
  installation-of: REDGREEN
  exhibit: Esolangs Exhibit
  interactive: true
  animated: true
  mediums:
  - Javascript
  - HTML5
  ca-definition-link: https://github.com/catseye/REDGREEN/blob/master/src/redgreen.alp
  description: |
    The [[REDGREEN]] cellular automaton, compiled to Javascript using [[ALPACA]]
    and animated using [[yoob.js]].

# about'ed (only esolang that is, so far)
'Shelta (v86)':
  type: Online Installation
  installation-of: Shelta
  exhibit: Esolangs Exhibit
  interactive: true
  animated: true
  mediums:
  - x86 machine code
  - FreeDOS
  - v86
  - HTML5
  summary: |
    This is [[Shelta]], a language with a tiny compiler and a
    self-hosted compiler, running under [[FreeDOS]] under [[v86]]
    on a web page, so you can bootstrap it right in your browser.
  description: |
    This is [[Shelta]] running under [[FreeDOS]] running under the
    [[HTML5]]-based [[IBM PC compatible]] emulator, [[v86]].
    
    You may want to read the documentation for Shelta here:
    
    *   [Original Shelta README, 1999](https://github.com/catseye/Shelta/blob/master/doc/readme.txt)
    *   [Making the Snake Eat its Tail: Bootstrapping](https://github.com/catseye/Shelta/blob/master/doc/bootstrp.txt)
    *   [Shelta in NASM, 2009](https://github.com/catseye/Shelta/blob/master/doc/nasm2009.txt)
    *   [Shelta under FreeDOS, 2013](https://github.com/catseye/Shelta/blob/master/doc/fdos2013.txt)
    
    The system running online on v86 is delivered on a 360K floppy image,
    which contains:
    
    *   Minimal system files for FreeDOS 1.0 ([[GPL]])
    *   The relevant parts of the Shelta distribution ([[Freely Redistributable]])
    *   FreeDOS's `DEBUG.COM` ([[GPL]])
    *   The `TED3` text editor (Freeware)
    
    You can use the pre-built Shelta compiler (whose source is written in NASM)
    to build the example programs, or to bootstrap the Shelta compiler
    written in Shelta.  See the welcome message, shown after FreeDOS
    boots, for more details.
    
    If v86 doesn't work in your browser, you can
    [download the disk image](http://catseye.tc/distfiles/freedos-1.0-shelta-1.2-floppy-1.img)
    and use it in an emulator such as [[QEMU]] or [[Bochs]] or [[DOSBox]]
    or, wonder of wonders, a real IBM PC compatible — if you can write it onto
    a floppy disk somehow...
    
    The TED3 distribution can be found
    [here](http://ftp.mpoli.fi/software/DOS/EDITORS/).  The disk image
    includes the entire distribution, including the manual.  I also take the
    position that this disk image is a "mere aggregation", so the GPL doesn't
    extend its viral reach to any of the other programs.

'Whothm (Applet)':
  type: Online Installation
  installation-of: Whothm
  exhibit: Esolangs Exhibit
  interactive: true
  animated: false
  mediums:
  - Java applet
  - HTML5
  summary: |
    [[Whothm]] is a simple language for describing infinite two-colour bitmapped graphics.  This exhibit contains a Java applet
    which implements Whothm, and lets you interactively try out Whothm programs online.
  description: |
    [[Whothm]] is a simple language for describing infinite two-colour bitmapped graphics.  This exhibit contains a Java applet
    which implements Whothm, and lets you interactively try out Whothm programs online.  The implementation is only
    an approximation; only a small portion of the infinite drawing (a couple of hundred iterations) is rendered.  The rest is
    left up to your imagination.

'yoob (Applet)':
  type: Online Installation
  installation-of: yoob
  exhibit: Esolangs Exhibit
  interactive: true
  animated: true
  mediums:
  - Java applet
  - HTML5
  description: |
    [[yoob]] is a public-domain framework for implementing
    [[Esolang|esoteric programming languages]], and allowing them to be
    interactively run on programs in a Java™ applet.
    
    Currently, yoob can interpret 21 languages: [[1L_AOI]], [[1L_a]], [[2-ill]], [[2L]],
    [[Ale]], [[BackFlip]], [[Befunge-93]], [[Black]], [[brainfuck]], [[Circute]], [[Etcha]],
    [[Gemooy]], [[LNUSP]], [[noit o' mnain worb]], [[PATH]], [[Qdeql]], [[Sceql]],
    [[SMETANA]], [[SNUSP]], [[Wunnel]], and [[Ypsilax]].  This exhibit shows yoob in
    action, and lets you play with all these esolangs online.

'ZOWIE (HTML5)':
  type: Online Installation
  installation-of: ZOWIE
  exhibit: Esolangs Exhibit
  interactive: true
  animated: false
  mediums:
  - Javascript
  - HTML5
  summary: |
    This is an HTML5-based interpreter for the
    esoteric programming language [[ZOWIE]].  
  description: |
    This is an [[HTML5]]-based interpreter for the
    [[Esolang|esoteric programming language]] [[ZOWIE]].
    The reference implementation of the interpreter, written in [[Python]],
    is itself being interpreted by [[Skulpt]], written in [[Javascript]].
    
    Input is not yet supported, and errors are not yet handled
    in a user-friendly way, but it does work, as the example sources show.


### Digital Art ###

'A Non-Random Walk (HTML5)':
  type: Online Installation
  installation-of: A Non-Random Walk
  exhibit: Digital Art Exhibit
  interactive: true
  animated: true
  mediums:
  - Javascript
  - HTML5
  summary: |
    This is an animated version of the "non-random walk" on p. 72 of
    [[Mathematical Circus]] by [[Martin Gardner]].
  instructions: |
    Pick a card, any card.  Half are red, half are black.  Each time a
    card is picked, the wheel moves.  The distance moved is always
    half the distance from the wheel to the origin (the black dot), *but*
    the direction depends on the colour of the card: red moves left,
    black moves right.
  description: |
    This is an animated version of the "non-random walk" on p. 72 of
    [[Mathematical Circus]] by [[Martin Gardner]].
    
    Because the cards are shuffled, the picks are random, and you might think
    that it's not possible to tell where the wheel will stop, once all cards
    have been turned over.  However, that's not the case.  The wheel always
    stops at a distance *a* - *a* × 0.75^*n* from the origin, where *a* is
    the starting position of the wheel, and *n* is the number of red (or black)
    cards.

'Chzrxl (HTML5)':
  type: Online Installation
  installation-of: Chzrxl
  exhibit: Digital Art Exhibit
  interactive: true
  animated: true
  mediums:
  - Javascript
  - HTML5
  summary: |
    "Chzrxl, the Living Inkblot."  Or is it a sort of self-attracting
    lava lamp?
  description: |
    "Chzrxl, the Living Inkblot."  Or is it a sort of self-attracting
    lava lamp?
    
    Regardless, the original idea was this: each ball travels on a
    sine-wave path (kind of like a spring) between a randomly-chosen
    pair of two other balls.
    
    It was soon discovered that if all balls are free to move like this,
    they all quickly collapse to a single point.  Thus, some number of
    balls are held fixed (5% by default).  The result is a slightly
    organic-seeming emergent motion.
    
    The percentage of balls held fixed can be changed by the slider, and
    the "Restart" button can be used to scatter the balls and restart their
    movements.  You can try out different values and see which one you like
    the best.

'Cyclobots (HTML5)':
  type: Online Installation
  installation-of: Cyclobots
  exhibit: Digital Art Exhibit
  interactive: true
  animated: true
  mediums:
  - Javascript
  - HTML5
  summary: |
    An in-browser implementation of [[Cyclobots]].
  description: |
    An in-browser implementation of [[Cyclobots]].
    Each "cyclobot" tries to follow exactly one other cyclobot, adjusting
    its heading to point towards the cyclobot it is following.
    No cylobot is followed by more than one cyclobot.
    When a revolution occurs, every cyclobot picks a new cyclobot to follow
    at random.
    In case the cyclobots leave the viewable area of the playfield,
    dragging on the playfield will scroll it.

'Fibonacci Spiral (HTML5)':
  type: Online Installation
  installation-of: Fibonacci Spiral
  exhibit: Digital Art Exhibit
  interactive: false
  animated: true
  mediums:
  - Javascript
  - HTML5
  summary: |
    A spiral made up of semicircles with proportions in the Fibonacci sequence.
  description: |
    A spiral made up of semicircles with proportions in the Fibonacci sequence.
    The semicircles alternate being on the left and the right.  The first
    two terms of the Fibonacci sequence are `1, 1` and these make up the unit
    circle in the center of the spiral.
    
    The animation is simply a zooming out and back in on the spiral.

'Fingerspelling (HTML5)':
  type: Online Installation
  installation-of: Fingerspelling
  exhibit: Digital Art Exhibit
  interactive: true
  animated: true
  mediums:
  - Javascript
  - HTML5
  summary: |
    A simple interactive HTML5 entertainment, intended to be experienced
    on a touchscreen device.
  description: |
    A simple interactive HTML5 entertainment, intended to be experienced
    on a touchscreen device.
  instructions: |
    If you have a touchscreen, prod the lavender area of the screen with your
    finger.  If you don't have a touchscreen, you may simulate this action
    with your mouse pointer.
  commentary: |    
    This is most certainly a gewgaw.  It should provide you about
    20 seconds of entertainment, give or take.

'Hirsute Miasma (HTML5)':
  type: Online Installation
  installation-of: Hirsute Miasma
  exhibit: Digital Art Exhibit
  interactive: false
  animated: true
  mediums:
  - Javascript
  - HTML5
  summary: |
    A somewhat eerie computed animation.
  description: |
    A somewhat eerie computed animation.
  instructions: |
    The animation will eventually cycle if you're patient (although it won't
    of course cycle exactly, as there is a random element.)  You may enable
    the "terminal" option to prevent this cycling.

'Heronsis hermnonicii (HTML5)':
  type: Online Installation
  installation-of: Heronsis hermnonicii
  exhibit: Digital Art Exhibit
  interactive: true
  animated: true
  mediums:
  - Javascript
  - HTML5
  instructions: |
    It is primarily meant to just be watched, but you may find it entertaining
    to try clicking on the entities.
  summary: |
    An animated "plate" depicting a proto-cohort of *Heronsis hermnonicii*.
  description: |
    An animated "plate" depicting a proto-cohort of *Heronsis hermnonicii*.
  commentary: |
    *Warning: the following may contain tedious and/or glib
    background and/or analysis.*
    
    Casting a negative space of knowledge.  Calling itself a "plate" frames
    it as a work of learning, like some kind of 19th-century anthropology text.
    Yet it only raises questions — what are these entities?  what kind of
    world do they inhabit?  what are they protecting?  who is Clarkson?
    — without providing answers, leaving it up to the observer to either
    imagine their own answers, or decide that answers to these questions
    are not necessary.
    
    Plus it's fun to click on the red balls.

'Hypongtrochoid (HTML5)':
  type: Online Installation
  installation-of: Hypongtrochoid
  exhibit: Digital Art Exhibit
  interactive: true
  animated: true
  mediums:
  - Javascript
  - HTML5
  summary: |
    "Hypongtrochoid" is a portmanteau of
    [hypotrochoid](http://en.wikipedia.org/wiki/Hypotrochoid)
    (as popularized by [Spirograph](http://en.wikipedia.org/wiki/Spirograph))
    and [Pong](http://en.wikipedia.org/wiki/Pong)
    (as popularized by, well, Pong.)
  description: |
    "Hypongtrochoid" is a portmanteau of
    [hypotrochoid](http://en.wikipedia.org/wiki/Hypotrochoid)
    (as popularized by [Spirograph](http://en.wikipedia.org/wiki/Spirograph))
    and [Pong](http://en.wikipedia.org/wiki/Pong)
    (as popularized by, well, Pong.)  Each box moves with a constant velocity
    relative to the box it is contained in, and bounces around inside it in a
    simple fashion.  Yet the path traced out by the innermost box is not very
    simple at all.

'Multicolouralism (HTML5)':
  type: Online Installation
  installation-of: Multicolouralism
  exhibit: Digital Art Exhibit
  interactive: true
  animated: true
  mediums:
  - Javascript
  - HTML5
  summary: |
    Animated op art: an interactive bleeding of colours.
  description: |
    Each frame, the colour of each cell is chosen randomly from the set
    {cyan, magenta, yellow, white}.  The probability of each of the
    colours is determined by the distance from the cell to each corner
    of the square, raised to a power (the "field strength") which can
    be selected by the slider.
    
    Do you see false colours at the "borders" between the "fields"?
    You certainly *can*, but how much you see them seems to depend on
    several factors (your computer, monitor, lighting, persistence
    of vision, focus and peripheral vision...)

'Plea of Thunder (Applet)':
  type: Online Installation
  installation-of: Plea of Thunder
  exhibit: Digital Art Exhibit
  interactive: false
  animated: true
  mediums:
  - Java applet
  - HTML5
  summary: |
    Conceptual art: A Java applet that you and your friends can own!
  description: |
    Conceptual art: A Java applet that you and your friends can own!

'Prairie (HTML5)':
  type: Online Installation
  installation-of: Prairie
  exhibit: Digital Art Exhibit
  interactive: false
  animated: true
  mediums:
  - Javascript
  - HTML5
  summary: |
    An animated impressionistic depiction of the prairies.
  description: |
    An animated impressionistic depiction of the prairies.
  commentary: |
    I composed this while still in Winnipeg and still
    learning about the capabilities of `<canvas>` — something about the
    wind and the wheat...  The background is a public-domain drawing
    of a grain elevator taken from Wikimedia.

'Progression (HTML5)':
  type: Online Installation
  installation-of: Progression
  exhibit: Digital Art Exhibit
  interactive: false
  animated: true
  mediums:
  - Javascript
  - HTML5
  summary: |
    Animated op-art exhibiting a [moiré](http://en.wikipedia.org/wiki/Moir%C3%A9_pattern) effect.
  description: |
    Animated op-art exhibiting a [moiré](http://en.wikipedia.org/wiki/Moir%C3%A9_pattern) effect.
  commentary: |
    A real eye-tickler.  This was one of the first bits of `<canvas>` code I
    ever wrote; I essentially wrote it by accident — it wasn't quite what I
    meant, but I liked it, and kept it.  For me, in Firefox, it starts getting
    interesting around 100 iterations, and starts stopping being interesting
    around 1550.  In Chromium, you can still see some activity at about 2000
    iterations, but it's very faint thereafter.

'The Frame (HTML5)':
  type: Online Installation
  installation-of: The Frame
  exhibit: Digital Art Exhibit
  interactive: true
  animated: true
  mediums:
  - Javascript
  - HTML5
  instructions: | 
    Note 1. Green things can be dragged.  
    Note 2. Due to technical limitations, things cannot be dragged off
    of the computer screen.
  summary: |
    An interactive exploration of the concept of The Frame in art,
    based on **words** and **'do** by [[Frank Zappa]].
  description: |
    An interactive exploration of the concept of The Frame in art,
    based on **words** and **'do** by [[Frank Zappa]].
  commentary: |
    This piece was conceived and begun in late summer or early autumn of 2012,
    in Winnipeg, and finished up and released from Cornwall in spring of
    2013.
