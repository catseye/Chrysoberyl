# encoding: UTF-8
beta-Juliet:
  type: Programming Language
  genre: Esolang
  esowiki: beta-Juliet
  summary: A minimal event-oriented programming language
  abstract: |-
    beta-Juliet is a minimal event-based language.  Each event is caused by some other event.
    Event causation is conditional based on which of two given events occurred more recently.
    
    Portia is a preprocessor for beta-Juliet which allows large, regular, finite sets of events
    to be described succinctly.
    
    Version 2.0 of beta-Juliet (formerly known as "2iota") allows infinite sets of events to be
    specified, allowing the language to be Turing-complete.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca 2002
  computational-class: believed Turing-complete
  paradigms:
  - Event-oriented
  etymology:
  - automotive pun
  - feminine given name
  reference-distribution: beta-Juliet distribution
  implementations:
  - b_juliet.pl
  - 2iota

b_juliet.pl:
  type: Language Implementation
  in-distribution: beta-Juliet distribution
  license: BSD
  implementation-type: interpreter
  host-language: Perl

2iota:
  type: Language Implementation
  reference: true
  in-distribution: 'beta-Juliet distribution'
  license: BSD
  implementation-type: interpreter
  host-language: C99


Dieter:
  type: Programming Language
  genre: Experimental language
  summary: A language which conflates modules and type qualifiers
  abstract: |-
    Dieter (as in the German masculine given name Dieter, not dieter as in
    "one who diets") is a little experimental programming language that
    conflates *type qualifiers* with *modules* to produce something
    reminiscent of object-orientation.  It demonstrates another way of
    thinking about objects, or rather, classes: not so much as
    *aggregates of data* as *associations of predicates*.
    
    Dieter was intended as a way to make Hungarian notation part of the type
    system, and thus automatically checkable.  However, it also suggests
    possible ways of dealing with the problems of aliasing — that is,
    determining if two pointers cannot possibly point to the same data, for
    safety and optimization considerations.
  paradigms:
  - Object-oriented
  etymology:
  - masculine given name
  sample: |-
    module beefy
      procedure beef_up(x: ♥t): beefy ♥t
      begin
        return (bestow beefy x)
      end
    end.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca Oct 3, 2009
  computational-class: believed Turing-complete
  reference-distribution: Dieter distribution
  implementations:
  - dieter.py

dieter.py:
  type: Language Implementation
  in-distribution: Dieter distribution
  reference: true
  license: BSD
  implementation-type: typechecker
  host-language: Python


Eightebed:
  type: Programming Language
  genre: Esolang
  esowiki: Eightebed
  summary: A safe language with explicit memory deallocation
  abstract: |-
    Eightebed is a small language with explicit `malloc` and `free`.
    Through a modicum of static analysis
    and runtime support, Eightebed is safe: it is not possible to dereference a dangling
    pointer or otherwise incorrectly-populated memory.
    
    Eightebed was designed as a counter-example to Gregor Richards' claim that such
    a language would either need a garbage collector, or not actually implement `free`.
    Eightebed has a real `free` and has no garbage collector.
  commentary: |-
    The name "Eightebed" came from a typo by [[Alise]] for the word "enlightened".
  etymology:
  - typo
  sample: |-
    type node struct {
        int value;
        ptr to node next;
    };
    var ptr to node jim;
    var ptr to node george;
    {    
        jim = malloc node;
        if valid jim {
            [@jim].value = (1 + 4);
            george = jim;
        }
        if valid george {
            print [@george].value;
        }
        free george;
        free jim;
    }
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca Sep 1, 2010
  computational-class: believed Turing-complete
  implementations:
  - 8ebed2c.py

8ebed2c.py:
  type: Language Implementation
  in-distribution: Eightebed distribution
  reference: yes
  license: BSD
  implementation-type: compiler
  source-language: Eightebed
  host-language: Python
  target-language: ANSI C


Full Moon Fever:
  type: Programming Language
  genre: DSL
  summary: A language for describing ANSI terminal animations
  abstract: |-
    Full Moon Fever is a language for describing ASCII animations.
    It was used to deliver animated screens on Chris Pressey's BBS
    (when it was operational in the early 90's) via ANSI terminal control codes.
    This probably counts as his first proper language, even though
    it wasn't a full programming language, because it had
    the usual machinery (syntax, parser, interpreter...)
    Lives on, in a somewhat distended form, as a sub-language of
    [[ILLGOL]].
  commentary: |-
    I believe the name "Full Moon Fever" came from a mis-remembering
    of the title of the song "Full Moon Boogie" by Jan Hammer and
    that other guy.
  etymology:
  - song title
  - error
  sample: |-
    GO 1 2 CLREOL CENTRE "Enter... the Stupid Guard." 2
    GO 1 3 CLREOL
    PAUSE 70
    GO 76 19
    PRINT "0"
    PAUSE 20
    DO 20
        LF PRINT " " LF LF PRINT "0" PAUSE 5;
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca 1993
  computational-class: known not Turing-complete
  implemented: true


Maentwrog:
  type: Programming Language
  genre: Pedagogical language
  esowiki: Maentwrog
  summary: A simple RPN-calculator-based language
  abstract: |-
    Maentwrog is an RPN-calculator-turned-FORTH-interpreter, which
    probably counts as Chris Pressey's first proper programming language.
    It was implemented on his Amiga 500 in 1993, then lost and unearthed
    multiple times.  It is hardly remarkable, save that it spawned [[Befunge-93]].
  commentary: |-
    There are no extant example programs from the time the language was first
    implemented — I tried writing the Sieve of Eratosthenes in it once,
    but never got it to work, probably because `==` was not
    implemented correctly.  Recently, example programs and a description of the
    language (which has become the provisional spec) have been provided by
    Marinus — thanks Marinus!
    
    Maentwrog is the name of a town in Wales, but the usage of its name
    for this language came via Douglas Adams' "The Meaning of Liff",
    wherein it is defined thusly:
    "MAENTWROG (n. Welsh) Celtic word for a computer spelling mistake."
  etymology:
  - place name
  - welsh
  sample: |-
    GO 1 2 CLREOL CENTRE "Enter... the Stupid Guard." 2
    GO 1 3 CLREOL
    PAUSE 70
    GO 76 19
    PRINT "0"
    PAUSE 20
    DO 20
        LF PRINT " " LF LF PRINT "0" PAUSE 5;
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca 1993
  computational-class: known not Turing-complete
  implementations:
  - maentw.c
  reference-distribution: Maentwrog distribution

maentw.c:
  type: Language Implementation
  in-distribution: Maentwrog distribution
  license: Freely Redistributable
  reference: yes
  implementation-type: interpreter
  host-language: ANSI C


SMETANA:
  type: Programming Language
  genre: Esolang
  esowiki: SMETANA
  acronym-for: Self-Modifying Extremely Tiny AutomatoN Application
  summary: A pathological little self-modifying language
  abstract: |-
    SMETANA is a pathological little self-modifying language with only two
    possible operations: Go to step *n*, and Swap steps *n* and *m*.
    It has inspired a few variants and developments, notably a proof that
    despite its minimalism, it is finite-automata-complete; it is also the
    (great-?)grandfather of [[SMITH]].
  etymology:
  - dairy product
  - russian
  - surname
  sample: |-
    Step 1. Swap step 1 with step 2.
    Step 2. Go to step 2.
    Step 3. Go to step 1.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca 1994
  computational-class: known not Turing-complete
  notable: true
  reference-distribution: SMETANA distribution
  implementations:
  - smetana.pl
  - tc.catseye.yoob.smetana
  online-implementations:
  - 'http://catseye.tc/gallery/esolangs/yoob/'

smetana.pl:
  type: Language Implementation
  in-distribution: SMETANA distribution
  license: Public Domain
  reference: yes
  implementation-type: interpreter
  host-language: Perl

tc.catseye.yoob.smetana:
  type: Language Implementation
  in-distribution: yoob distribution
  license: Public Domain
  implementation-type: interpreter
  host-language: Java


SMITH:
  type: Programming Language
  genre: Esolang
  esowiki: SMITH
  acronym-for: Self-Modifying Indecent Turing Hack
  summary: An assembly-like language with no jumps whatsoever
  quotation: How many nights and weird mornings can this go on?
  quotation-attribution: Hunter S. Thompson
  abstract: |-
    SMITH is a self-modifying assembly-like language which completely lacks
    any kind of jump instructions *whatsoever*.  Despite this handicap, it
    appears to be Turing-complete.
  etymology:
  - surname
  sample: |-
    MOV R0, 10
    MOV R2, 0
    SUB R2, 1
    MOV R[R0], "Hello, world!"
    MOV TTY, R[R0]
    SUB R0, R2
    MOV R1, R0
    SUB R1, 23
    NOT R1
    NOT R1
    MUL R1, 8
    COR +1, -7, R1
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca July 2000
  computational-class: believed Turing-complete
  notable: true
  significant: true
  reference-distribution: SMITH distribution
  implementations:
  - smith.pl
  influences:
  - SMETANA

smith.pl:
  type: Language Implementation
  in-distribution: SMITH distribution
  reference: yes
  license: BSD
  implementation-type: interpreter
  host-language: Perl
