# encoding: UTF-8
ALPACA:
  type: Programming Language
  genre: Metalanguage
  acronym-for: A Language for Programming Arbitrary Cellular Automata
  abstract: |
    ALPACA is a meta-language for describing cellular automata. 
  commentary: |-
    The acronym is not quite accurate, as the automata are not in fact arbitrary, but it's
    a nice acronym.
    
    ALPACA is one of the few of my languages in which I've actually implemented
    other languages (or, well, cellular automata â€” close enough).  These are, namely,
    [[REDGREEN]], [[Braktif]], [[Circute]], and [[Jaccia and Jacciata]].
  esowiki: ALPACA
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: 1998
  etymology:
  - acronym
  notable: true
  sample: |
    /* John Conway's Game of Life, expressed in ALPACA. */
    state Dead  " " to Alive when 3 Alive and 5 Dead;
    state Alive "*" to Dead when 4 Alive or 7 Dead.
  reference-distribution: ALPACA distribution
  implementations:
  - alpaca.pl

alpaca.pl:
  type: Language Implementation
  reference: true
  in-distribution: ALPACA distribution
  license: BSD
  implementation-type: compiler
  source-language: ALPACA
  host-language: Perl
  target-language: Perl


Apple Befunge: 
  type: Programming Language
  genre: Esolang
  variant-of: Befunge-93
  abstract: |-
    Apple Befunge is a variant of Befunge for the Apple ][+, implemented
    in Applesoft BASIC.
    Resembles Befunge-93, with some extra 96-esque instructions, and some
    Apple-specific instructions.  Active development of this language
    was abandoned years ago, but the sources are retained here for historical
    preservation.
  inception-date: Jul 3, 2000
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  reference-distribution: Apple Befunge distribution
  implementations:
  - APPLE BEFUNGE EDITOR

APPLE BEFUNGE EDITOR:
  type: Language Implementation
  reference: true
  in-distribution: Apple Befunge distribution
  license: Public Domain
  # also: editor
  implementation-type: interpreter
  host-language: Applesoft BASIC


Arboretuum:
  type: Programming Language
  genre: Experimental language
  abstract: |
    Arboretuum is an experimental language based on _forest-rewriting_,
    a variant of tree-rewriting in which multiple trees are rewritten simultaneously.
    The language was intended for specifying compilers, with each tree representing
    a major compiler data structure (AST, symbol table, output buffer, etc.,)
    however, this idea was not entirely successful.  Regardless, Arboretuum is
    Turing-complete, as tree-rewriting is simply a special case of forest-rewriting.
  computational-class: believed Turing-complete
  paradigms:
  - Forest-rewriting
  inception-date: Mar 2008
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  etymology:
  - latin
  - portmanteau
  sample: |-
    (
      (
        (ast:   (let a 4 (+ 3 (* a 3))) )
        (stab:  eot)
        (out:   halt)
      )
      (
        ((ast:  (let #(n sym) #(v) #(expr)) => #(expr)            )
         (stab: eot                         => (#(n) #(v) EOT)    ))
        ((ast:  #(n sym)                    => #(v)               )
         (stab: (#(n) #(v) #(tab))          => (#(n) #(v) #(tab)) ))
        ((ast: #(a num)                     => _                  )
         (out: halt                         => (push #(a) halt)   ))
        ((ast: (+ _ _)                      => _                  )
         (out: halt                         => (add halt)         ))
        ((ast: (* _ _)                      => _                  )
         (out: halt                         => (mul halt)         ))
      )
    )
  reference-distribution: Arboretuum distribution
  implementations:
  - forest-rewriter.scm
  see-also:
  - Treacle

forest-rewriter.scm:
  type: Language Implementation
  in-distribution: Arboretuum distribution
  reference: true
  license: BSD
  implementation-type: interpreter
  host-language: Scheme


Bear Food:
  type: Programming Language
  genre: Esolang
  abstract: |
    Bear Food was a horrible language defined by an interpreter that
    evolved (no... let's be honest, it *devolved*) from a small piece of example
    code showing how to parse and intepret a simple reverse-polish notation language.
    This same example code also took a very divergent line of evolution, eventually
    becoming the programming language [[Var'aq]].
  tagline: liquid insanity from Hell
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  esowiki: Bear_Food
  inception-date: ca Dec 1999
  failure: true
  has-reference-distribution: false
  implementations:
  - bearfood.pl

bearfood.pl:
  type: Language Implementation
  reference: true
  license: Unknown license
  implementation-type: interpreter
  host-language: Perl
  broken: true


Befunge-93:
  type: Programming Language
  genre: Esolang
  abstract: |
    One of the more popular languages I ever designed and implemented.
    Eventually begat [[Befunge-97]], [[Funge-98]], and [[Wierd]], and doubtless influenced
    many others.  Cited in the New Hacker's Dictionary.
  # also: known not Turing-complete
  computational-class: can simulate some push-down automata
  esowiki: Befunge-93
  authors:
  - Chris Pressey
  etymology:
  - typo
  influences:
  - Maentwrog
  sample: |2
     v    <
    >?"/",^
     >"\",^
  notable: true
  significant: true
  quotation: Hey, my archive must be corrupt.  These sources all look like garbage.
  quotation-attribution: Mark Topham
  inception-date: Sep 1993
  reference-distribution: Befunge-93 distribution
  implementations:
  - bef
  other-implementations: true

bef:
  type: Language Implementation
  reference: true
  license: BSD
  implementation-type: interpreter
  host-language: ANSI C


Befunge-97:
  type: Programming Language
  genre: Esolang
  abstract: |
    An unimplemented attempt to improve upon Befunge-93, described
    (fairly accurately) as "brain-damaged."  This was primarily due to the
    fact that separate processes were specified as sharing a single stack.
    Quickly gave way to [[Funge-98]].
  authors:
  - Chris Pressey
  - Befunge Mailing List Working Group
  inception-date: Dec 25, 1997
  etymology:
  - typo
  failure: true
  influences:
  - Befunge-93
  has-reference-distribution: false
  implementations: []


beta-Juliet:
  type: Programming Language
  genre: Esolang
  esowiki: beta-Juliet
  summary: A minimal event-oriented programming language
  abstract: |
    beta-Juliet is a minimal event-based language.  Each event is caused by some other event.
    Event causation is conditional based on which of two given events occurred more recently.
    
    Portia is a preprocessor for beta-Juliet which allows large, regular, finite sets of events
    to be described succinctly.
    
    Version 2.0 of beta-Juliet (formerly known as "2iota") allows infinite sets of events to be
    specified, allowing the language to be Turing-complete.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca 2002
  computational-class: believed Turing-complete
  paradigms:
  - Event-oriented
  etymology:
  - automotive pun
  - feminine given name
  reference-distribution: beta-Juliet distribution
  implementations:
  - b_juliet.pl
  - 2iota

b_juliet.pl:
  type: Language Implementation
  in-distribution: beta-Juliet distribution
  license: BSD
  implementation-type: interpreter
  host-language: Perl

2iota:
  type: Language Implementation
  reference: true
  in-distribution: beta-Juliet distribution
  license: BSD
  implementation-type: interpreter
  host-language: C99


Beturing:
  type: Programming Language
  genre: Esolang
  abstract: |
    Beturing is a "Befunge-flavoured" language for describing Turing
    machines; both the tape and the finite control are laid out two-dimensionally.
    In addition, the finite control must be expressed as a planar graph (no
    edge representing a transition may cross any other edge.) It was devised
    this way as a test of the so-called "wire-crossing problem". It turns out
    that there are universal Turing machines with finite controls that are planar
    graphs, so Beturing is Turing-complete.
  inception-date: Oct 20, 2005
  esowiki: Beturing
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: shown Turing-complete
  dimensionality: 2
  etymology:
  - portmanteau
  sample: |
    # D(40, 4)
    # @(40, 4)
    $bbab$
    # C(0, 0)
    # @(0, 0)
     . . . . . .
    *v*<*<*<*>*v
    aa .ab . .aa .
    >/*>./*^*^</*v
    bb .ba . .bb .
    >/*^./*^*^</*v
    $$ .$$ . .$$ .
    >/*^</*>*^.@*v
             . . .
    *@      *^*<*<
  reference-distribution: Beturing distribution
  implementations:
  - beturing.lua

beturing.lua:
  type: Language Implementation
  in-dstribution: Beturing distribution
  reference: true
  license: BSD
  implementation-type: interpreter
  host-language: Lua


Bhuna:
  type: Programming Language
  genre: Production language
  abstract: |
    Bhuna is a small, garbage-collected language with a simple syntax,
    closures, inferred types, lightweight processes, and support for UTF-8 source
    code.  It was implemented partly to see how closely I could match the performance
    of Lua's interpreter.  It was meant more more as an experimental starting
    point for branching new languages, than as a useful language in and of itself.
  computational-class: believed Turing-complete
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Oct 21, 2005
  etymology:
  - indian
  - dish
  influences:
  - Lua
  sample: |
    Fib = ^ X {
      if X < 2 return 1 else
      return Fib(X - 1) + Fib(X - 2)
    }
    Print Fib(32), EoL
  reference-distribution: Bhuna distribution
  implementations:
  - bhuna

bhuna:
  type: Language Implementation
  in-dstribution: Bhuna distribution
  reference: true
  license: BSD
  implementation-type: interpreter
  host-language: C99


Braktif:
  type: Programming Language
  genre: Esolang (Cellular Automaton)
  abstract: |
    Braktif is a cellular automaton modelled closely after the [[brainfuck]]
    programming language.
  computational-class: believed Turing-complete
  esowiki: Braktif
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  etymology:
  - television character
  - portmanteau
  - french
  influences:
  - brainfuck
  paradigms:
  - Cellular automaton
  dimensionality: 2
  sample: |2
                                *
                           <<*[--]*
    000000000000000000  *[-----  --]
    -----------------d-i--         --------
  inception-date: 2005
  reference-distribution: Braktif distribution
  implementations:
  - braktif.alp
  see-also:
  - pibfi

braktif.alp:
  type: Language Implementation
  reference: true
  in-distribution: Braktif distribution
  license: BSD
  implementation-type: formal description
  host-language: ALPACA


Burro:
  type: Programming Language
  genre: Esolang
  abstract: |
    Burro is a [[brainfuck]]-like programming language whose programs
    form an algebraical _group_ (modulo the equivalence relation of "computes the
    same function") under the operation of concatenation. The upshot of this
    is that, for every Burro program, we can find an _antiprogram_ which, when
    appended to the program, forms a "no-op" program which has no effect.
     This is a form of reversible computing, but unlike most reversible languages
    where it is the execution of the program that is "undone", in Burro, it is
    the program itself which is annihiliated by its antiprogram.  Burro 1.0
    was released in fall of 2007, but proved not to form a proper group. This
    shortcoming was rectified in summer of 2010.
  # started thinking about it 2005, finally achieved 2010
  inception-date: 2007
  computational-class: shown Turing-complete
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  etymology:
  - spanish
  - farm animal
  influences:
  - brainfuck
  sample: |
    !--(--(--(!>/
      >>--(+<<+++++++>/+++>+++++>)<
    >)/
      >>--(+++>+++++>/+++<<<<<+++>)<
    >)/
      >>--(+++>+>/+<<+++>)<
    >)<
  significant: true
  reference-distribution: Burro distribution
  implementations:
  - Burro.lhs

Burro.lhs:
  type: Language Implementation
  in-distribution: Burro distribution
  reference: true
  license: Unknown license
  implementation-type: interpreter
  host-language: Haskell


Cabra:
  type: Programming Language
  genre: Esolang
  abstract: |
    Cabra is a (somewhat) formal programming language whose programs
    form an algebraical _dioid_ (an idempotent semiring), modulo the equivalence
    relation of "computes the same function", under the operations of parallel
    execution (as the additive operator) and sequential composition (as the multiplicative
    operator).
  inception-date: Oct 30, 2007
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  etymology:
  - spanish
  - farm animal
  influences:
  - Burro
  computational-class: known not Turing-complete
  "name": |-
    Cabra
  "project": |-
    cabra
  sample: |
    (SET 1 + SET 2) * IFSET 1 THEN (IFSET 2 THEN SET 3 ELSE SKIP) ELSE SKIP
  reference-distribution: Cabra distribution
  implementations:
  - cabra.hs

cabra.hs:
  type: Language Implementation
  in-distribution: Cabra distribution
  reference: true
  license: Unknown license
  implementation-type: interpreter
  host-language: Haskell
  commentary: |-
    No parser.


Circute:
  type: Programming Language
  genre: Esolang (Cellular Automaton)
  abstract: |
    Circute is a cellular automaton that simulates conduits that
    carry digital signals and NAND gates that manipulate those signals.
  esowiki: Circute
  paradigms:
  - Cellular automaton
  etymology:
  - portmanteau
  influences:
  - Wireworld
  dimensionality: 2
  computational-class: known not Turing-complete
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  sample: |2
                      =
                      =
       #######==   ===N===   =========
       #       =   =     =   =       =
     ==N==     = ==N== ==N== =     ==N==
     =   =     = =   = =   = =     =   =
     =====     = ===== ===== =     =====
       =       =   =     =   =       =
       =============     =============
  inception-date: 2005
  reference-distribution: Circute distribution
  implementations:
  - circute.alp
  - tc.catseye.yoob.circute
  online-implementations:
  - 'http://catseye.tc/gallery/esolangs/yoob/'

tc.catseye.yoob.circute:
  type: Language Implementation
  in-distribution: yoob distribution
  license: Public Domain
  implementation-type: interpreter
  host-language: Java

circute.alp:
  type: Language Implementation
  reference: true
  in-distribution: Circute distribution
  license: BSD
  implementation-type: formal description
  host-language: ALPACA


Didigm:
  type: Programming Language Family
  summary: A reflective cellular automaton
  genre: Esolang
  abstract: |
    Didigm is a reflective cellular automaton: the transition rules
    for the automaton are defined by forms in the very playfield governed by
    those transition rules.
  tagline: |-
    Didigm = ALPACA + Ypsilax
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  esowiki: Didigm
  dimensionality: 2
  inception-date: Nov 20, 2007
  etymology:
  - neologism
  sample: |
    3333333333333
    3002300230073
    3111311132113
    3311321131573
    3111311131333
    3333333333333
    =F3
    ,
    =F1
    111111111111111
    111111131111111
    111111111111574
    111111111111333
    311111111111023
    111111111111113
  reference-distribution: Didigm distribution
  implementations: []


Dieter:
  type: Programming Language
  genre: Experimental language
  summary: A language which conflates modules and type qualifiers
  abstract: |
    Dieter (as in the German masculine given name Dieter, not dieter as in
    "one who diets") is a little experimental programming language that
    conflates *type qualifiers* with *modules* to produce something
    reminiscent of object-orientation.  It demonstrates another way of
    thinking about objects, or rather, classes: not so much as
    *aggregates of data* as *associations of predicates*.
    
    Dieter was intended as a way to make Hungarian notation part of the type
    system, and thus automatically checkable.  However, it also suggests
    possible ways of dealing with the problems of aliasing â€” that is,
    determining if two pointers cannot possibly point to the same data, for
    safety and optimization considerations.
  paradigms:
  - Object-oriented
  etymology:
  - masculine given name
  sample: |-
    module beefy
      procedure beef_up(x: â™¥t): beefy â™¥t
      begin
        return (bestow beefy x)
      end
    end.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca Oct 3, 2009
  computational-class: believed Turing-complete
  reference-distribution: Dieter distribution
  implementations:
  - dieter.py

dieter.py:
  type: Language Implementation
  in-distribution: Dieter distribution
  reference: true
  license: BSD
  implementation-type: typechecker
  host-language: Python


Eightebed:
  type: Programming Language
  genre: Esolang
  esowiki: Eightebed
  summary: A safe language with explicit memory deallocation
  abstract: |
    Eightebed is a small language with explicit `malloc` and `free`.
    Through a modicum of static analysis
    and runtime support, Eightebed is safe: it is not possible to dereference a dangling
    pointer or otherwise incorrectly-populated memory.
    
    Eightebed was designed as a counter-example to Gregor Richards' claim that such
    a language would either need a garbage collector, or not actually implement `free`.
    Eightebed has a real `free` and has no garbage collector.
  commentary: |-
    The name "Eightebed" came from a typo by [[Alise]] for the word "enlightened".
  etymology:
  - typo
  sample: |-
    type node struct {
        int value;
        ptr to node next;
    };
    var ptr to node jim;
    var ptr to node george;
    {    
        jim = malloc node;
        if valid jim {
            [@jim].value = (1 + 4);
            george = jim;
        }
        if valid george {
            print [@george].value;
        }
        free george;
        free jim;
    }
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca Sep 1, 2010
  computational-class: believed Turing-complete
  reference-distribution: Eightebed distribution
  implementations:
  - 8ebed2c.py

8ebed2c.py:
  type: Language Implementation
  in-distribution: Eightebed distribution
  reference: yes
  license: BSD
  implementation-type: compiler
  source-language: Eightebed
  host-language: Python
  target-language: ANSI C


Emmental:
  type: Programming Language
  genre: Esolang
  abstract: |
    Emmental is a self-modifying programming language.  It is defined
    in terms of a meta-circular interpreter, and this meta-circular interpreter
    provides an operation that redefines operations of the meta-circular interpreter.
    In fact, this mechanism is required for Emmental to be Turing-complete.
  computational-class: believed Turing-complete
  esowiki: Emmental
  paradigms:
  - Meta-circular
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Nov 11, 2007
  etymology:
  - dairy product
  - swiss
  sample: |
    ;#58#126#63#36!;#46#36#!;#0#1!;#0#2!;#0#3!;#0#4!;#0#5!;#0#6!;#0#7!#0#33#111#108#108#101#72$
  reference-distribution: Emmental distribution
  implementations:
  - emmental.hs
  see-also:
  - Mascarpone

emmental.hs:
  type: Language Implementation
  in-distribution: Emmental distribution
  reference: true
  license: BSD
  implementation-type: interpreter
  host-language: Haskell


Etcha:
  type: Programming Language
  genre: Esolang
  abstract: |
    Etcha is a two-dimensional descendant of Jeffry Johnston's [BitChanger].
    Like BitChanger, it has four instructions; unlike BitChanger, its storage
    model is based on turtle graphics, which permits it to be immediately used
    for an alternative purpose: graphical composition. Unlike the turtle in LOGO
    however, the turtle in Etcha is an integral part of the computation, playing
    a role similar to the tape head of a Turing machine.
  inception-date: Oct 4, 2009
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  esowiki: Etcha
  influences:
  - BitChanger
  sample: |-
    >+++>+++>+++>+++>[+]>>>>+
  sample-output: |-
    #####
       #
       #
     ###
  reference-distribution: Etcha distribution
  implementations:
  - tc.catseye.etcha
  - tc.catseye.yoob.etcha
  online-implementations:
  - 'http://catseye.tc/gallery/esolangs/yoob/'

tc.catseye.etcha:
  type: Language Implementation
  in-distribution: Etcha distribution
  reference: true
  license: Unknown license
  implementation-type: interpreter
  host-language: Java

tc.catseye.yoob.etcha:
  type: Language Implementation
  in-distribution: yoob distribution
  license: Public Domain
  implementation-type: interpreter
  host-language: Java


ETHEL:
  type: Programming Language
  genre: DSL
  authors:
  - Chris Pressey
  auspices:
  - Star Building Materials
  abstract: |
    A language specifically for expressing quantity surveying (materials
    estimating) formula and procedures, designed for Star Building Materials.
  computational-class: believed Turing-complete
  inception-date: 1998
  etymology:
  - acronym
  - monty python
  has-reference-distribution: false
  implementations:
  - ethel.pl

ethel.pl:
  type: Language Implementation
  license: Proprietary
  host-language: Perl
  implementation-type: interpreter


Flobnar: 
  type: Programming Language
  genre: Esolang
  abstract: |
    One day in September of 2011 â€” though I'm not sure precisely
    which one â€” marked [[Befunge-93]]'s 18th birthday.  That means that
    Befunge is now old enough to drink in its native land of Canada.  To celebrate
    this, I thought I'd get Befunge-93 drunk to see what would happen.  What
    happened was Flobnar, an esolang which is in many respects a functional dual
    of Befunge-93; most of the symbols have analogous meanings, but execution
    proceeds in a much more dataflow-like fashion.
  inception-date: Oct 28, 2011
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  esowiki: Flobnar
  influences:
  - Befunge-93
  sample: |-
    >     v
    ^\ <   
           
    :v    v   \<@
    -<      : 6
    1 :   > *
      -|    <
      11
  reference-distribution: Flobnar distribution
  implementations:
  - Flobnar.hs

Flobnar.hs:
  type: Language Implementation
  in-distribution: Flobnar distribution
  reference: true
  license: BSD
  implementation-type: interpreter
  host-language: Haskell


Full Moon Fever:
  type: Programming Language
  genre: DSL
  summary: A language for describing ANSI terminal animations
  abstract: |
    Full Moon Fever is a language for describing ASCII animations.
    It was used to deliver animated screens on Chris Pressey's BBS
    (when it was operational in the early 90's) via ANSI terminal control codes.
    This probably counts as his first proper language, even though
    it wasn't a full programming language, because it had
    the usual machinery (syntax, parser, interpreter...)
    Lives on, in a somewhat distended form, as a sub-language of
    [[ILLGOL]].
  commentary: |-
    I believe the name "Full Moon Fever" came from a mis-remembering
    of the title of the song "Full Moon Boogie" by Jan Hammer and
    that other guy.
  etymology:
  - song title
  - error
  sample: |-
    GO 1 2 CLREOL CENTRE "Enter... the Stupid Guard." 2
    GO 1 3 CLREOL
    PAUSE 70
    GO 76 19
    PRINT "0"
    PAUSE 20
    DO 20
        LF PRINT " " LF LF PRINT "0" PAUSE 5;
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca 1993
  computational-class: known not Turing-complete
  has-reference-distribution: false
  # well, there's one in illgola-2, so this is factually wrong:
  implementations: []


Funge-98:
  type: Programming Language Family
  genre: Esolang
  abstract: |
    Culmination of attempts to improve upon Befunge.  Seemingly everything
    except the kitchen sink was stuffed into it somehow.
  authors:
  - Chris Pressey
  - Befunge Mailing List Working Group
  inception-date: 1998
  computational-class: shown Turing-complete
  influences:
  - Befunge-93
  - Befunge-97
  notable: true
  sample: |
    >>#v?v
    ^,A' <
     ^ C'
        T
     ^ <<
        G
        '
  quotation: |-
    Taking programming in new directions... all four of them
  quotation-attribution: |-
    Jason
  "year": |-
    1998
  reference-distribution: Funge-98 distribution
  implementations:
  - FBBI

FBBI:
  type: Language Implementation
  reference: false
  in-distribution: FBBI distribution
  license: BSD
  host-language: ANSI C
  implementation-type: interpreter


Gemooy: 
  type: Programming Language
  genre: Esolang
  abstract: |
    Gemooy is really just a two-dimensional bagatelle of sorts; it
    combines features from [[2-ill]] and [[Etcha]], and adds self-modification.
    It came about when I noticed the tape-related semantics of 2-ill were essentially
    the same as those of [[BitChanger]].  (Information on this language is
    only available on the esowiki for now.)
  inception-date: Dec 2, 2010
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  implementations:
  - tc.catseye.yoob.gemooy
  influences:
  - 2-ill
  - Etcha
  sample: |-
    %### # ###   # #   ### # ###   # #   ### # ###@

       @    @#         @
      @      @          @
     @@
    @                   @
        $         @# # @
                 #      @
                #
           @   @
                        @
             
           @
          #
         #
        @
        @    @
         @# @
    @        @
             @
      @     @#@
  has-reference-distribution: false

tc.catseye.yoob.gemooy:
  type: Language Implementation
  in-distribution: yoob distribution
  license: Public Domain
  implementation-type: interpreter
  host-language: Java


GraNoLa/M:
  type: Programming Language
  genre: Esolang
  acronym-for: GRAph-NOde LAnguage (possibly for Machines)
  abstract: |
    GraNoLa/M is a Graph-Node-based Language (possibly for Machines.) 
    It was one of my submissions for the Esoteric Awards. Not unlike Tamerlane,
    its execution model involves both traversing and rewriting a graph at the
    same time.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  entered-in:
  - Esoteric Awards
  esowiki: GraNoLa/M
  inception-date: Jul 2002
  etymology:
  - acronym
  influences:
  - Tamerlane
  sample: |
    a=^sajalom(b=^#d(c=^bimodang(^a))d(e=^#cthulhu(f=^uwaming(g=^ubewic()))))
  reference-distribution: GraNoLa/M distribution
  implementations:
  - granolam.erl
  see-also:
  - Kangaroo Iceberg

granolam.erl:
  type: Language Implementation
  in-distribution: GraNoLa/M distribution
  reference: true
  license: Public Domain
  implementation-type: interpreter
  host-language: Erlang


Hev:
  type: Programming Language
  genre: Esolang
  abstract: |
    Hev is a programming language that attempts to solve the "central
    problem of infix notation": how do you allow it without requiring the programmer
    to either memorize precedence tables or litter parentheses everywhere?  Hev
    has a way! In Hev, *all* operators are infix, yet no tiresome memorization
    of any dreadful precedence table is required!
  computational-class: believed Turing-complete
  paradigms:
  - Tree-rewriting
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  esowiki: Hev
  inception-date: May 23, 2007
  etymology:
  - neologism
  sample: |
    71+8*27,19,29*99,6,37,7,61,47
  reference-distribution: Hev distribution
  implementations:
  - Hev.hs

Hev.hs:
  type: Language Implementation
  in-distribution: Hev distribution
  reference: true
  license: BSD
  implementation-type: interpreter
  host-language: Haskell


Hunter:
  type: Programming Language
  genre: Esolang
  tagline: |-
    maze-space rewriting with authentic inter-rodent communication
  abstract: |
    Hunter is a language I designed for the Esoteric Awards ("Essies")
    Its abstract starts out like this:
    
    > It is perceived that one of the biggest problems in maintaining
    > interest in programming is the above linear growth of boredom
    > compared to the usefulness of the program, resulting in an
    > acute loss of enthusiasm on the part of the programmers and
    > ultimately the abandonment of the software...
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca Sep 20, 2000
  esowiki: Hunter
  entered-in:
  - Esoteric Awards
  etymology:
  - masculine given name
  dimensionality: 2
  sample: |
    ##################
    #   1#2#         #
    # #### #         #
    #      #         #
    # ######    M    #
    #     M#         #
    #+######         #
    #     !#         #
    ##################
    *12+>3
    *21+>3
  reference-distribution: Hunter distribution
  implementations:
  - hunter.pl

hunter.pl:
  type: Language Implementation
  in-dstribution: Hunter distribution
  reference: true
  license: BSD
  implementation-type: interpreter
  host-language: Perl


ILLGOL:
  type: Programming Language
  genre: Joke language
  abstract: |
    A joke language which parodies the sort of language designed by the
    sheer fact that a compiler for it has been hacked together.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca Jun 2000
  etymology:
  - parody
  sample: |
    NB eh.ill
    10 *f = { print str(#0), EoL };
    20 do f(1);
    30 don't f;
    40 do f(2);
    50 reinstate f;
    60 do f(3);
    FIN
  reference-distribution: 'Illgol: Grand Mal'
  implementations:
  - ILLGOL.COM

ILLGOL.COM:
  type: Language Implementation
  in-distribution: illgol
  license: Unknown license
  implementation-type: compiler
  source-language: ILLGOL
  host-language: ANSI C
  target-language: x86 machine code

Illgola-2:
  type: Programming Language
  genre: Joke language
  abstract: |
    A joke language which parodies the sort of language designed by the
    sheer fact that a compiler for it has been hacked together.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  variant-of: ILLGOL
  inception-date: ca Jun 2000
  etymology:
  - parody
  reference-distribution: 'Illgol: Grand Mal'
  implementations: []

Illberon:
  type: Programming Language
  genre: Joke language
  abstract: |
    A joke language which parodies the sort of language designed by the
    sheer fact that a compiler for it has been hacked together.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  variant-of: ILLGOL
  inception-date: ca Jun 2000
  etymology:
  - parody
  reference-distribution: 'Illgol: Grand Mal'
  implementations: []

Open Sores Illgol##:
  type: Programming Language
  genre: Joke language
  abstract: |
    A joke language which parodies the sort of language designed by the
    sheer fact that a compiler for it has been hacked together.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  variant-of: ILLGOL
  inception-date: ca Jun 2000
  etymology:
  - parody
  reference-distribution: 'Illgol: Grand Mal'
  implementations: []


Iphigeneia:
  type: Programming Language
  genre: Pedagogical language
  abstract: |
    Iphigeneia is a toy programming language which contains features
    from both imperative programming (assignments to mutable variables, `while`
    loops,) and functional programming (immutable name bindings, Scheme-style
    "named `let`" loops.) It was originally intended as a testbed for algorithms
    that convert programs between the two forms.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Nov 20, 2007
  etymology:
  - classical greek
  - mythological
  sample: |-
    var a in a :=
        let c = 5 in let d = 1 in
            loop
                if c = 0 then
                    d
                else
                    let d = d * c in
                        let c = c - 1 in
                            repeat
  reference-distribution: Iphigeneia distribution
  implementations:
  - iphi

iphi:
  type: Language Implementation
  in-distribution: Iphigeneia distribution
  reference: true
  license: Unknown license
  implementation-type: interpreter
  host-language: Haskell


# TODO: split up?
Jaccia and Jacciata:
  type: Programming Language
  genre: Esolang (Cellular Automaton)
  abstract: |
    Jaccia and Jacciata are cellular automata inspired by the [Announcement
    of Scientific Proof that Slime Molds are Intelligent Maze Solvers](http://web.archive.org/web/20020220163303/http://www.riken.go.jp/lab-www/frontier-div/NEWSLETTER/feb2001/ameboid_e.htm).
    Jaccia can solve mazes too, by a similar mechanism (shrinking). Jacciata builds
    upon this to find the shortest path through a maze, if one exists and is unique.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Apr 11, 2009
  etymology:
  - neologism
  computational-class: known not Turing-complete
  sample: |
    #######S###
    #:::::::::#
    #:###:###:#
    #:#:#:::#:#
    #:#:#:#:###
    #:::#:#:#:#
    #####:#:#:#
    #:#:::#:::#
    #:#:###:###
    #:::#:::::#
    #########F#
  sample-output: |
    #######S###
    #    :::  #
    # ###:### #
    # # #:::# #
    # # # #:###
    #   # #:# #
    ##### #:# #
    # #   #:  #
    # # ###:###
    #   #  :::#
    #########F#
  reference-distribution: Jaccia and Jacciata distribution
  implementations:
  - jaccia.alp
  - jacciata.alp

jaccia.alp:
  type: Language Implementation
  reference: true
  in-distribution: Jaccia and Jacciata distribution
  license: BSD
  implementation-type: formal description
  host-language: ALPACA

jacciata.alp:
  type: Language Implementation
  reference: true
  in-distribution: Jaccia and Jacciata distribution
  license: BSD
  implementation-type: formal description
  host-language: ALPACA


Kangaroo Iceberg:
  type: Programming Language
  genre: Esolang
  abstract: |
    Kangaroo Iceberg was a short-lived attempt to pare down Tamerlane
    to something implementable, and implement it.  Although it got a fair ways
    along (e.g. the parser for graphs seems to be complete, I lost interest
    in it at the time, and put off finishing it indefinitely.
    
    Now, the challenge will be reconstructing the language from the partial
    implementation and notes that I left behind...
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  failure: true
  influences:
  - Tamerlane
  inception-date: Jul 2004
  reference-distribution: Kangaroo Iceberg distribution
  implementations:
  - kiceberg

kiceberg:
  type: Language Implementation
  in-distribution: Kangaroo Iceberg distribution
  reference: true
  license: BSD
  implementation-type: interpreter
  host-language: ANSI C
  broken: true


Kelxquoia: 
  type: Programming Language
  genre: Esolang
  abstract: |
    Kelxquoia is another remotely fungeoid language, this one self-modifying
    â€” in fact, self-destroying.  As instructions are executed, they are
    erased.  In order to execute indefinitely, new instructions of some sort
    must be created. Luckily the language provides as its main data-manipulation
    facility, grid-rewriting, which can be used to restore instructions that
    were previously erased after execution.  (Information on this language is
    only available on the esowiki for now.)
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Dec 23, 2010
  computational-class: believed Turing-complete
  esowiki: Kelxquoia
  sample: |2
     >+-0 0*+-1*/+-?*-R*- *+-?*-R*-?*/v
     RRRRRRRRRRRRRRRRRRRR RRRRRRRRRRRRR
    $>+-0 0*+-1*/+-?*-R*- *+-?*-R*-?*/v
        ' '   '       '  '      '   
                 '         '  '     
     ^      /*?-*P-*?-+*?-*P-* -+     <
     P      PPPPPPPPPPPPPPPPPP PP     P
     ^      /*?-*P-*?-+*?-*P-* -+     <
    
     00 00 00 00
  has-reference-distribution: false
  implementations: []


Larabee:
  type: Programming Language
  genre: Esolang
  abstract: |
    Larabee is an assembly-like programming language, with Scheme-like
    syntax, that borrows the notion of branch prediction from computer architecture
    and abuses it, creating a path that leads only to existential angst and self-destruction.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Jan 10, 2008
  etymology:
  - surname
  - television show
  computational-class: known not Turing-complete
  sample: |-
    (store (input) (input)
      (store (input) (input)
        (label loop
          (store (input) (op * (fetch (input)) (fetch (input)))
            (store (input) (op - (fetch (input)) (input))
              (test (op > (fetch (input)) (input))
                (goto loop) (print (fetch (input)))))))))
  reference-distribution: Larabee distribution
  implementations:
  - larabee.scm

larabee.scm:
  type: Language Implementation
  in-distribution: Larabee distribution
  reference: true
  license: Unknown license
  implementation-type: interpreter
  host-language: Scheme


Madison: 
  type: Programming Language
  genre: Proof language
  abstract: |
    Madison is a language in which one can state proofs of properties
    of term-rewriting systems.  Classical methods of automated reasoning,
    such as resolution, are not used; indeed, term-rewriting itself is
    used to check the proofs.  Both direct proof and proof by induction
    are supported.  Induction in a proof must be across a structure which
    has a well-founded inductive definition.  Such structures can be thought
    of as types, although this is largely nominal; the traditional typelessness
    of term-rewiting systems is largely retained.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  inception-date: Dec 2, 2011
  sample: |
    type tree is
      tree(leaf)        -> true
      tree(branch(X,Y)) -> and(tree(X),tree(Y))
    in let
      reflect(leaf)        -> leaf
      reflect(branch(A,B)) -> branch(reflect(B),reflect(A))
    in theorem
      forall X where tree(X)
        reflect(reflect(X)) ~> X
    proof
      case X = leaf
        reflect(reflect(leaf))
        -> reflect(leaf)        [by reflect.1]
        -> leaf                 [by reflect.1]
      case X = branch(S, T)
        reflect(reflect(branch(S, T)))
        -> reflect(branch(reflect(T),reflect(S)))          [by reflect.2]
        -> branch(reflect(reflect(S)),reflect(reflect(T))) [by reflect.2]
        -> branch(S,reflect(reflect(T)))                   [by IH]
        -> branch(S,T)                                     [by IH]
    qed
  reference-distribution: Madison distribution
  implementations: []


Maentwrog:
  type: Programming Language
  genre: Pedagogical language
  esowiki: Maentwrog
  summary: A simple RPN-calculator-based language
  abstract: |
    Maentwrog is an RPN-calculator-turned-FORTH-interpreter, which
    probably counts as Chris Pressey's first proper programming language.
    It was implemented on his Amiga 500 in 1993, then lost and unearthed
    multiple times.  It is hardly remarkable, save that it spawned [[Befunge-93]].
  commentary: |-
    There are no extant example programs from the time the language was first
    implemented â€” I tried writing the Sieve of Eratosthenes in it once,
    but never got it to work, probably because `==` was not
    implemented correctly.  Recently, example programs and a description of the
    language (which has become the provisional spec) have been provided by
    Marinus â€” thanks Marinus!
    
    Maentwrog is the name of a town in Wales, but the usage of its name
    for this language came via Douglas Adams' "The Meaning of Liff",
    wherein it is defined thusly:
    "MAENTWROG (n. Welsh) Celtic word for a computer spelling mistake."
  etymology:
  - place name
  - welsh
  sample: |-
    GO 1 2 CLREOL CENTRE "Enter... the Stupid Guard." 2
    GO 1 3 CLREOL
    PAUSE 70
    GO 76 19
    PRINT "0"
    PAUSE 20
    DO 20
        LF PRINT " " LF LF PRINT "0" PAUSE 5;
  authors:
  - Chris Pressey
  inception-date: ca 1993
  computational-class: known not Turing-complete
  implementations:
  - maentw.c
  reference-distribution: Maentwrog distribution

maentw.c:
  type: Language Implementation
  in-distribution: Maentwrog distribution
  license: Freely Redistributable
  reference: yes
  implementation-type: interpreter
  host-language: ANSI C


Mascarpone:
  type: Programming Language
  genre: Esolang
  abstract: |
    Mascarpone is a self-modifying language able to alter the meta-circular
    interpreter which defines it, like its predecessor Emmental.  Unlike Emmental
    however, in Mascarpone interpreters are first-class objects, making the
    job of reflective interpreter-modification quite a bit cleaner and richer.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Dec 10, 2007
  computational-class: believed Turing-complete
  etymology:
  - dairy product
  - italian
  influences:
  - Emmental
  sample: |
    v['[/''/']v*]v*'?<^v[/?/<]v*'S<[>!]v*'F<^[]v*1'p'kS'kF.
  significant: true
  quotation: |-
    You are lost in a twisty little maze of meta-circular intepreters, all alike
  quotation-attribution: |-
    "Colossal Cave", Crowther and Woods
  reference-distribution: Mascarpone distribution
  implementations:
  - mascarpone.hs

mascarpone.hs:
  type: Language Implementation
  in-distribution: Mascarpone distribution
  license: BSD
  reference: yes
  implementation-type: interpreter
  host-language: Haskell


MDPN:
  type: Programming Language
  genre: Metalanguage
  acronym-for: Multi-Directional Pattern Notation
  abstract: |
    MDPN is a meta-language for describing multi-directional and
    multi-dimensional languages.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: 1999
  etymology:
  - acronym
  sample: |2
      Box ::= "+" {"-"}^(w) r(-90) "+" "||" {"|"}^(h) r(-90)
              "+" {"-"}^(w) r(-90) "+" "||" {"|"}^(h) r(-90)
  reference-distribution: MDPN distribution
  implementations: []


"'N-DCNC":
  type: Programming Language
  genre: Joke language
  abstract: |
    'N-DCNC was my entry for the 2000 Esoteric Awards ('Essies')
    It is based on a conspiracy theory involving
    UFOs and a 5-member boy band, or something.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  entered-in:
  - Esoteric Awards 2000
  inception-date: Oct 2000
  sample: |
    4*5+2/2,(9*`c)+1
  reference-distribution: "'N-DCNC distribution"
  implementations:
  - ndcnc.pl
  - ndcnc.bf

ndcnc.pl:
  type: Language Implementation
  reference: true
  license: Unknown license
  implementation-type: interpreter
  host-language: Perl

ndcnc.bf:
  type: Language Implementation
  license: Unknown license
  implementation-type: interpreter
  host-language: Befunge-93
  broken: true


Nhohnhehr: 
  type: Programming Language
  genre: Esolang
  abstract: |
    Nhohnhehr is a remotely fungeoid language which explores the design
    space between having a fixed playfield versus an expandable one.  When the
    instruction pointer reaches the edge of the playfield (the "room"), whether
    it wraps around or creates a new room and adjoins it to that edge, depends
    on the current _edge mode_ of the program.  New copies of rooms may be rotated
    before being adjoined to existing rooms, but rooms are otherwise immutable.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: can simulate some push-down automata
  esowiki: Nhohnhehr
  dimensionality: 2
  inception-date: Dec 8, 2010
  sample: |
    +------+
    |    /}|
    |&#/$?@|
    |  / \&|
    |      |
    | {    |
    |\\    |
    +------+
  reference-distribution: Nhohnhehr distribution
  implementations:
  - nhohnhehr.py

nhohnhehr.py:
  type: Language Implementation
  in-distribution: Nhohnhehr distribution
  author: Marinus
  reference: true
  license: Public Domain
  implementation-type: interpreter
  host-language: Python


"noit o' mnain worb":
  type: Programming Language
  genre: Esolang
  quotation: |-
    Under pressure
  quotation-attribution: |-
    Queen
  abstract: |
    noit o' mnain worb is a probabilistic particle automaton that
    uses pressure between randomly moving particles to approximate the behaviour
    of circuits.  It can approximate computation with these circuits, too, but
    it's so lossy that it has more value as just a neat toy to watch.
    
    (The name of this language contains a *secret message*! Can *you* find it?)
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Sep 15, 2000
  etymology:
  - neologism
  - hidden message
  - celtic
  notable: true
  sample: |
    #####         #####
    #   ###########   #
    # . >         < . #
    #   #####v#####   #
    #####   #  ########
            #       >!#
            #v#########
            # #
            ###
  reference-distribution: noit o' mnain worb distribution
  implementations:
  - worb.pl
  - tc.catseye.yoob.worb

worb.pl:
  type: Language Implementation
  in-distribution: noit o' mnain worb distribution
  license: BSD
  reference: yes
  implementation-type: interpreter
  host-language: Perl

tc.catseye.yoob.worb:
  type: Language Implementation
  in-distribution: noit o' mnain worb distribution
  license: Unknown license
  implementation-type: interpreter
  host-language: Java


Okapi: 
  type: Programming Language
  genre: Esolang
  abstract: |
    Okapi is a language I designed as an anniversary present for my
    wife(!). In it, the only means of control flow is throwing exceptions, and
    as if this wasn't enough, there are two restrictions on exceptions that are
    thrown â€” they must be divide-by-zero exceptions, and they must be caught
    in a lexically enclosing block.  Nor is there any facility to "retry" after
    an exception is caught. The language is nonetheless Turing-complete.
  authors:
  - Chris Pressey
  inception-date: May 23, 2010
  computational-class: shown Turing-complete
  has-reference-distribution: false
  implementations:
  - okapi.py

okapi.py:
  type: Language Implementation
  reference: true
  license: Proprietary
  implementation-type: interpreter
  host-language: Python


Oozlybub and Murphy: 
  type: Programming Language
  genre: Esolang
  abstract: |
    The name of this language is Oozlybub and Murphy. Despite appearances,
    this name refers to a single language. The majority of the language is named
    Oozlybub. The fact that the language is not entirely named Oozlybub is named
    Murphy. Deal with it.  For the sake of providing an "olde tyme esoterickal
    de-sign", the language combines several unusual features, including multiple
    interleaved parse streams, infinitely long variable names, gratuitously strong
    typing, and only-conjectural Turing completeness.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Dec 2010
  sample: |
    VARIABLES ARE p /p*/, p /q*/.
    dynast(3) <->
      (. do (. if? not? exists/dynast 5 ,then
           create/countably/many/dynasts #myself#, 5 .) .) ,then
      (. for each prime /p*|p/ below #myself#+2 do
           for each prime /q*|q/ below /p*|pp/+1 do
             if? not? exists/dynast /p*|p|p/+/q*|q|q/ ,then
               copy/dynast #myself#, /p*|ppp/, /q*|qqq/ .)
  unusual-computability-properties: true
  reference-distribution: Oozlybub and Murphy distribution
  implementations: []


Opus-2:
  type: Abstract Artlang
  abstract: |
    Opus-2 is not a programming language, but rather, an abstract artlang
    (i.e., a conlang designed independently from any conception of society.)
    The sole design principle was to entirely eliminate word order.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Jul 2001
  sample: |
    + pale green
    + Eb, trombone, forte
    + leaning 40 degrees left (sudden)
    + C, tubular bells, piano
    + mothballs (gentle whiff)
  significant: true
  reference-distribution: Opus-2 distribution


Pail: 
  type: Programming Language
  genre: Esolang
  acronym-for: PAIr Language
  abstract: |
    Pail is a programming language based on pairs; just as Lisp stands
    for LISt Processing, Pail stands for PAIr Language. Its original working
    title was "Bizaaro[sic]-Pixley", as it attempts to resemble [[Pixley]]
    while turning several concepts on their heads: use pairs instead of lists,
    quote by default instead of eval by default, and allow not just values but also
    names of bindings to be expressed.   "
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  inception-date: May 25, 2011
  influences:
  - Pixley
  sample: |
    **[*let [
         [cadrg *[#fst ##*[#snd #g]]]
         **[*let [
              [g [x [y z]]]
              ***cadrg
           ]]
      ]]
  reference-distribution: Pail distribution
  implementations:
  - Pail.lhs

Pail.lhs:
  type: Language Implementation
  in-distribution: Pail distribution
  reference: true
  license: BSD
  implementation-type: interpreter
  host-language: Haskell


Pixley:
  type: Programming Language
  genre: Esolang
  abstract: |
    Pixley is a strict subset of R5RS Scheme (or, if you prefer, R4RS
    Scheme), supporting four datatypes (boolean, cons cell, function, and symbol)
    and a dozen built-in symbols.  The reference implementation of Pixley is
    written in 124 lines of Pixley (or, if you prefer, 124 lines of Scheme;
    and if you prefer more Scheme-ly metrics, it consists of 413 instances of
    54 unique symbols in 684 cons cells.)
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  subset-of: Scheme
  bootstrapped: true
  inception-date: May 2009
  etymology:
  - place name
  - television show
  sample: |-
    (let* ((a (lambda (x y) (cons x y)))) (a (quote foo) (quote ())))
  reference-distribution: Pixley distribution
  implementations:
  - pixley.pix

pixley.pix:
  type: Language Implementation
  in-distribution: Pixley distribution
  reference: true
  license: BSD
  implementation-type: interpreter
  host-language: Pixley


Quylthulg:
  type: Programming Language
  genre: Esolang
  abstract: |
    Quylthulg is a programming language with but a single control-flow
    construct: `foreach`.  In fact, it does also have a `goto`, but that can
    only appear inside data structures.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  esowiki: Quylthulg
  computational-class: believed Turing-complete
  inception-date: Dec 6, 2008
  etymology:
  - mythological
  - roguelike
  - Lovecraftian
  sample: |-
    foreach $n$=:L:[1,2,3|goto$L$] with $a$=1 be +$a$+$n$+ else be abort
  reference-distribution: Quylthulg distribution
  implementations:
  - Qlzqqlzuup, the Lord of Flesh

Qlzqqlzuup, the Lord of Flesh:
  type: Language Implementation
  in-distribution: Quylthulg distribution
  reference: true
  license: BSD
  implementation-type: interpreter
  host-language: Haskell


REDGREEN:
  type: Programming Language
  genre: Esolang (Cellular Automaton)
  abstract: |
    REDGREEN is a cellular automaton that simulates a little
    "physical world", much like [[RUBE]].
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: shown Turing-complete
  etymology:
  - television program
  influences:
  - RUBE
  sample: |2
                                       # #
                     ......            # #
                                       #  ~                      #
                                       #######################   #
                                      %#                         #
                           . . .      T #####                    #
                                      ###   #  :                 #
                                            #                    #
                                            #  .                 #
                                            #                    #
                                            #                    #
                                            #  .                 #
                                            #                    #
                                            #                    #
    >>>>>>>>>>>>>>>##<<<<<<<<<<<<<<<<<############################
                                                    %
                                                    T
  inception-date: 1998
  implementations:
  - redgreen.alp
  reference-distribution: REDGREEN distribution

redgreen.alp:
  type: Language Implementation
  reference: true
  in-distribution: REDGREEN distribution
  license: BSD
  implementation-type: formal description
  host-language: ALPACA


RUBE:
  type: Programming Language
  genre: Esolang
  abstract: |
    RUBE is an esoteric programming language in tribute to Rube Goldberg,
    with bulldozers pushing around numbered crates, knocking them together to
    perform computations.  It is based on a variant of a cellular automaton called
    a *bully automaton*, where certain state changes canforce other state changes
    to occur elsewhere in the playfield.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  basis-for-game: true
  inception-date: ca Jul 10, 2007
  etymology:
    - masculine given name
    - acronym
  notable: true
  sample: |2
      0a21646c726f77202c6f6c6c6548
    , :::::::::::::::::::::::::::: ,
     )
     ==============================
    F
                                   O F
                                   c
                                   =
  reference-distribution: RUBE distribution
  implementations:
  - rube.c

rube.c:
  type: Language Implementation
  in-distribution: RUBE distribution
  reference: true
  license: Freely Redistributable
  implementation-type: interpreter
  host-language: ANSI C


Sally:
  type: Programming Language
  genre: Esolang
  abstract: |
    Sally is a cute but naive little functional language with a minimal syntax,
    a strict type system, and some unusual rules for parameters and return values.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  tagline: |-
    upside-down FORTH
  inception-date: 2000
  etymology:
  - feminine given name
  sample: |
    stdlib
    int factorial int if $1 mul $1 factorial sub $1 1 1
    int main int factorial $1
  reference-distribution: Sally distribution
  implementations:
  - sally2c

sally2c:
  type: Language Implementation
  in-distribution: Sally distribution
  reference: true
  license: BSD
  implementation-type: compiler
  source-language: Sally
  host-language: ANSI C
  target-language: ANSI C


Sbeezg:
  type: Programming Language
  genre: Esolang
  abstract: |
    Sbeezg is a syntactically very simple language that attempts to
    take the single-assignment concept to a logical extreme.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: 2002
  etymology:
  - neologism
  implementations:
  - sbeezg.erl
  sample: |
    f={a,b|i=*is;s=*pred;p=*print;g=p(*beer);h=s(a);
       ln={x,m|z=x|x};lg={y,n|q=n(y,n)|y};j=i(h,0,ln,lg);
       k=j(h,b)|a};l=f(99,f)
  reference-distribution: Sbeezg distribution

sbeezg.erl:
  type: Language Implementation
  in-distribution: Sbeezg distribution
  reference: true
  license: BSD
  implementation-type: interpreter
  host-language: Erlang



Shelta:
  type: Programming Language
  genre: Esolang
  abstract: |
    Shelta is an extremely minimal Forth-like language with barely
    any semantics; it relies on inline machine code to be considered anywhere
    near Turing-Complete. In the spirit of compilers for languages such as [[FALSE]]
    and [[brainfuck]], a Shelta-to-8086 compiler was implemented (with help from
    Ben Olmstead) in less than 512 bytes of 80286 machine code. What's more,
    it's also been bootstrapped â€” that is to say, a Shelta compiler was
    written in Shelta, which was compiled with the original compiler, and then
    compiled again with the resulting compiler, producing a wholly self-hosted
    executable!
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  with:
  - Ben Olmstead
  inception-date: ca Jul 1999
  etymology:
  - spoken language
  - celtic
  sample: |
    [ `Hello, _32 `world! _13 _10 ] \15 outs \0 halt
  reference-distribution: Shelta distribution
  implementations:
  - shelta
  - sheltas

shelta:
  type: Language Implementation
  reference: true
  in-distribution: Shelta distribution
  license: Unknown license
  implementation-type: compiler
  source-language: Shelta
  host-language: NASM Assembler
  target-language: x86 machine code

sheltas:
  type: Language Implementation
  in-distribution: Shelta distribution
  license: Unknown license
  implementation-type: compiler
  source-language: Shelta
  host-language: Shelta
  target-language: x86 machine code


SMETANA:
  type: Programming Language
  genre: Esolang
  esowiki: SMETANA
  acronym-for: Self-Modifying Extremely Tiny AutomatoN Application
  summary: A pathological little self-modifying language
  abstract: |
    SMETANA is a pathological little self-modifying language with only two
    possible operations: Go to step *n*, and Swap steps *n* and *m*.
    It has inspired a few variants and developments, notably a proof that
    despite its minimalism, it is finite-automata-complete; it is also the
    (great-?)grandfather of [[SMITH]].
  etymology:
  - dairy product
  - russian
  - surname
  sample: |-
    Step 1. Swap step 1 with step 2.
    Step 2. Go to step 2.
    Step 3. Go to step 1.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca 1994
  computational-class: known not Turing-complete
  notable: true
  reference-distribution: SMETANA distribution
  implementations:
  - smetana.pl
  - tc.catseye.yoob.smetana
  online-implementations:
  - 'http://catseye.tc/gallery/esolangs/yoob/'

smetana.pl:
  type: Language Implementation
  in-distribution: SMETANA distribution
  license: Public Domain
  reference: yes
  implementation-type: interpreter
  host-language: Perl

tc.catseye.yoob.smetana:
  type: Language Implementation
  in-distribution: yoob distribution
  license: Public Domain
  implementation-type: interpreter
  host-language: Java


SMITH:
  type: Programming Language
  genre: Esolang
  esowiki: SMITH
  acronym-for: Self-Modifying Indecent Turing Hack
  summary: An assembly-like language with no jumps whatsoever
  quotation: How many nights and weird mornings can this go on?
  quotation-attribution: Hunter S. Thompson
  abstract: |
    SMITH is a self-modifying assembly-like language which completely lacks
    any kind of jump instructions *whatsoever*.  Despite this handicap, it
    appears to be Turing-complete.
  etymology:
  - surname
  sample: |-
    MOV R0, 10
    MOV R2, 0
    SUB R2, 1
    MOV R[R0], "Hello, world!"
    MOV TTY, R[R0]
    SUB R0, R2
    MOV R1, R0
    SUB R1, 23
    NOT R1
    NOT R1
    MUL R1, 8
    COR +1, -7, R1
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca July 2000
  computational-class: believed Turing-complete
  notable: true
  significant: true
  reference-distribution: SMITH distribution
  implementations:
  - smith.pl
  influences:
  - SMETANA

smith.pl:
  type: Language Implementation
  in-distribution: SMITH distribution
  reference: yes
  license: BSD
  implementation-type: interpreter
  host-language: Perl


Squishy2K:
  type: Programming Language
  genre: Esolang
  abstract: |
    Squishy2K is a language which is a hybrid of string rewriting
    and finite state automata; as an added twist, it also lets program states serve
    as functions.  It was based largely on an earlier grammar-based language
    called SQUISHY, taking also some ideas from the language [[Thue]].  The
    original SQUISHY was conceived sometime around 1998, but is now lost.  Because
    it was based largely on EBNF, the author wanted to name it Wirth, but the
    name SQUISHY was proposed and (somewhat unfortunately) stuck.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  inception-date: Sep 2000
  sample: |
    * main { start many finish? "Hello, world!"! }
  reference-distribution: Squishy2K distribution
  implementations:
  - squishy2k.pl

squishy2k.pl:
  type: Language Implementation
  in-dstribution: Squishy2K distribution
  reference: true
  license: BSD
  implementation-type: interpreter
  host-language: Perl


Strelnokoff:
  type: Programming Language
  genre: Esolang
  abstract: |
    Strelnokoff is a non-deterministic imperative programming language.
    Despite this apparent handicap, it appears to be Turing-complete (thanks
    to a short-circuiting multiplication operator,) but a critical feature (arrays)
    has never yet been implemented.  The name "Strelnokoff" was taken from
    a fictional brand of vodka featured in a mock advertisement on the television
    show [[SCTV]].
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  etymology:
  - surname
  - fictional
  - television show
  sample: |
    REM HELLO WORLD IN STRELNOKOFF
    REM CHRIS PRESSEY MARCH 24 2001
    X = (X / X) * X + (X = 0) * (T =  0) * (PRINT CHAR 'H' - 'H' +  1)
    X = (X / X) * X + (X = 0) * (T =  1) * (PRINT CHAR 'e' - 'e' +  2)
    X = (X / X) * X + (X = 0) * (T =  2) * (PRINT CHAR 'l' - 'l' +  3)
    X = (X / X) * X + (X = 0) * (T =  3) * (PRINT CHAR 'l' - 'l' +  4)
    X = (X / X) * X + (X = 0) * (T =  4) * (PRINT CHAR 'o' - 'o' +  5)
    X = (X / X) * X + (X = 0) * (T =  5) * (PRINT CHAR ',' - ',' +  6)
    X = (X / X) * X + (X = 0) * (T =  6) * (PRINT CHAR ' ' - ' ' +  7)
    X = (X / X) * X + (X = 0) * (T =  7) * (PRINT CHAR 'w' - 'w' +  8)
    X = (X / X) * X + (X = 0) * (T =  8) * (PRINT CHAR 'o' - 'o' +  9)
    X = (X / X) * X + (X = 0) * (T =  9) * (PRINT CHAR 'r' - 'r' + 10)
    X = (X / X) * X + (X = 0) * (T = 10) * (PRINT CHAR 'l' - 'l' + 11)
    X = (X / X) * X + (X = 0) * (T = 11) * (PRINT CHAR 'd' - 'd' + 12)
    X = (X / X) * X + (X = 0) * (T = 12) * (PRINT CHAR '!' - '!' + 13)
    X = (T = X) * 0 + (X > T) * X REM RESET FLAG
    T = (X / X) * X + (X = 0) * T REM INCREMENT TICK
  inception-date: Apr 2001
  reference-distribution: Strelnokoff distribution
  implementations:
  - strelnokoff.pl

strelnokoff.pl:
  type: Language Implementation
  in-distribution: Strelnokoff distribution
  reference: yes
  license: BSD
  implementation-type: interpreter
  host-language: Perl


Tamerlane:
  type: Programming Language
  genre: Esolang
  abstract: |
    Tamerlane is a multi-paradigmatic programming language, unimplemented
    and possibly unimplementable. One of its core execution mechanisms is the
    traversing of a graph (representing the program) while rewriting that same
    graph.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Aug 2000
  etymology:
  - masculine given name
  sample: |
    Point-A: 1 Point-B,
    Point-B: 1 Point-C,
    Point-C: 1 Point-A.
    ?- 1 Point-A -> 0 Point-A @ Point-A
  reference-distribution: Tamerlane distribution
  implementations: []


Treacle:
  type: Programming Language
  genre: Experimental language
  abstract: |
    Treacle is an experimental compiler-definition language based on
    _context rewriting_, an expressive variant of term rewriting that generalizes
    the forest-rewriting used by its predecessor [[Arboretuum]].  In context rewriting,
    a separation is made between _names_ and _variables_, and patterns may contain
    _holes_ inside which subpatterns may match at any depth.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  inception-date: Apr 12, 2008
  etymology:
  - british
  - condiment
  influences:
  - Arboretuum
  sample-input: |-
    (x this (x descends (x to (x the (x right (y 1 2))))))
  sample: |
    (
      (:i (? t (x (? i *) (? j *)))) -> (t : (xx (? j *) (? i *)))))
      (:i (? p right))               -> (p : left)
    )
  sample-output: |-
    (xx (xx (xx (xx (xx (y 1 2) left) the) to) descends) this)
  reference-distribution: Treacle distribution
  implementations:
  - treacle.scm

treacle.scm:
  type: Language Implementation
  in-distribution: Treacle distribution
  license: Unknown license
  reference: true
  host-language: Scheme
  implementation-type: interpreter


Unlikely:
  type: Programming Language
  genre: Esolang
  abstract: |
    Unlikely is a programming language that conflates objects with
    continuations, and methods with labels.  It exposes program structures as
    objects with commensurate inheritance relationships.  It also takes dependency
    injection to the logical extreme: if some class is used by an object, that
    class *must* be specified when the object is instantiated.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  inception-date: Mar 15, 2009
  sample: |-
    class Count(Count,Chain,Print,Add) extends Continuation
    
    class CountForever(Count,Chain,Print,Add) extends Program {
      Count c;
      method continue(Passive accumulator) {
        c = new Count(Passive,Count,Chain,Print,Add);
        goto c.continue(new 1(Passive));
      }
    }
    
    class Count() extends Continuation {
      Count c;
      Print p;
      Add a;
      method continue(Passive accumulator) {
        c = new Count(Passive,Count,Chain,Print,Add);
        a = new Add(Passive,Chain);
        a.value = new 1(Passive);
        a.next = c;
        p = new Print(Passive,Chain);
        p.next = a;
        goto p.continue(accumulator);
      }
    }
  reference-distribution: Unlikely distribution
  implementations:
  - Coldwater

Coldwater:
  type: Language Implementation
  in-distribution: Unlikely distribution
  reference: true
  license: Unknown license
  implementation-type: static analyzer
  host-language: Python


Velo: 
  type: Programming Language
  genre: Esolang
  abstract: |
    Velo is a vaguely Ruby-inspired "scripting" language which unifies
    strings with code blocks, and scripts with object classes.  Curly braces
    delimit string literals, and there is no difference between a string literal
    and a block of code given to, say, an `if` statement.  Any given script is
    an object, which inherits from the root object in delegation-OO style.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  inception-date: July 14, 2012
  influences:
  - Ruby
  sample: |-
    yes = {IO.print {Yes}}
    no = {IO.print {No}}
    if ({X}.equals {Y}), yes, no
  reference-distribution: Velo distribution
  implementations:
  - velo.rb

velo.rb:
  type: Language Implementation
  in-distribution: Velo distribution
  license: Unknown license
  reference: true
  host-language: Ruby
  implementation-type: interpreter


Version:
  type: Programming Language
  genre: Esolang
  abstract: |
    Version is an imperative programming language that uses _ignorance-spaces_
    for flow control; all  instructions which match the current ignorance pattern
    are ignored during execution.
  inception-date: Sep 2001
  sample: |
    START: ROOM = "VALLEY|BROOK|GLADE"
    CONT: IGNORE = ROOM
    VALLEY: OUTPUT = "You are standing in a valley."
    HILL: OUTPUT = "You are on top of a hill."
    BROOK: OUTPUT = "You are by a brook."
    GLADE: OUTPUT = "You are standing in a sun-dappled glade."
    ROOM: OUTPUT = EOL
    ROOM: DIR = CHOP INPUT
    ROOM: IGNORE = DIR
    ROOM: MASK = "VAPOURS"
    N: CAT = "|N"
    S: CAT = "|S"
    E: CAT = "|E"
    W: CAT = "|W"
    ROOM: IGNORE = MASK
    N: ROOM = "VALLEY|BROOK|GLADE"
    S: ROOM = "HILL|BROOK|GLADE"
    E: ROOM = "VALLEY|HILL|BROOK"
    W: ROOM = "VALLEY|HILL|GLADE"
    LASTLY: IGNORE = "START"
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  reference-distribution: Version distribution
  implementations:
  - version.pl

version.pl:
  type: Language Implementation
  in-distribution: Version distribution
  license: BSD
  reference: true
  host-language: Perl
  implementation-type: interpreter


Whothm: 
  type: Programming Language
  genre: Esolang
  abstract: |
    Whothm is a simple language for describing infinite two-colour
    bitmapped drawings.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Jun 28, 2010
  computational-class: known not Turing-complete
  sample: |
    r := (0, 0, 1, 2);
    s := (0, 0, 1, 2);
    XOR := TF/FT;
    
    begin
    r.x += r.w;
    r.x += -1;
    r.w += 1;
    r.h += 1;
    draw r, XOR;
    s.x += s.w;
    s.x += -1;
    s.w += 1;
    s.h += 2;
    draw s, XOR;
    end
  reference-distribution: Whothm distribution
  implementations:
  - tc.catseye.whothm

tc.catseye.whothm:
  type: Language Implementation
  in-distribution: Whothm distribution
  reference: true
  license: Unknown license
  implementation-type: interpreter
  host-language: Java


Wierd:
  type: Programming Language
  genre: Esolang
  abstract: |
    Wierd is a language, inspired somewhat by Befunge-93, where instructions
    are not determined by the symbols in a sequence of symbols, but by the *bends*
    in a sequence of symbols.
  authors:
  - Chris Pressey
  - John Colagioia
  - Ben Olmstead
  computational-class: believed Turing-complete
  inception-date: 1997
  etymology:
  - typo
  influences:
  - Befunge-93
  notable: true
  sample: |
    *
     *
      *
       *
      * *  **
     *   ** *
      **     **
        *      *
        *     *
        *     *
        *      *
        *     **
        *    *
        * ** *
        **  *
  sample-credit: Milo van Handel
  reference-distribution: Wierd distribution
  implementations:
  - wierd.c
  - wierd-milo.c

wierd.c:
  type: Language Implementation
  in-distribution: Wierd distribution
  author: John Colagioia
  license: Unknown license
  implementation-type: interpreter
  host-language: ANSI C

wierd-milo.c:
  type: Language Implementation
  in-distribution: Wierd distribution
  author: Milo van Handel
  license: Unknown license
  implementation-type: interpreter
  host-language: ANSI C


Wunnel: 
  type: Programming Language
  genre: Esolang
  abstract: |
    Wunnel is a two-dimensional language which draws from the [[1L]]
    family of languages and incorporates features from [[reMorse]]. The name
    is both a play on the pronunciation of "1L", and a recursive portmanteau
    of the words _Wunnel_ and _tunnel_ which is used to describe the long sequences
    of identical instructions (often nops) used in Wunnel programs to sync up
    remote parts of the program.  (Information on this language is only available
    on the esowiki for now.)
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  inception-date: Feb 13, 2011
  influences:
  - 1L
  - reMorse
  sample: |2
              o   ooo  o


    o
    o
    o
    o         o
    o         o
    o         o
    o         o
    o
    o        o     o
    o         o
    o
    o        o
    o              o
    o        o     o
    o              o

             o
    o oooooooo     o
             o
             o
             o

             o    oooo o
  has-reference-distribution: false
  implementations:
  - tc.catseye.yoob.wunnel

tc.catseye.yoob.wunnel:
  type: Language Implementation
  in-distribution: yoob distribution
  reference: true
  license: Public Domain
  implementation-type: interpreter
  host-language: Java


Xigxag:
  # hmm... well, no.  but for now, yes.
  type: Programming Language
  genre: Esolang
  abstract: |
    Xigxag is a simple string-copying automaton that has exponential
    growth almost everywhere (i.e. there are only a finite number of initial
    configurations that don't blow up.)
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  # started 2001
  inception-date: Apr 23, 2007
  sample: |
    ><<
  sample-output: |
    ><<
    <<>><
    <><<<<>>
    <<<<>><><><<><<<><<<>
    ...
  computational-class: unknown computational class
  unusual-computability-properties: true
  reference-distribution: Xigxag distribution
  implementations:
  - xigxag.pl

xigxag.pl:
  type: Language Implementation
  in-dstribution: Xigxag distribution
  reference: true
  license: Public Domain
  implementation-type: interpreter
  host-language: Perl


Xoomonk: 
  type: Programming Language
  genre: Esolang
  abstract: |
    Xoomonk is a programming language in which _malingering updatable
    stores_ are first-class objects.  Malingering updatable stores unify several
    language constructs, including procedure activations, named parameters, and
    object-like data structures.
    
    The Xoomonk project is also a bit of an experiment
    in _test-driven language design_. The specification includes examples in
    the format of [[Falderal]] tests, which were written while the language was
    being designed and could be used to compare an implementation (when one is
    written) against the spec.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  inception-date: Aug 7, 2011
  sample: |
    l := $loop*
    counter := 5
    l.do := {
      y := x
      print ^.counter
      o := $sub*
      o.x := ^.counter
      o.y := 1
      ^.counter := o.result
      continue := o.result
    }
  reference-distribution: Xoomonk distribution
  implementations: []


You are Reading the Name of this Esolang:
  type: Programming Language
  genre: Esolang
  abstract: |
    You are Reading the Name of this Esolang is an exploration in
    the design space of programming languages with undecidable elements. Its syntax
    is only recursively enumerable: the problem of determining whether or not
    a given string of symbols is a well-formed You are Reading the Name of this
    Esolang program is undecidable.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Nov 2007
  computational-class: shown Turing-complete
  unusual-computability-properties: true
  influences:
  - Spoon
  sample: |
    001000000[0010000000111001000011]11100100001[0]
  reference-distribution: You are Reading the Name of this Esolang distribution
  implementations: []


Ypsilax:
  type: Programming Language
  genre: Esolang
  abstract: |
    Ypsilax is a non-deterministic, reflective, two-dimensional grid-rewriting
    language.  Rewriting rules look for patterns in the grid and replace them
    with other patterns.  These rules are themselves represented by patterns
    in the grid, and therefore rules can match and rewrite other rules.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  inception-date: Aug 2001
  etymology:
  - neologism
  sample: |
    (      )  (      )
      #            #
      # ###    ### #
      #            #
   
        ###   ###
   
        #      #
        #      #
        #    ###
  reference-distribution: Ypsilax distribution
  implementations:
  - ypsilax.pl
  - tc.catseye.yoob.ypsilax

ypsilax.pl:
  type: Language Implementation
  in-distribution: Ypsilax distribution
  reference: true
  license: BSD
  implementation-type: interpreter
  host-language: Perl

tc.catseye.yoob.ypsilax:
  type: Language Implementation
  in-distribution: Ypsilax distribution
  license: BSD
  implementation-type: interpreter
  host-language: Java


ZOWIE:
  type: Programming Language
  genre: Esolang
  abstract: |
    ZOWIE is a machine-like language in which all operations *including
    structured control flow* are memory-mapped.  Control flow is structured in
    the sense of structured programming â€” the programmer never deals with
    `goto`s, or offsets or labels of any kind.  Instead, the program writes to
    a memory location to mark the beginning or end of a loop or conditional.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Dec 29, 2009
  computational-class: shown Turing-complete
  influences:
  - BitChanger
  sample: |
    MOV R10, 90
    MOV R1, R1
    MOV R0, R10
    MOV R8, R10
    MOV R5, 1
    MOV R10, R8
    MOV R8, R10
    MOV R5, 64
    MOV R3, R8
  reference-distribution: ZOWIE distribution
  implementations:
  - zowie.py

zowie.py:
  type: Language Implementation
  reference: true
  in-distribution: ZOWIE distribution
  license: Public Domain
  host-language: Python
  implementation-type: interpreter
