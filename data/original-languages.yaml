# encoding: UTF-8
ALPACA:
  type: Programming Language
  genre: Esolang
  acronym-for: A Language for the Pithy Articulation of Cellular Automata
  paradigms:
  - Metalanguage
  - Object-oriented
  generally-compiled: true
  development-stage: not fully complete
  description: |
    ALPACA is a meta-language for describing cellular automata.
  commentary: |
    The acronym used to be "A Language for Programming Arbitrary Cellular Automata".
    This was not quite accurate, as the automata are not in fact arbitrary, so I changed
    it.
    
    ALPACA is one of the few of my languages in which I've actually implemented
    other languages (or, well, cellular automata — close enough).
  esowiki: ALPACA
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: 1998
  etymology:
  - acronym
  notable: true
  sample: |
    /* John Conway's Game of Life, expressed in ALPACA. */
    state Dead  " " to Alive when 3 Alive and 5 Dead;
    state Alive "*" to Dead when 4 Alive or 7 Dead.

alpaca.pl:
  type: Implementation
  implementation-of:
  - ALPACA
  reference: true
  in-distribution: ALPACA distribution
  license: BSD license
  implementation-type: compiler
  host-language: Perl
  target-language: Perl


Apple Befunge: 
  type: Programming Language
  genre: Esolang
  variant-of: Befunge-93
  paradigms:
  - Stack-based
  - 2-dimensional
  - Self-modifying
  development-stage: archival
  description: |-
    Apple Befunge is a variant of Befunge for the Apple ][+ which resembles
    Befunge-93, with some extra Befunge-96-esque instructions and some
    Apple ][+-specific instructions.
  inception-date: Jul 3, 2000
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies

APPLE BEFUNGE EDITOR:
  type: Implementation
  implementation-of:
  - Apple Befunge
  reference: true
  development-stage: archival
  in-distribution: Apple Befunge distribution
  license: Public Domain
  # also: editor
  implementation-type: interpreter
  host-language: Applesoft BASIC
  host-platform: Apple II


Arboretuum:
  type: Programming Language
  genre: Experimental language
  paradigms:
  - Forest-rewriting
  description: |
    Arboretuum is an experimental language based on _forest-rewriting_,
    a variant of tree-rewriting in which multiple trees are rewritten simultaneously.
    The language was intended for specifying compilers, with each tree representing
    a major compiler data structure (AST, symbol table, output buffer, etc.,)
    however, this idea was not entirely successful.  Regardless, Arboretuum is
    [[Turing-complete]], as tree-rewriting is simply a special case of forest-rewriting.
  computational-class: believed Turing-complete
  inception-date: Mar 2008
  development-stage: mature
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  etymology:
  - latin
  - portmanteau
  sample: |-
    (
      (
        (ast:   (let a 4 (+ 3 (* a 3))) )
        (stab:  eot)
        (out:   halt)
      )
      (
        ((ast:  (let #(n sym) #(v) #(expr)) => #(expr)            )
         (stab: eot                         => (#(n) #(v) EOT)    ))
        ((ast:  #(n sym)                    => #(v)               )
         (stab: (#(n) #(v) #(tab))          => (#(n) #(v) #(tab)) ))
        ((ast: #(a num)                     => _                  )
         (out: halt                         => (push #(a) halt)   ))
        ((ast: (+ _ _)                      => _                  )
         (out: halt                         => (add halt)         ))
        ((ast: (* _ _)                      => _                  )
         (out: halt                         => (mul halt)         ))
      )
    )
  see-also:
  - Treacle

forest-rewriter.scm:
  type: Implementation
  implementation-of:
  - Arboretuum
  in-distribution: Arboretuum distribution
  reference: true
  license: Public Domain
  implementation-type: interpreter
  host-language: Scheme


Bear Food:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Stack-based
  description: |
    Bear Food was a horrible language defined by an interpreter that
    evolved (no... let's be honest, it *devolved*) from a small piece of example
    code showing how to parse and intepret a simple reverse-polish notation language.
    This same example code also took a very divergent line of evolution, eventually
    becoming the programming language [[Var'aq]].
  tagline: liquid insanity from Hell
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  esowiki: Bear_Food
  inception-date: ca Dec 1999
  development-stage: lost
  failure: true
  no-specification: true

bearfood.pl:
  type: Implementation
  implementation-of:
  - Bear Food
  reference: true
  license: Unknown license
  implementation-type: interpreter
  host-language: Perl
  broken: true
  development-stage: lost


Befunge-93:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Stack-based
  - 2-dimensional
  - Self-modifying
  description: |
    Befunge-93 is an esoteric programming language where the program exists
    in a two-dimensional grid of cells, where each cell contains a single
    instruction, and execution can proceed in any cardinal direction across this
    grid — not just left-to-right, but also right-to-left, top-to-bottom, and
    bottom-to-top.
  # also: known not Turing-complete
  computational-class: can simulate some push-down automata
  esowiki: Befunge-93
  jargon-file: http://jargon.watson-net.com/jargon.asp?w=Befunge
  authors:
  - Chris Pressey
  etymology:
  - typo
  influences:
  - Maentwrog
  - brainfuck
  - "FALSE"
  sample: |2
     v    <
    >?"/",^
     >"\",^
  notable: true
  significant: true
  dimensionality: 2
  quotation: Hey, my archive must be corrupt.  These sources all look like garbage.
  quotation-attribution: Mark Topham
  inception-date: Sep 1993
  # maybe archival
  development-stage: mature
  online-implementations:
  - 'http://catseye.tc/gallery/esolangs/yoob/'
  see-also:
  - Funge-98
  - Flobnar
  commentary: |
    One of the more popular languages I ever designed and implemented.
    Eventually begat [[Befunge-97]], [[Funge-98]], and [[Wierd]], and doubtless influenced
    many others.  Cited in the New Hacker's Dictionary.

bef:
  type: Implementation
  implementation-of:
  - Befunge-93
  reference: true
  in-distribution: Befunge-93 distribution
  license: BSD license
  implementation-type: interpreter
  host-language: ANSI C
  can-be-built-with-borland-c: true
  # not strictly
  run-requirements:
  - ANSI Terminal
  generally-recommended: true

tc.catseye.yoob.befunge93:
  type: Implementation
  implementation-of:
  - Befunge-93
  in-distribution: yoob distribution
  prebuilt-for-platforms:
  - yoob
  license: Public Domain
  implementation-type: interpreter
  host-language: Java
  host-platform: yoob


Befunge-97:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Stack-based
  - 2-dimensional
  - Self-modifying
  description: |
    Befunge-97 was an unimplemented attempt to design a successor to [[Befunge-93]].
    The design, however, was not successful — it has been described as
    "brain-damaged" — primarily due to the fact that separate processes were specified
    as sharing a single stack.
  authors:
  - Chris Pressey
  - Befunge Mailing List Working Group
  inception-date: Dec 25, 1997
  etymology:
  - typo
  failure: true
  influences:
  - Befunge-93
  # the documents from the time are probably lost
  no-specification: true
  development-stage: lost


# XXX give Portia it's own node?
beta-Juliet:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Event-oriented
  esowiki: beta-Juliet
  summary: A minimal event-oriented programming language
  description: |
    beta-Juliet is a minimal event-based language.  Each event is caused by some other event.
    Event causation is conditional based on which of two given events occurred more recently.
    
    Portia is a preprocessor for beta-Juliet which allows large, regular, finite sets of events
    to be described succinctly.
    
    Version 2.0 of beta-Juliet (formerly known as "2iota") allows infinite sets of events to be
    specified, allowing the language to be [[Turing-complete]].
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca 2002
  development-stage: mature
  computational-class: believed Turing-complete
  etymology:
  - automotive pun
  - feminine given name
  sample: |
    event WindowSwitchBroken;
    event MotionDetectorTriggered;
    
    event SystemArmed;
    event SystemDisarmed;
    
    event Alarm,
     caused after WindowSwitchBroken      when SystemArmed > SystemDisarmed,
     caused after MotionDetectorTriggered when SystemArmed > SystemDisarmed,
     causes Alarm.
     
    alphabet Domino,
            One, Two, Three, Four, Five, Six, Seven;
    event Begin,
            causes Domino One Falls;
    event Domino (N = Domino+) Falls,
            causes Domino (succ N) Falls.


b_juliet.pl:
  type: Implementation
  implementation-of:
  - beta-Juliet
  in-distribution: beta-Juliet distribution
  license: BSD license
  implementation-type: interpreter
  host-language: Perl

2iota:
  type: Implementation
  implementation-of:
  - beta-Juliet
  reference: true
  in-distribution: beta-Juliet distribution
  license: BSD license
  implementation-type: interpreter
  # but you can also build it with ANSI C
  host-language: C99


Beturing:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  - State machine
  description: |
    Beturing is a "[[Befunge-93|Befunge]]-flavoured" language for describing Turing
    machines; both the tape and the finite control are laid out two-dimensionally.
    In addition, the finite control must be expressed as a planar graph (no
    edge representing a transition may cross any other edge.) It was devised
    this way as a test of the so-called "wire-crossing problem". It turns out
    that there are universal Turing machines with finite controls that are planar
    graphs, so Beturing is [[Turing-complete]].
  inception-date: Oct 20, 2005
  development-stage: mature
  esowiki: Beturing
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: Turing-complete
  dimensionality: 2
  etymology:
  - portmanteau
  influences:
  - Befunge-93
  sample: |
    # D(40, 4)
    # @(40, 4)
    $bbab$
    # C(0, 0)
    # @(0, 0)
     . . . . . .
    *v*<*<*<*>*v
    aa .ab . .aa .
    >/*>./*^*^</*v
    bb .ba . .bb .
    >/*^./*^*^</*v
    $$ .$$ . .$$ .
    >/*^</*>*^.@*v
             . . .
    *@      *^*<*<

beturing.lua:
  type: Implementation
  implementation-of:
  - Beturing
  in-distribution: Beturing distribution
  reference: true
  license: BSD license
  implementation-type: interpreter
  host-language: Lua


Bhuna:
  type: Programming Language
  genre: Production language
  paradigms:
  - Imperative
  - Functional
  development-stage: archival
  description: |
    Bhuna is a small, garbage-collected language with a simple syntax,
    [[Closure|closures]], inferred types, lightweight processes, and support for UTF-8 source
    code.  It was implemented partly to see how closely I could match the performance
    of [[Lua]]'s interpreter.  It was meant more more as an experimental starting
    point for branching new languages, than as a useful language in and of itself.
  computational-class: believed Turing-complete
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Oct 21, 2005
  etymology:
  - indian
  - dish
  influences:
  - Lua
  sample: |
    Fib = ^ X {
      if X < 2 return 1 else
      return Fib(X - 1) + Fib(X - 2)
    }
    Print Fib(32), EoL

bhuna:
  type: Implementation
  development-stage: archival
  implementation-of:
  - Bhuna
  in-distribution: Bhuna distribution
  reference: true
  license: BSD license
  implementation-type: interpreter
  host-language: C99


Braktif:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Cellular automaton
  description: |
    Braktif is a cellular automaton modelled closely after the [[brainfuck]]
    programming language.
  computational-class: believed Turing-complete
  esowiki: Braktif
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  etymology:
  - television character
  - portmanteau
  - french
  influences:
  - brainfuck
  paradigms:
  - Cellular automaton
  dimensionality: 2
  sample: |2
                                *
                           <<*[--]*
    000000000000000000  *[-----  --]
    -----------------d-i--         --------
  inception-date: 2005
  development-stage: mature
  see-also:
  - pibfi

braktif.alp:
  type: Implementation
  implementation-of:
  - Braktif
  reference: true
  prebuilt-for-platforms:
  - Perl
  in-distribution: Braktif distribution
  license: BSD license
  implementation-type: formal description
  host-language: ALPACA


Burro:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  - Algebraic
  description: |
    Burro is a [[brainfuck]]-like programming language whose programs
    form an algebraical _group_ (modulo the equivalence relation of "computes the
    same function") under the operation of concatenation. The upshot of this
    is that, for every Burro program, we can find an _antiprogram_ which, when
    appended to the program, forms a "no-op" program which has no effect.
     This is a form of reversible computing, but unlike most reversible languages
    where it is the execution of the program that is "undone", in Burro, it is
    the program itself which is annihiliated by its antiprogram.  Burro 1.0
    was released in fall of 2007, but proved not to form a proper group. This
    shortcoming was rectified in summer of 2010.
  # started thinking about it 2005, finally achieved 2010
  inception-date: 2007
  development-stage: not fully complete
  computational-class: Turing-complete
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  esowiki: Burro
  etymology:
  - spanish
  - farm animal
  influences:
  - brainfuck
  sample: |
    !--(--(--(!>/
      >>--(+<<+++++++>/+++>+++++>)<
    >)/
      >>--(+++>+++++>/+++<<<<<+++>)<
    >)/
      >>--(+++>+>/+<<+++>)<
    >)<
  significant: true
  see-also:
  - Cabra

Burro.lhs:
  type: Implementation
  implementation-of:
  - Burro
  in-distribution: Burro distribution
  reference: true
  license: Unknown license
  implementation-type: interpreter
  host-language: Haskell


Cabra:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  - Algebraic
  description: |
    Cabra is a (somewhat) formal programming language whose programs
    form an algebraical _dioid_ (an idempotent semiring), modulo the equivalence
    relation of "computes the same function", under the operations of parallel
    execution (as the additive operator) and sequential composition (as the multiplicative
    operator).
  inception-date: Oct 30, 2007
  development-stage: not fully complete
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  etymology:
  - spanish
  - farm animal
  esowiki: Cabra
  influences:
  - Burro
  computational-class: known not Turing-complete
  sample: |
    (SET 1 + SET 2) * IFSET 1 THEN (IFSET 2 THEN SET 3 ELSE SKIP) ELSE SKIP

cabra.hs:
  type: Implementation
  implementation-of:
  - Cabra
  in-distribution: Cabra distribution
  reference: true
  license: Unknown license
  implementation-type: interpreter
  host-language: Haskell
  commentary: |
    No parser.


Carriage:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Concatenative
  description: |
    Carriage is the result of various, not-entirely-successful attempts to
    design a "pure" concatenative language — one in which the program
    texts are monoids and nothing but monoids (no quoting operators or
    the like.)  The result was midly unusual — subroutines are specified
    by indices into an area of the stack which contains program symbols,
    thus may overlap — and was released as an esolang.
  inception-date: Nov 2012
  development-stage: not fully complete
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  etymology:
  - vehicle
  esowiki: Carriage
  specification-link: esowiki
  influences: []
  computational-class: unknown computational class

Carriage.hs:
  type: Implementation
  implementation-of:
  - Carriage
#  in-distribution: Carriage distribution
  reference: true
  license: Public Domain
  implementation-type: interpreter
  host-language: Haskell


Castile:
  type: Programming Language
  genre: Experimental language
  paradigms:
  - Imperative
  - Functional
  description: |
    Castile is an unremarkable programming language which exists mainly
    because an unremarkable evaluator/compiler for it was written.  It is
    a bit like [[ANSI C]] except with proper union types (and no typecasts.)  Local
    variables are mutable, but arguments and globals aren't.  The compiler
    supports several backends, including [[Javascript]] and [[Ruby]].
  inception-date: Nov 21, 2012
  development-stage: not fully complete
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  etymology:
  - soap
  influences:
  - Eightebed
  - Rust
  computational-class: believed Turing-complete
  sample: |
    fun foo(a, b: integer|string) {
      r = a;
      typecase b is integer {
        r = r + b;
      };
      typecase b is string {
        r = r + len(b);
      };
      r
    }
    main = fun() {
      a = foo(a, 333 as integer|string);
      a = foo(a, "hiya" as integer|string);
      a /* should output 337 */
    }

castile.py:
  type: Implementation
  implementation-of:
  - Castile
  in-distribution: Castile distribution
  reference: true
  license: Unknown license
  # XXX and compiler to Javascript, Ruby, stackmac, almost C...
  implementation-type: interpreter
  host-language: Python


Circute:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Cellular automaton
  description: |
    Circute is a cellular automaton that simulates conduits that
    carry digital signals and NAND gates that manipulate those signals.
  esowiki: Circute
  paradigms:
  - Cellular automaton
  etymology:
  - portmanteau
  influences:
  - Wireworld
  dimensionality: 2
  computational-class: known not Turing-complete
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  sample: |2
                      =
                      =
       #######==   ===N===   =========
       #       =   =     =   =       =
     ==N==     = ==N== ==N== =     ==N==
     =   =     = =   = =   = =     =   =
     =====     = ===== ===== =     =====
       =       =   =     =   =       =
       =============     =============
  inception-date: 2005
  development-stage: mature
  online-implementations:
  - 'http://catseye.tc/gallery/esolangs/yoob/'

tc.catseye.yoob.circute:
  type: Implementation
  implementation-of:
  - Circute
  in-distribution: yoob distribution
  prebuilt-for-platforms:
  - yoob
  license: Public Domain
  implementation-type: interpreter
  host-language: Java
  host-platform: yoob

circute.alp:
  type: Implementation
  implementation-of:
  - Circute
  reference: true
  in-distribution: Circute distribution
  prebuilt-for-platforms:
  - Perl
  license: BSD license
  implementation-type: formal description
  host-language: ALPACA


Cfluviurrh:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  description: |
    Cfluviurrh is, as far as I am aware, the first programming language designed
    for writing programs that can *feel*. Cfluviurrh defines a mechanism by which a
    program can be instructed to experience particular emotions.
    
    You might, thus, on first blush, consider Cfluviurrh to be unimplementable,
    as modern-day computers are not capable of experiencing emotions (you guess.)
    However, this is demonstrably untrue.  The reference interpreter demonstrates it.
  esowiki: Cfluviurrh
  paradigms:
  - Imperative
  etymology:
  - portmanteau
  computational-class: believed Turing-complete
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  sample: |
    (print ASCII table while experiencing a bewildering array of emotions)
    a=8
    a*=8
    b=a
    b+=a
    b-=2
    :X
    a+=1
    a>
    z@=X
    z?a<b
  inception-date: Aug 26 2012
  development-stage: mature

cfluviurrh:
  type: Implementation
  implementation-of:
  - Cfluviurrh
  reference: true
  in-distribution: Cfluviurrh distribution
  license: BSD license
  implementation-type: interpreter
  host-language: ANSI C


Didigm:
  # technically a family, but Didigm also refers to the member Didigm(8),
  # and the family is not that interesting.
  type: Programming Language
  summary: A reflective cellular automaton
  genre: Esolang
  paradigms:
  - Cellular automaton
  - Reflective
  description: |
    Didigm is a reflective cellular automaton: the transition rules
    for the automaton are defined by forms in the very playfield governed by
    those transition rules.
  tagline: |-
    Didigm = ALPACA + Ypsilax
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  esowiki: Didigm
  dimensionality: 2
  inception-date: Nov 20, 2007
  development-stage: not fully complete
  etymology:
  - neologism
  sample: |
    3333333333333
    3002300230073
    3111311132113
    3311321131573
    3111311131333
    3333333333333
    =F3
    ,
    =F1
    111111111111111
    111111131111111
    111111111111574
    111111111111333
    311111111111023
    111111111111113


Dieter:
  type: Programming Language
  genre: Experimental language
  paradigms:
  - Object-oriented
  summary: A language which conflates modules and type qualifiers
  description: |
    Dieter (as in the German masculine given name Dieter, not dieter as in
    "one who diets") is a little experimental programming language that
    conflates *type qualifiers* with *modules* to produce something
    reminiscent of object-orientation.  It demonstrates another way of
    thinking about objects, or rather, classes: not so much as
    *aggregates of data* as *associations of predicates*.
    
    Dieter was intended as a way to make Hungarian notation part of the type
    system, and thus automatically checkable.  However, it also suggests
    possible ways of dealing with the problems of aliasing — that is,
    determining if two pointers cannot possibly point to the same data, for
    safety and optimization considerations.
  etymology:
  - masculine given name
  sample: |-
    module beefy
      procedure beef_up(x: ♥t): beefy ♥t
      begin
        return (bestow beefy x)
      end
    end.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca Oct 3, 2009
  development-stage: not fully complete
  computational-class: believed Turing-complete

dieter.py:
  type: Implementation
  implementation-of:
  - Dieter
  in-distribution: Dieter distribution
  reference: true
  license: BSD license
  implementation-type: typechecker
  host-language: Python


Eightebed:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  generally-compiled: true
  esowiki: Eightebed
  summary: A safe language with explicit memory deallocation
  description: |
    Eightebed is a small language with explicit `malloc` and `free`.
    Through a modicum of static analysis
    and runtime support, Eightebed is "safe": it is not possible to dereference a dangling
    pointer or otherwise incorrectly-populated memory.
    
    Eightebed was designed as a counter-example to [[Gregor Richards]]' claim that such
    a language would either need a garbage collector, or not actually implement `free`.
    Eightebed has a real `free` and has no garbage collector.
  commentary: |
    The name "Eightebed" came from a typo by [[Alise]] for the word "enlightened".
  etymology:
  - typo
  sample: |-
    type node struct {
        int value;
        ptr to node next;
    };
    var ptr to node jim;
    var ptr to node george;
    {    
        jim = malloc node;
        if valid jim {
            [@jim].value = (1 + 4);
            george = jim;
        }
        if valid george {
            print [@george].value;
        }
        free george;
        free jim;
    }
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca Sep 1, 2010
  development-stage: mature
  computational-class: believed Turing-complete

8ebed2c.py:
  type: Implementation
  implementation-of:
  - Eightebed
  in-distribution: Eightebed distribution
  reference: yes
  license: BSD license
  implementation-type: compiler
  host-language: Python
  target-language: ANSI C


Emmental:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Meta-circular
  - Reflective
  description: |
    Emmental is a self-modifying programming language.  It is defined
    in terms of a meta-circular interpreter, and this meta-circular interpreter
    provides an operation that redefines operations of the meta-circular interpreter.
    In fact, this mechanism is required for Emmental to be [[Turing-complete]].
  computational-class: believed Turing-complete
  esowiki: Emmental
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Nov 11, 2007
  development-stage: mature
  etymology:
  - dairy product
  - swiss
  sample: |
    ;#58#126#63#36!;#46#36#!;#0#1!;#0#2!;#0#3!;#0#4!;#0#5!;#0#6!;#0#7!#0#33#111#108#108#101#72$
  see-also:
  - Mascarpone

emmental.hs:
  type: Implementation
  implementation-of:
  - Emmental
  in-distribution: Emmental distribution
  reference: true
  license: Public Domain
  implementation-type: interpreter
  host-language: Haskell


Etcha:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  description: |
    Etcha is a two-dimensional descendant of [[Jeffry Johnston]]'s [[BitChanger]].
    Like BitChanger, it has four instructions; unlike BitChanger, its storage
    model is based on turtle graphics, which permits it to be immediately used
    for an alternative purpose: graphical composition. Unlike the turtle in LOGO
    however, the turtle in Etcha is an integral part of the computation, playing
    a role similar to the tape head of a Turing machine.
  inception-date: Oct 4, 2009
  development-stage: mature
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  esowiki: Etcha
  influences:
  - BitChanger
  sample: |-
    >+++>+++>+++>+++>[+]>>>>+
  sample-output: |-
    #####
       #
       #
     ###
  online-implementations:
  - 'http://catseye.tc/gallery/esolangs/yoob/'

tc.catseye.etcha:
  type: Implementation
  implementation-of:
  - Etcha
  in-distribution: Etcha distribution
  prebuilt-for-platforms:
  - Java
  reference: true
  license: Public Domain
  implementation-type: interpreter
  host-language: Java

tc.catseye.yoob.etcha:
  type: Implementation
  implementation-of:
  - Etcha
  in-distribution: yoob distribution
  prebuilt-for-platforms:
  - yoob
  license: Public Domain
  implementation-type: interpreter
  host-language: Java
  host-platform: yoob


ETHEL:
  type: Programming Language
  acronym-form: Easy-To-Handle Estimating Language
  genre: DSL
  paradigms:
  - Functional
  authors:
  - Chris Pressey
  auspices:
  - Star Building Materials
  description: |
    ETHEL was a programming language specifically for expressing
    quantity surveying (materials estimating) formula and procedures,
    designed for Star Building Materials.
  computational-class: believed Turing-complete
  inception-date: 1998
  etymology:
  - acronym
  - monty python
  # the reference interpreter is probably effectively lost
  no-specification: true
  development-stage: lost

ethel.pl:
  type: Implementation
  implementation-of:
  - ETHEL
  license: Proprietary
  host-language: Perl
  implementation-type: interpreter


Exanoke:
  type: Programming Language
  genre: Experimental language
  paradigms:
  - Functional
  description: |
    Exanoke is a functional language which is syntactically restricted to
    expressing the primitive recursive functions.
  development-stage: mature
  computational-class: Primitive recursive
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca Jul 2012
  # release date: Jan 2013
  etymology:
  - typo

exanoke.py:
  type: Implementation
  implementation-of:
  - Exanoke
  in-distribution: Exanoke distribution
  reference: true
  license: BSD license
  implementation-type: interpreter
  host-language: Python


Flobnar: 
  type: Programming Language
  genre: Esolang
  paradigms:
  - Functional
  - 2-dimensional
  description: |
    One day in September of 2011 — though I'm not sure precisely
    which one — marked [[Befunge-93]]'s 18th birthday.  That means that
    Befunge is now old enough to drink in its native land of Canada.  To celebrate
    this, I thought I'd get Befunge-93 drunk to see what would happen.  What
    happened was Flobnar, an esolang which is in many respects a functional dual
    of Befunge-93; most of the symbols have analogous meanings, but execution
    proceeds in a much more dataflow-like fashion.
  inception-date: Oct 28, 2011
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  esowiki: Flobnar
  influences:
  - Befunge-93
  development-stage: not fully complete
  sample: |-
    >     v
    ^\ <   
           
    :v    v   \<@
    -<      : 6
    1 :   > *
      -|    <
      11

Flobnar.hs:
  type: Implementation
  implementation-of:
  - Flobnar
  in-distribution: Flobnar distribution
  reference: true
  license: BSD license
  implementation-type: interpreter
  host-language: Haskell


Full Moon Fever:
  type: Programming Language
  genre: DSL
  paradigms:
  - Imperative
  summary: A language for describing ANSI terminal animations
  description: |
    Full Moon Fever is a language for describing ASCII animations.
    It was used to deliver animated screens on Chris Pressey's BBS
    (when it was operational in the early 90's) via [[ANSI Terminal|ANSI terminal]] control codes.
    This probably counts as his first proper language, even though
    it wasn't a full programming language, because it had
    the usual machinery (syntax, parser, interpreter...)
    Lives on, in a somewhat distended form, as a sub-language of
    [[ILLGOL]].
  commentary: |
    I believe the name "Full Moon Fever" came from a mis-remembering
    of the title of the song "Full Moon Boogie" by Jan Hammer and
    that other guy.
  etymology:
  - song title
  - error
  sample: |-
    GO 1 2 CLREOL CENTRE "Enter... the Stupid Guard." 2
    GO 1 3 CLREOL
    PAUSE 70
    GO 76 19
    PRINT "0"
    PAUSE 20
    DO 20
        LF PRINT " " LF LF PRINT "0" PAUSE 5;
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca 1993
  computational-class: known not Turing-complete
  specification-link: https://github.com/catseye/Illgol-Grand-Mal/blob/master/2.%20Illgola-2/doc/illgola2.txt
  development-stage: archived


Funge-98:
  type: Programming Language Family
  genre: Esolang
  paradigms:
  - Stack-based
  - Self-modifying
  description: |
    Funge-98 is a family of programming languages designed as the successor
    to [[Befunge-93]].  It generalizes Befunge-93's two-dimensional nature
    somewhat, defining languages in one dimension ([[Unefunge-98]]),
    two dimensions ([[Befunge-98]]), and three dimensions ([[Trefunge-98]]),
    and suggests possibilities for other dimensions and topologies (but does
    not specify exactly how they look or would behave.)
    It also makes the playfield unbounded, allowing the language to be
    [[Turing-complete]], and tries to define mechanisms for interacting with the
    operating system and engaging extensions to the language.
  quotation: |-
    Taking programming in new directions... all four of them
  quotation-attribution: |-
    Jason Reed
  authors:
  - Chris Pressey
  - Befunge Mailing List Working Group
  specification-link: http://catseye.tc/projects/funge98/doc/funge98.html
  inception-date: Sep 11, 1998
  development-stage: mature
  computational-class: Turing-complete
  influences:
  - Befunge-93
  - Befunge-97
  notable: true
  sample: |
    >>#v?v
    ^,A' <
     ^ C'
        T
     ^ <<
        G
        '

Unefunge-98:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Stack-based
  - Self-modifying
  member-of: Funge-98
  description: |
    Unefunge-98 is the one-dimensional member of the [[Funge-98]] language family.
  specification-link: http://catseye.tc/projects/funge98/doc/funge98.html
  development-stage: mature
  authors:
  - Chris Pressey
  - Befunge Mailing List Working Group

Befunge-98:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Stack-based
  - 2-dimensional
  - Self-modifying
  member-of: Funge-98
  development-stage: mature
  description: |
    Befunge-98 is the two-dimensional member of the [[Funge-98]] language family.
  specification-link: http://catseye.tc/projects/funge98/doc/funge98.html
  authors:
  - Chris Pressey
  - Befunge Mailing List Working Group

Trefunge-98:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Stack-based
  - 3-dimensional
  - Self-modifying
  member-of: Funge-98
  development-stage: mature
  description: |
    Trefunge-98 is the three-dimensional member of the [[Funge-98]] language family.
  specification-link: http://catseye.tc/projects/funge98/doc/funge98.html
  authors:
  - Chris Pressey
  - Befunge Mailing List Working Group

FBBI:
  type: Implementation
  implementation-of:
  - Befunge-98
  acronym-for: Flaming Bovine Befunge Interpreter
  description: |
    The _Flaming Bovine Befunge Interpreter_ is
    Cat's Eye Technologies' implementation of Befunge-98, in ANSI C.
    It was developed concurrently with the writing of the Funge-98
    specification, and, until recently, suffered from several major bugs.
  reference: false
  in-distribution: FBBI distribution
  license: BSD license
  host-language: ANSI C
  implementation-type: interpreter


Gemooy: 
  type: Programming Language
  paradigms:
  - Imperative
  genre: Esolang
  description: |
    Gemooy is really just a two-dimensional bagatelle of sorts; it
    combines features from [[2-ill]] and [[Etcha]], and adds self-modification.
    It came about when the author noticed the tape-related semantics of 2-ill were
    essentially the same as those of [[BitChanger]].
  inception-date: Dec 2, 2010
  development-stage: mature
  esowiki: Gemooy
  online-implementations:
  - 'http://catseye.tc/gallery/esolangs/yoob/'
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  influences:
  - 2-ill
  - Etcha
  sample: |-
    %### # ###   # #   ### # ###   # #   ### # ###@

       @    @#         @
      @      @          @
     @@
    @                   @
        $         @# # @
                 #      @
                #
           @   @
                        @
             
           @
          #
         #
        @
        @    @
         @# @
    @        @
             @
      @     @#@
  specification-link: esowiki

gemooy.js:
  type: Implementation
  implementation-of:
  - Gemooy
  in-distribution: Gemooy distribution
  license: Public Domain
  implementation-type: interpreter
  host-language: Javascript
  host-platform: HTML5

tc.catseye.yoob.gemooy:
  type: Implementation
  implementation-of:
  - Gemooy
  in-distribution: yoob distribution
  prebuilt-for-platforms:
  - yoob
  license: Public Domain
  implementation-type: interpreter
  host-language: Java
  host-platform: yoob


GraNoLa/M:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Graph-rewriting
  - Imperative
  acronym-for: GRAph-NOde LAnguage (possibly for Machines)
  description: |
    GraNoLa/M is a Graph-Node-based Language (possibly for Machines.) 
    It was one of my submissions for the Esoteric Awards. Not unlike [[Tamerlane]],
    its execution model involves both traversing and rewriting a graph at the
    same time.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  submitted-to:
  - competition: Esoteric Awards
    prize: false
  esowiki: GraNoLa/M
  inception-date: Jul 2002
  development-stage: mature
  etymology:
  - acronym
  influences:
  - Tamerlane
  sample: |
    a=^sajalom(b=^#d(c=^bimodang(^a))d(e=^#cthulhu(f=^uwaming(g=^ubewic()))))
  see-also:
  - Kangaroo Iceberg

granolam.erl:
  type: Implementation
  implementation-of:
  - GraNoLa/M
  in-distribution: GraNoLa/M distribution
  reference: true
  license: Public Domain
  implementation-type: interpreter
  host-language: Erlang


Hev:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Term-rewriting
  description: |
    Hev is a programming language that attempts to solve the "central
    problem of infix notation": how do you allow it without requiring the programmer
    to either memorize precedence tables or litter parentheses everywhere?  Hev
    has a way! In Hev, *all* operators are infix, yet no tiresome memorization
    of any dreadful precedence table is required!
  computational-class: believed Turing-complete
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  esowiki: Hev
  inception-date: May 23, 2007
  development-stage: mature
  etymology:
  - neologism
  sample: |
    71+8*27,19,29*99,6,37,7,61,47

Hev.hs:
  type: Implementation
  implementation-of:
  - Hev
  in-distribution: Hev distribution
  reference: true
  license: BSD license
  implementation-type: interpreter
  host-language: Haskell


HUNTER:
  type: Programming Language
  genre: Esolang
  paradigms:
  - 2-dimensional
  - Maze-space-rewriting
  tagline: |-
    maze-space rewriting with authentic inter-rodent communication
  description: |
    HUNTER is a language I designed for the Esoteric Awards ("Essies")
    Its abstract starts out like this:
    
    > It is perceived that one of the biggest problems in maintaining
    > interest in programming is the above linear growth of boredom
    > compared to the usefulness of the program, resulting in an
    > acute loss of enthusiasm on the part of the programmers and
    > ultimately the abandonment of the software...
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca Sep 20, 2000
  development-stage: mature
  esowiki: Hunter
  submitted-to:
  - competition: Esoteric Awards
    prize: false
  etymology:
  - masculine given name
  dimensionality: 2
  sample: |
    ##################
    #   1#2#         #
    # #### #         #
    #      #         #
    # ######    M    #
    #     M#         #
    #+######         #
    #     !#         #
    ##################
    *12+>3
    *21+>3

hunter.pl:
  type: Implementation
  implementation-of:
  - HUNTER
  in-distribution: HUNTER distribution
  reference: true
  license: BSD license
  implementation-type: interpreter
  host-language: Perl


ILLGOL:
  type: Programming Language
  genre: Joke language
  paradigms:
  - Imperative
  generally-compiled: true
  description: |
    ILLGOL is a joke language which parodies the sort of language designed by the
    sheer fact that a compiler for it has been hacked together.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca Apr 2000
  development-stage: mature
  etymology:
  - parody
  sample: |
    NB eh.ill
    10 *f = { print str(#0), EoL };
    20 do f(1);
    30 don't f;
    40 do f(2);
    50 reinstate f;
    60 do f(3);
    FIN
  reference-distribution: 'Illgol: Grand Mal'

illgol.exe:
  type: Implementation
  implementation-of:
  - ILLGOL
  in-distribution: 'Illgol: Grand Mal'
  license: Unknown license
  implementation-type: compiler
  host-language: ANSI C
  target-language: x86 machine code
  target-platform: MS-DOS
  can-be-built-with-borland-c: true
  prebuilt-for-platforms:
  - MS-DOS

Illgola-2:
  type: Programming Language
  genre: Joke language
  paradigms:
  - Imperative
  generally-compiled: true
  description: |
    Illgola-2 is the successor to [[ILLGOL]].  It, too, parodies the sort of
    language that exists solely because there's some program that's been
    written that takes a file in sort of that format as input and spits out
    vaguely related code as output.
    
    Illgola-2 introduces a preprocessor `i2pp.pl`, and Release Notes Girl,
    to ILLGOL.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  variant-of: ILLGOL
  inception-date: ca Apr 2000
  development-stage: mature
  etymology:
  - parody
  reference-distribution: 'Illgol: Grand Mal'

illgola2.exe:
  type: Implementation
  implementation-of:
  - Illgola-2
  in-distribution: 'Illgol: Grand Mal'
  license: Unknown license
  implementation-type: compiler
  host-language: ANSI C
  target-language: x86 machine code
  target-platform: MS-DOS
  can-be-built-with-borland-c: true
  run-requirements:
  - Perl
  prebuilt-for-platforms:
  - MS-DOS

Illberon:
  type: Programming Language
  genre: Joke language
  paradigms:
  - Imperative
  generally-compiled: true
  description: |
    Illberon is another language in the [[ILLGOL]] series of parodies;
    in this case, the successor to [[Illgola-2]].  It consists solely of a
    preprocessor, `i3pp.pl`, and release notes in the form of a comic
    strip starring Release Notes Girl and Captain Compiler.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  variant-of: ILLGOL
  inception-date: May 2000
  development-stage: mature
  etymology:
  - parody
  reference-distribution: 'Illgol: Grand Mal'

# uhhhhhhh...
i3pp.pl:
  type: Implementation
  implementation-of:
  - Illberon
  in-distribution: 'Illgol: Grand Mal'
  license: Unknown license
  # preprocessor...
  implementation-type: compiler
  host-language: Perl
  # not accurate.  but in the scheme of things, who cares.
  target-language: Illgola-2

Open Sores Illgol##:
  type: Programming Language
  genre: Joke language
  paradigms:
  - Imperative
  generally-compiled: true
  description: |
    A joke language which parodies the sort of language designed by the
    sheer fact that a compiler for it has been hacked together.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  variant-of: ILLGOL
  inception-date: ca Jun 2000
  development-stage: mature
  etymology:
  - parody
  reference-distribution: 'Illgol: Grand Mal'

Open Sores Illgol## (C):
  type: Implementation
  implementation-of:
  - Open Sores Illgol##
  in-distribution: 'Illgol: Grand Mal'
  license: Unknown license
  implementation-type: compiler
  host-language: ANSI C
  target-language: x86 machine code
  target-platform: MS-DOS
  can-be-built-with-borland-c: true
  run-requirements:
  - Perl


Iphigeneia:
  type: Programming Language
  genre: Pedagogical language
  paradigms:
  - Imperative
  - Functional
  description: |
    Iphigeneia is a toy programming language which contains features
    from both imperative programming (assignments to mutable variables, `while`
    loops,) and functional programming (immutable name bindings, Scheme-style
    "named `let`" loops.) It was originally intended as a testbed for algorithms
    that convert programs between the two forms.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Nov 20, 2007
  development-stage: mature
  etymology:
  - classical greek
  - mythological
  sample: |-
    var a in a :=
        let c = 5 in let d = 1 in
            loop
                if c = 0 then
                    d
                else
                    let d = d * c in
                        let c = c - 1 in
                            repeat

iphi:
  type: Implementation
  implementation-of:
  - Iphigeneia
  in-distribution: Iphigeneia distribution
  reference: true
  license: Unknown license
  implementation-type: interpreter
  host-language: Haskell


Jaccia:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Cellular automaton
  - 2-dimensional
  description: |
    Jaccia and Jacciata are cellular automata inspired by the [Announcement
    of Scientific Proof that Slime Molds are Intelligent Maze Solvers](http://web.archive.org/web/20020220163303/http://www.riken.go.jp/lab-www/frontier-div/NEWSLETTER/feb2001/ameboid_e.htm).
    Jaccia can solve mazes too, by a similar mechanism (shrinking). Jacciata builds
    upon this to find the shortest path through a maze, if one exists and is unique.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Apr 11, 2009
  development-stage: mature
  dimensionality: 2
  reference-distribution: Jaccia and Jacciata distribution
  etymology:
  - neologism
  computational-class: known not Turing-complete
  sample: |
    #######S###
    #:::::::::#
    #:###:###:#
    #:#:#:::#:#
    #:#:#:#:###
    #:::#:#:#:#
    #####:#:#:#
    #:#:::#:::#
    #:#:###:###
    #:::#:::::#
    #########F#
  sample-output: |
    #######S###
    #    :::  #
    # ###:### #
    # # #:::# #
    # # # #:###
    #   # #:# #
    ##### #:# #
    # #   #:  #
    # # ###:###
    #   #  :::#
    #########F#

Jacciata:
  type: Programming Language
  genre: Esolang
  variant-of: Jaccia
  paradigms:
  - Cellular automaton
  - 2-dimensional
  description: |
    Jaccia and Jacciata are cellular automata inspired by the [Announcement
    of Scientific Proof that Slime Molds are Intelligent Maze Solvers](http://web.archive.org/web/20020220163303/http://www.riken.go.jp/lab-www/frontier-div/NEWSLETTER/feb2001/ameboid_e.htm).
    Jaccia can solve mazes too, by a similar mechanism (shrinking). Jacciata builds
    upon this to find the shortest path through a maze, if one exists and is unique.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Apr 11, 2009
  development-stage: mature
  dimensionality: 2
  reference-distribution: Jaccia and Jacciata distribution
  etymology:
  - neologism
  computational-class: known not Turing-complete
  sample: |
    #######S###
    #:::::::::#
    #:###:###:#
    #:#:#:::#:#
    #:#:#:#:###
    #:::#:#:#:#
    #####:#:#:#
    #:#:::#:::#
    #:#:###:###
    #:::#:::::#
    #########F#
  sample-output: |
    #######S###
    #    :::  #
    # ###:### #
    # # #:::# #
    # # # #:###
    #   # #:# #
    ##### #:# #
    # #   #:  #
    # # ###:###
    #   #  :::#
    #########F#

jaccia.alp:
  type: Implementation
  implementation-of:
  - Jaccia
  reference: true
  in-distribution: Jaccia and Jacciata distribution
  prebuilt-for-platforms:
  - Perl
  license: BSD license
  implementation-type: formal description
  host-language: ALPACA

jacciata.alp:
  type: Implementation
  implementation-of:
  - Jacciata
  reference: true
  in-distribution: Jaccia and Jacciata distribution
  prebuilt-for-platforms:
  - Perl
  license: BSD license
  implementation-type: formal description
  host-language: ALPACA


Jolverine:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Turning tarpit
  - 2-dimensional
  description: |
    The Jolverine language was devised as a conscious attempt to expand the
    genre of turning tarpit by adding the feature of modifying the instruction
    wheel during execution.
  commentary: |
    The name is a portmanteau of "jolly wolverine" (where "jolly" is a
    euphemism for "drunk",) which is an attempt to capture, in a noun phrase,
    the language's vicious, erratic nature.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Sep 10, 2012
  development-stage: mature
  etymology:
  - portmanteau
  influences:
  - Wunnel
  - Half-Broken Car in Heavy Traffic
  computational-class: Turing-complete
  sample: |
    --*-*
         \
          \
           \           *
            \         /
             \       /
              \     /
               *   /
                \ /
                 *-*---*

jolverine.py:
  type: Implementation
  implementation-of:
  - Jolverine
  reference: true
  in-distribution: Jolverine distribution
  license: Public Domain
  implementation-type: interpreter
  host-language: Python


Kangaroo Iceberg:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Graph-rewriting
  description: |
    Kangaroo Iceberg was a short-lived attempt to pare down [[Tamerlane]]
    to something implementable, and implement it.  Although it got a fair ways
    along (e.g. the parser for graphs seems to be complete, I lost interest
    in it at the time, and put off finishing it indefinitely.
    
    Now, the challenge will be reconstructing the language from the partial
    implementation and notes that I left behind...
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  failure: true
  development-stage: unfinished
  influences:
  - Tamerlane
  inception-date: Jul 2004
  see-also:
  - GraNoLa/M

kiceberg:
  type: Implementation
  implementation-of:
  - Kangaroo Iceberg
  in-distribution: Kangaroo Iceberg distribution
  reference: true
  license: BSD license
  implementation-type: interpreter
  host-language: ANSI C


Kelxquoia: 
  type: Programming Language
  genre: Esolang
  paradigms:
  - 2-dimensional
  - Grid-rewriting
  - Self-modifying
  description: |
    Kelxquoia is another remotely fungeoid language, this one self-modifying
    — in fact, self-destroying.  As instructions are executed, they are
    erased.  In order to execute indefinitely, new instructions of some sort
    must be created. Luckily the language provides as its main data-manipulation
    facility, grid-rewriting, which can be used to restore instructions that
    were previously erased after execution.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Dec 23, 2010
  development-stage: not fully complete
  computational-class: believed Turing-complete
  esowiki: Kelxquoia
  sample: |2
     >+-0 0*+-1*/+-?*-R*- *+-?*-R*-?*/v
     RRRRRRRRRRRRRRRRRRRR RRRRRRRRRRRRR
    $>+-0 0*+-1*/+-?*-R*- *+-?*-R*-?*/v
        ' '   '       '  '      '   
                 '         '  '     
     ^      /*?-*P-*?-+*?-*P-* -+     <
     P      PPPPPPPPPPPPPPPPPP PP     P
     ^      /*?-*P-*?-+*?-*P-* -+     <
    
     00 00 00 00


Larabee:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  - Assembly
  description: |
    Larabee is an assembly-like programming language, with [[Scheme]]-like
    syntax, that borrows the notion of branch prediction from computer architecture
    and abuses it, creating a path that leads only to existential angst and self-destruction.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Jan 10, 2008
  development-stage: mature
  etymology:
  - surname
  - television show
  computational-class: known not Turing-complete
  esowiki: Larabee
  sample: |-
    (store (input) (input)
      (store (input) (input)
        (label loop
          (store (input) (op * (fetch (input)) (fetch (input)))
            (store (input) (op - (fetch (input)) (input))
              (test (op > (fetch (input)) (input))
                (goto loop) (print (fetch (input)))))))))

larabee.scm:
  type: Implementation
  implementation-of:
  - Larabee
  in-distribution: Larabee distribution
  reference: true
  license: BSD license
  implementation-type: interpreter
  host-language: Scheme


Madison: 
  type: Programming Language
  genre: DSL
  paradigms:
  - Proof checking
  description: |
    Madison is a language in which one can state proofs of properties
    of term-rewriting systems.  Classical methods of automated reasoning,
    such as resolution, are not used; indeed, term-rewriting itself is
    used to check the proofs.  Both direct proof and proof by induction
    are supported.  Induction in a proof must be across a structure which
    has a well-founded inductive definition.  Such structures can be thought
    of as types, although this is largely nominal; the traditional typelessness
    of term-rewiting systems is largely retained.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  paradigms:
  - Term-rewriting
  computational-class: believed Turing-complete
  inception-date: Dec 2, 2011
  development-stage: not fully complete
  sample: |
    type tree is
      tree(leaf)        -> true
      tree(branch(X,Y)) -> and(tree(X),tree(Y))
    in let
      reflect(leaf)        -> leaf
      reflect(branch(A,B)) -> branch(reflect(B),reflect(A))
    in theorem
      forall X where tree(X)
        reflect(reflect(X)) ~> X
    proof
      case X = leaf
        reflect(reflect(leaf))
        -> reflect(leaf)        [by reflect.1]
        -> leaf                 [by reflect.1]
      case X = branch(S, T)
        reflect(reflect(branch(S, T)))
        -> reflect(branch(reflect(T),reflect(S)))          [by reflect.2]
        -> branch(reflect(reflect(S)),reflect(reflect(T))) [by reflect.2]
        -> branch(S,reflect(reflect(T)))                   [by IH]
        -> branch(S,T)                                     [by IH]
    qed


Maentwrog:
  type: Programming Language
  genre: Pedagogical language
  paradigms:
  - Stack-based
  esowiki: Maentwrog
  summary: A simple RPN-calculator-based language
  description: |
    Maentwrog is an RPN-calculator-turned-FORTH-interpreter which
    probably counts as [[Chris Pressey]]'s first *proper* programming language.
    It was implemented on his Amiga 500 in 1993, then lost and unearthed
    multiple times.  It is hardly remarkable, save that it spawned [[Befunge-93]].
  commentary: |
    There are no extant example programs from the time the language was first
    implemented — I tried writing the Sieve of Eratosthenes in it once,
    but never got it to work, probably because `==` was not
    implemented correctly.  Recently, example programs and a description of the
    language (which has become the provisional spec) have been provided by
    [[Marinus]] — thanks Marinus!
    
    Maentwrog is the name of a town in Wales, but the usage of its name
    for this language came via Douglas Adams' "The Meaning of Liff",
    wherein it is defined thusly:
    "MAENTWROG (n. Welsh) Celtic word for a computer spelling mistake."
  etymology:
  - place name
  - welsh
  sample: |-
    *a *b *c
    0 =a 1 =b
    : fib a b + =c c . b =a c =b c 100000 < @fib ;
    1 . fib
  authors:
  - Chris Pressey
  inception-date: ca 1993
  development-stage: archival
  computational-class: known not Turing-complete

maentw.c:
  type: Implementation
  implementation-of:
  - Maentwrog
  in-distribution: Maentwrog distribution
  license: Public Domain
  reference: yes
  implementation-type: interpreter
  host-language: ANSI C


Mascarpone:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Meta-circular
  - Reflective
  description: |
    Mascarpone is a self-modifying language able to alter the meta-circular
    interpreter which defines it, like its predecessor [[Emmental]].  Unlike Emmental
    however, in Mascarpone interpreters are first-class objects, making the
    job of reflective interpreter-modification quite a bit cleaner and richer.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Dec 10, 2007
  development-stage: mature
  computational-class: believed Turing-complete
  etymology:
  - dairy product
  - italian
  influences:
  - Emmental
  esowiki: Mascarpone
  sample: |
    v['[/''/']v*]v*'?<^v[/?/<]v*'S<[>!]v*'F<^[]v*1'p'kS'kF.
  significant: true
  quotation: |-
    You are lost in a twisty little maze of meta-circular intepreters, all alike
  quotation-attribution: |-
    "Colossal Cave", Crowther and Woods

mascarpone.hs:
  type: Implementation
  implementation-of:
  - Mascarpone
  in-distribution: Mascarpone distribution
  license: BSD license
  reference: yes
  implementation-type: interpreter
  host-language: Haskell


MDPN:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Metalanguage
  acronym-for: Multi-Directional Pattern Notation
  description: |
    MDPN is a meta-language for describing multi-directional and
    multi-dimensional languages.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  esowiki: MDPN
  inception-date: 1999
  development-stage: not fully complete
  # in terms of the languages it describes
  dimensionality: 2
  etymology:
  - acronym
  sample: |2
      Box ::= "+" {"-"}^(w) r(-90) "+" "||" {"|"}^(h) r(-90)
              "+" {"-"}^(w) r(-90) "+" "||" {"|"}^(h) r(-90)


"'N-DCNC":
  type: Programming Language
  genre: Joke language
  paradigms:
  - Functional
  tagline: The Official Language of Pride and Envy
  description: |
    'N-DCNC was my entry for the 2000 Esoteric Awards ('Essies')
    It is based on a conspiracy theory involving
    UFOs and a 5-member boy band, or something.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  submitted-to:
  - competition: Esoteric Awards
    prize: false
  esowiki: "'N-DCNC"
  inception-date: Oct 2000
  development-stage: not fully complete
  sample: |
    4*5+2/2,(9*`c)+1

ndcnc.pl:
  type: Implementation
  implementation-of:
  - "'N-DCNC"
  reference: true
  license: Unknown license
  implementation-type: compiler
  host-language: Perl
  target-language: "FALSE"
  generally-recommended: true

ndcnc.bf:
  type: Implementation
  implementation-of:
  - "'N-DCNC"
  license: Unknown license
  implementation-type: compiler
  host-language: Befunge-93
  target-language: "FALSE"
  broken: true


Nhohnhehr: 
  type: Programming Language
  genre: Esolang
  paradigms:
  - 2-dimensional
  description: |
    Nhohnhehr is a remotely fungeoid language which explores the design
    space between having a fixed playfield versus an expandable one.  When the
    instruction pointer reaches the edge of the playfield (the "room"), whether
    it wraps around or creates a new room and adjoins it to that edge, depends
    on the current _edge mode_ of the program.  New copies of rooms may be rotated
    before being adjoined to existing rooms, but rooms are otherwise immutable.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: can simulate some push-down automata
  esowiki: Nhohnhehr
  dimensionality: 2
  inception-date: Dec 8, 2010
  development-stage: mature
  sample: |
    +------+
    |    /}|
    |&#/$?@|
    |  / \&|
    |      |
    | {    |
    |\\    |
    +------+

nhohnhehr.py:
  type: Implementation
  implementation-of:
  - Nhohnhehr
  in-distribution: Nhohnhehr distribution
  authors:
  - Marinus
  reference: true
  license: Public Domain
  implementation-type: interpreter
  host-language: Python


"noit o' mnain worb":
  type: Programming Language
  genre: Esolang
  paradigms:
  - Particle automaton
  - Probabilistic
  quotation: |-
    Under pressure
  quotation-attribution: |-
    Queen
  description: |
    noit o' mnain worb is a probabilistic particle automaton that
    uses pressure between randomly moving particles to approximate the behaviour
    of circuits.  It can approximate computation with these circuits, too, but
    it's so lossy that it has more value as just a neat toy to watch.
    
    (The name of this language contains a *secret message*! Can *you* find it?)
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Sep 15, 2000
  development-stage: mature
  etymology:
  - neologism
  - hidden message
  - celtic
  notable: true
  esowiki: noit_o'_mnain_worb
  dimensionality: 2
  sample: |
    #####         #####
    #   ###########   #
    # . >         < . #
    #   #####v#####   #
    #####   #  ########
            #       >!#
            #v#########
            # #
            ###
  online-implementations:
  - 'http://catseye.tc/gallery/esolangs/yoob/'

worb.pl:
  type: Implementation
  implementation-of:
  - noit o' mnain worb
  in-distribution: noit o' mnain worb distribution
  license: BSD license
  reference: yes
  implementation-type: interpreter
  host-language: Perl

tc.catseye.yoob.worb:
  type: Implementation
  implementation-of:
  - noit o' mnain worb
  in-distribution: noit o' mnain worb distribution
  license: BSD license
  implementation-type: interpreter
  host-language: Java
  host-platform: yoob


Okapi: 
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  description: |
    Okapi is a language I designed as an anniversary present for my
    wife(!). In it, the only means of control flow is throwing exceptions, and
    as if this wasn't enough, there are two restrictions on exceptions that are
    thrown — they must be divide-by-zero exceptions, and they must be caught
    in a lexically enclosing block.  Nor is there any facility to "retry" after
    an exception is caught. The language is nonetheless [[Turing-complete]].
  authors:
  - Chris Pressey
  inception-date: May 23, 2010
  computational-class: Turing-complete
  no-specification: true
  development-stage: mature

okapi.py:
  type: Implementation
  implementation-of:
  - Okapi
  reference: true
  license: Proprietary
  implementation-type: interpreter
  host-language: Python


Oozlybub and Murphy: 
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  description: |
    The name of this language is Oozlybub and Murphy. Despite appearances,
    this name refers to a single language. The majority of the language is named
    Oozlybub. The fact that the language is not entirely named Oozlybub is named
    Murphy. Deal with it.  For the sake of providing an "olde tyme esoterickal
    de-sign", the language combines several unusual features, including multiple
    interleaved parse streams, infinitely long variable names, gratuitously strong
    typing, and only-conjectural Turing completeness.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Dec 2010
  development-stage: not fully complete
  esowiki: Oozlybub_and_Murphy
  sample: |
    VARIABLES ARE p /p*/, p /q*/.
    dynast(3) <->
      (. do (. if? not? exists/dynast 5 ,then
           create/countably/many/dynasts #myself#, 5 .) .) ,then
      (. for each prime /p*|p/ below #myself#+2 do
           for each prime /q*|q/ below /p*|pp/+1 do
             if? not? exists/dynast /p*|p|p/+/q*|q|q/ ,then
               copy/dynast #myself#, /p*|ppp/, /q*|qqq/ .)
  unusual-computability-properties: true


Opus-2:
  type: Conlang
  genre: Abstract Artlang
  description: |
    Opus-2 is not a programming language, but rather, an abstract artlang
    (i.e., a conlang designed independently from any conception of society.)
    The sole design principle was to entirely eliminate word order.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Jul 2001
  # it wouldn't be complete until it had a reasonably-sized lexicon
  development-stage: not fully complete
  sample: |
    + pale green
    + Eb, trombone, forte
    + leaning 40 degrees left (sudden)
    + C, tubular bells, piano
    + mothballs (gentle whiff)
  significant: true


Pail: 
  type: Programming Language
  genre: Esolang
  paradigms:
  - Functional
  acronym-for: PAIr Language
  description: |
    Pail is a programming language based on pairs; just as Lisp stands
    for LISt Processing, Pail stands for PAIr Language. Its original working
    title was "Bizaaro[sic]-Pixley", as it attempts to resemble [[Pixley]]
    while turning several concepts on their heads: use pairs instead of lists,
    quote by default instead of eval by default, and allow not just values but also
    names of bindings to be expressed.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  inception-date: May 25, 2011
  development-stage: mature
  influences:
  - Pixley
  sample: |
    **[*let [
         [cadrg *[#fst ##*[#snd #g]]]
         **[*let [
              [g [x [y z]]]
              ***cadrg
           ]]
      ]]

Pail.lhs:
  type: Implementation
  implementation-of:
  - Pail
  in-distribution: Pail distribution
  reference: true
  license: BSD license
  implementation-type: interpreter
  host-language: Haskell
  build-requirements:
  - Parsec


Pixley:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Functional
  description: |
    Pixley is a strict subset of R5RS Scheme (or, if you prefer, R4RS
    Scheme), supporting four datatypes (boolean, cons cell, function, and symbol)
    and a dozen built-in symbols.  The reference implementation of Pixley is
    written in 124 lines of Pixley (or, if you prefer, 124 lines of Scheme;
    and if you prefer more Scheme-ly metrics, it consists of 413 instances of
    54 unique symbols in 684 cons cells.)
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  subset-of: Scheme
  bootstrapped: true
  inception-date: May 2009
  development-stage: mature
  etymology:
  - place name
  - television show
  sample: |
    (let* ((a (lambda (x y) (cons x y)))) (a (quote foo) (quote ())))
  commentary: |
    Here are some languages it would be great to see Pixley implemented
    in someday:
    
    -   [[Javascript]]
    -   [[VBScript]]
    -   [[Commodore 64]], either [[Commodore BASIC 2.0]] or [[6502 machine code]]
    -   [[Befunge-98]] (storage would probably be a killer in [[Befunge-93]])

pixley.pix:
  type: Implementation
  implementation-of:
  - Pixley
  in-distribution: Pixley distribution
  reference: true
  license: BSD license
  generally-recommended: true
  implementation-type: interpreter
  host-language: Pixley

pixley.pifx:
  type: Implementation
  implementation-of:
  - Pixley
  in-distribution: Pixley distribution
  reference: true
  license: BSD license
  implementation-type: interpreter
  host-language: Pifxley

P-Normal Pixley:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Functional
  variant-of: Pixley
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  reference-distribution: Pixley distribution
  computational-class: believed Turing-complete
  subset-of: Scheme
  development-stage: mature
  description: |
    P-Normal Pixley is a simplified version of Pixley where `let*` can only
    bind one identifer to one value and `cond` can only make one test,
    like Scheme's `if`.

p-normal.pix:
  type: Implementation
  implementation-of:
  - Pixley
  in-distribution: Pixley distribution
  reference: true
  license: BSD license
  implementation-type: compiler
  host-language: Pixley
  target-language: P-Normal Pixley
  description: |
    The Pixley P-Normalizer takes arbitrary Pixley programs and
    converts them to P-Normal Pixley.

Pifxley:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Functional
  variant-of: Pixley
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  reference-distribution: Pixley distribution
  computational-class: believed Turing-complete
  development-stage: mature
  subset-of: Scheme
  description: |
    Pifxley is Pixley with an `if` instead of a `cond`.

pifxley.pifx:
  type: Implementation
  implementation-of:
  - Pifxley
  in-distribution: Pixley distribution
  reference: true
  license: BSD license
  implementation-type: interpreter
  host-language: Pifxley

Crabwell:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Functional
  variant-of: Pixley
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  reference-distribution: Pixley distribution
  computational-class: believed Turing-complete
  development-stage: mature
  description: |
    Crabwell is a variant of Pixley which allows values to be bound to,
    not just symbols, but arbitrary S-expressions.  (Thus it is not a
    subset of Scheme.)

crabwell.pix:
  type: Implementation
  implementation-of:
  - Crabwell
  in-distribution: Pixley distribution
  reference: true
  license: BSD license
  implementation-type: interpreter
  host-language: Pixley


Quylthulg:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Functional
  description: |
    Quylthulg is a programming language with but a single control-flow
    construct: `foreach`.  In fact, it does also have a `goto`, but that can
    only appear inside data structures.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  esowiki: Quylthulg
  computational-class: believed Turing-complete
  inception-date: Dec 6, 2008
  development-stage: mature
  etymology:
  - mythological
  - roguelike
  - Lovecraftian
  sample: |-
    foreach $n$=:L:[1,2,3|goto$L$] with $a$=1 be +$a$+$n$+ else be abort

Qlzqqlzuup, the Lord of Flesh:
  type: Implementation
  implementation-of:
  - Quylthulg
  in-distribution: Quylthulg distribution
  reference: true
  license: BSD license
  implementation-type: interpreter
  host-language: Haskell


REDGREEN:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Cellular automaton
  description: |
    REDGREEN is a cellular automaton that simulates a little
    "physical world", much like [[RUBE]].
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: Turing-complete
  etymology:
  - television program
  influences:
  - RUBE
  dimensionality: 2
  esowiki: REDGREEN
  sample: |2
                                       # #
                     ......            # #
                                       #  ~                      #
                                       #######################   #
                                      %#                         #
                           . . .      T #####                    #
                                      ###   #  :                 #
                                            #                    #
                                            #  .                 #
                                            #                    #
                                            #                    #
                                            #  .                 #
                                            #                    #
                                            #                    #
    >>>>>>>>>>>>>>>##<<<<<<<<<<<<<<<<<############################
                                                    %
                                                    T
  inception-date: 1998
  development-stage: mature

redgreen.alp:
  type: Implementation
  implementation-of:
  - REDGREEN
  reference: true
  in-distribution: REDGREEN distribution
  prebuilt-for-platforms:
  - Perl
  license: BSD license
  implementation-type: formal description
  host-language: ALPACA


RUBE:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Bully automaton
  - 2-dimensional
  description: |
    RUBE is an esoteric programming language in tribute to [[Rube Goldberg]],
    with bulldozers pushing around numbered crates, knocking them together to
    perform computations.  It is based on a variant of a cellular automaton called
    a *bully automaton*, where certain state changes canforce other state changes
    to occur elsewhere in the playfield.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  basis-for-game: true
  inception-date: ca Jul 10, 2007
  development-stage: mature
  etymology:
    - masculine given name
    - acronym
  esowiki: RUBE
  dimensionality: 2
  notable: true
  sample: |2
      0a21646c726f77202c6f6c6c6548
    , :::::::::::::::::::::::::::: ,
     )
     ==============================
    F
                                   O F
                                   c
                                   =

rube.c:
  type: Implementation
  implementation-of:
  - RUBE
  in-distribution: RUBE distribution
  reference: true
  license: BSD license
  implementation-type: interpreter
  # can also be built with C99
  host-language: ANSI C
  can-be-built-with-borland-c: true
  run-requirements:
  - ANSI Terminal


Sally:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Functional
  generally-compiled: true
  description: |
    Sally is a cute but naive little functional language with a minimal syntax,
    a strict type system, and some unusual rules for parameters and return values.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  tagline: |-
    upside-down FORTH cake
  inception-date: 2000
  development-stage: mature
  etymology:
  - feminine given name
  esowiki: Sally
  sample: |
    stdlib
    int factorial int if $1 mul $1 factorial sub $1 1 1
    int main int factorial $1

sally2c:
  type: Implementation
  implementation-of:
  - Sally
  in-distribution: Sally distribution
  reference: true
  license: BSD license
  implementation-type: compiler
  host-language: ANSI C
  target-language: ANSI C


Sbeezg:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Functional
  description: |
    Sbeezg is a syntactically very simple language that attempts to
    take the single-assignment concept to a logical extreme.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: 2002
  development-stage: archival
  etymology:
  - neologism
  esowiki: Sbeezg
  sample: |
    f={a,b|i=*is;s=*pred;p=*print;g=p(*beer);h=s(a);
       ln={x,m|z=x|x};lg={y,n|q=n(y,n)|y};j=i(h,0,ln,lg);
       k=j(h,b)|a};l=f(99,f)

sbeezg.erl:
  type: Implementation
  implementation-of:
  - Sbeezg
  in-distribution: Sbeezg distribution
  reference: true
  license: Public Domain
  implementation-type: interpreter
  host-language: Erlang


Shelta:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Stack-based
  generally-compiled: true
  description: |
    Shelta is an extremely minimal Forth-like language with barely
    any semantics; it relies on inline machine code to write anything resembling
    an actual program in it. In the spirit of compilers for languages such as [[FALSE]]
    and [[brainfuck]], a Shelta-to-8086 compiler was implemented (with help from
    Ben Olmstead) in less than 512 bytes of [[x86 machine code|80286 machine code]]. What's more,
    it's also been bootstrapped — that is to say, a Shelta compiler was
    written in Shelta, which was compiled with the original compiler, and then
    compiled again with the resulting compiler, producing a wholly self-hosted
    executable!
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  with:
  - Ben Olmstead
  inception-date: ca Jul 1999
  development-stage: mature
  etymology:
  - spoken language
  - celtic
  esowiki: Shelta
  sample: |
    [ `Hello, _32 `world! _13 _10 ] \15 outs \0 halt

shelta:
  type: Implementation
  implementation-of:
  - Shelta
  reference: true
  in-distribution: Shelta distribution
  prebuilt-for-platforms:
  - MS-DOS
  license: Freely Redistributable
  implementation-type: compiler
  host-language: NASM Assembler
  host-platform: MS-DOS
  target-language: x86 machine code
  target-platform: MS-DOS

sheltas:
  type: Implementation
  implementation-of:
  - Shelta
  in-distribution: Shelta distribution
  prebuilt-for-platforms:
  - MS-DOS
  license: Freely Redistributable
  implementation-type: compiler
  host-language: Shelta
  host-platform: MS-DOS
  target-language: x86 machine code
  target-platform: MS-DOS


SICKBAY:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  esowiki: SICKBAY
  description: |
    SICKBAY is an esoteric dialect of BASIC with a call ring buffer instead of
    a call stack, and computed line number definitions (and no `IF` because
    of that.)
  etymology:
  - pun
  sample: |-
    10 LET B% = 99
    (100+B%) END
    100 GOTO 200:REM BEGIN LOOP
    200 PRINT B%;:PRINT " BOTTLES OF BEER ON THE WALL,"
    205 PRINT B%;:PRINT " BOTTLES OF BEER,"
    210 PRINT "TAKE ONE DOWN, PASS IT AROUND,"
    215 LET B% = (B% - 1)
    220 PRINT B%;:PRINT " BOTTLES OF BEER ON THE WALL.":PRINT ""
    230 GOTO 100
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Sep 22 2012
  development-stage: mature
  computational-class: Turing-complete

SAWBONES:
  type: Implementation
  implementation-of:
  - SICKBAY
  in-distribution: SICKBAY distribution
  license: Public Domain
  reference: yes
  implementation-type: interpreter
  host-language: Python


SMETANA:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Self-modifying
  esowiki: SMETANA
  acronym-for: Self-Modifying Extremely Tiny AutomatoN Application
  summary: A pathological little self-modifying language
  description: |
    SMETANA is a pathological little self-modifying language with only two
    possible operations: Go to step *n*, and Swap steps *n* and *m*.
    It has inspired a few variants and developments, notably a proof that
    despite its minimalism, it is finite-automata-complete; it is also the
    (great-?)grandfather of [[SMITH]].
  etymology:
  - dairy product
  - russian
  - surname
  sample: |-
    Step 1. Swap step 1 with step 2.
    Step 2. Go to step 2.
    Step 3. Go to step 1.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca 1994
  development-stage: archival
  computational-class: known not Turing-complete
  notable: true
  online-implementations:
  - 'http://catseye.tc/gallery/esolangs/yoob/'

smetana.pl:
  type: Implementation
  implementation-of:
  - SMETANA
  in-distribution: SMETANA distribution
  license: Public Domain
  reference: yes
  implementation-type: interpreter
  host-language: Perl

tc.catseye.yoob.smetana:
  type: Implementation
  implementation-of:
  - SMETANA
  in-distribution: yoob distribution
  prebuilt-for-platforms:
  - yoob
  license: Public Domain
  implementation-type: interpreter
  host-language: Java
  host-platform: yoob


SMITH:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  - Self-modifying
  - Assembly
  esowiki: SMITH
  acronym-for: Self-Modifying Indecent Turing Hack
  summary: An assembly-like language with no jumps whatsoever
  quotation: How many nights and weird mornings can this go on?
  quotation-attribution: Hunter S. Thompson
  description: |
    SMITH is a self-modifying assembly-like language which completely lacks
    any kind of jump instructions *whatsoever*.  Despite this handicap, it
    has been shown to be [[Turing-complete]].
  etymology:
  - surname
  sample: |-
    MOV R0, 10
    MOV R2, 0
    SUB R2, 1
    MOV R[R0], "Hello, world!"
    MOV TTY, R[R0]
    SUB R0, R2
    MOV R1, R0
    SUB R1, 23
    NOT R1
    NOT R1
    MUL R1, 8
    COR +1, -7, R1
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: ca July 2000
  development-stage: mature
  computational-class: Turing-complete
  notable: true
  significant: true
  influences:
  - SMETANA

smith.pl:
  type: Implementation
  implementation-of:
  - SMITH
  in-distribution: SMITH distribution
  reference: true
  license: BSD license
  implementation-type: interpreter
  host-language: Perl


Squishy2K:
  type: Programming Language
  genre: Esolang
  paradigms:
  - String-rewriting
  - State machine
  description: |
    Squishy2K is a language which is a hybrid of string rewriting
    and finite state automata; as an added twist, it also lets program states serve
    as functions.  It was based largely on an earlier grammar-based language
    called SQUISHY, taking also some ideas from the language [[Thue]].  The
    original SQUISHY was conceived sometime around 1998, but is now lost.  Because
    it was based largely on EBNF, the author wanted to name it Wirth, but the
    name SQUISHY was proposed and (somewhat unfortunately) stuck.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  esowiki: Squishy2K
  inception-date: Sep 2000
  development-stage: mature
  sample: |
    * main { start many finish? "Hello, world!"! }

squishy2k.pl:
  type: Implementation
  implementation-of:
  - Squishy2K
  in-distribution: Squishy2K distribution
  reference: true
  license: Public Domain
  implementation-type: interpreter
  host-language: Perl


Strelnokoff:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  - Non-deterministic
  description: |
    Strelnokoff is a non-deterministic imperative programming language.
    Despite this apparent handicap, it appears to be [[Turing-complete]] (thanks
    to a short-circuiting multiplication operator,) but a critical feature (arrays)
    has never yet been implemented.  The name "Strelnokoff" was taken from
    a fictional brand of vodka featured in a mock advertisement on the television
    show SCTV.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  etymology:
  - surname
  - fictional
  - television show
  esowiki: Strelnokoff
  sample: |
    REM HELLO WORLD IN STRELNOKOFF
    REM CHRIS PRESSEY MARCH 24 2001
    X = (X / X) * X + (X = 0) * (T =  0) * (PRINT CHAR 'H' - 'H' +  1)
    X = (X / X) * X + (X = 0) * (T =  1) * (PRINT CHAR 'e' - 'e' +  2)
    X = (X / X) * X + (X = 0) * (T =  2) * (PRINT CHAR 'l' - 'l' +  3)
    X = (X / X) * X + (X = 0) * (T =  3) * (PRINT CHAR 'l' - 'l' +  4)
    X = (X / X) * X + (X = 0) * (T =  4) * (PRINT CHAR 'o' - 'o' +  5)
    X = (X / X) * X + (X = 0) * (T =  5) * (PRINT CHAR ',' - ',' +  6)
    X = (X / X) * X + (X = 0) * (T =  6) * (PRINT CHAR ' ' - ' ' +  7)
    X = (X / X) * X + (X = 0) * (T =  7) * (PRINT CHAR 'w' - 'w' +  8)
    X = (X / X) * X + (X = 0) * (T =  8) * (PRINT CHAR 'o' - 'o' +  9)
    X = (X / X) * X + (X = 0) * (T =  9) * (PRINT CHAR 'r' - 'r' + 10)
    X = (X / X) * X + (X = 0) * (T = 10) * (PRINT CHAR 'l' - 'l' + 11)
    X = (X / X) * X + (X = 0) * (T = 11) * (PRINT CHAR 'd' - 'd' + 12)
    X = (X / X) * X + (X = 0) * (T = 12) * (PRINT CHAR '!' - '!' + 13)
    X = (T = X) * 0 + (X > T) * X REM RESET FLAG
    T = (X / X) * X + (X = 0) * T REM INCREMENT TICK
  inception-date: Apr 2001
  # implementation needs arrays!
  development-stage: not fully complete

strelnokoff.pl:
  type: Implementation
  implementation-of:
  - Strelnokoff
  in-distribution: Strelnokoff distribution
  reference: true
  license: BSD license
  implementation-type: interpreter
  host-language: Perl


Tamerlane:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Graph-rewriting
  - Imperative
  description: |
    Tamerlane is a multi-paradigmatic programming language, unimplemented
    and possibly unimplementable. One of its core execution mechanisms is the
    traversing of a graph (representing the program) while rewriting that same
    graph.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Aug 2000
  development-stage: mature
  esowiki: Tamerlane
  etymology:
  - masculine given name
  sample: |
    Point-A: 1 Point-B,
    Point-B: 1 Point-C,
    Point-C: 1 Point-A.
    ?- 1 Point-A -> 0 Point-A @ Point-A
  see-also:
  - Kangaroo Iceberg
  - GraNoLa/M


Treacle:
  type: Programming Language
  genre: Experimental language
  paradigms:
  - Tree-rewriting
  description: |
    Treacle is an experimental compiler-definition language based on
    _context rewriting_, an expressive variant of term rewriting that generalizes
    the forest-rewriting used by its predecessor [[Arboretuum]].  In context rewriting,
    a separation is made between _names_ and _variables_, and patterns may contain
    _holes_ inside which subpatterns may match at any depth.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  inception-date: Apr 12, 2008
  development-stage: mature
  # treacle is a condiment? ... okayyy
  etymology:
  - british
  - condiment
  influences:
  - Arboretuum
  sample-input: |-
    (x this (x descends (x to (x the (x right (y 1 2))))))
  sample: |
    (
      (:i (? t (x (? i *) (? j *)))) -> (t : (xx (? j *) (? i *)))))
      (:i (? p right))               -> (p : left)
    )
  sample-output: |-
    (xx (xx (xx (xx (xx (y 1 2) left) the) to) descends) this)

treacle.scm:
  type: Implementation
  implementation-of:
  - Treacle
  in-distribution: Treacle distribution
  license: Unknown license
  reference: true
  host-language: Scheme
  implementation-type: interpreter


Troupe:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  - State machine
  description: |
    Troupe is an esolang based on hedgehogs, faery rings, and hills.  It maps
    fairly neatly to the definition of a Turing machine, so it is almost certainly
    [[Turing-complete]].
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  inception-date: Jun 25, 2012
  development-stage: not fully complete
  esowiki: Troupe


Unlikely:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Continuation-passing
  - Object-oriented
  - Dependency injection
  description: |
    Unlikely is a programming language that conflates objects with
    continuations, and methods with labels.  It exposes program structures as
    objects with commensurate inheritance relationships.  It also takes dependency
    injection to the logical extreme: if some class is used by an object, that
    class *must* be specified when the object is instantiated.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  inception-date: Mar 15, 2009
  development-stage: not fully complete
  esowiki: Unlikely
  sample: |-
    class Count(Count,Chain,Print,Add) extends Continuation
    
    class CountForever(Count,Chain,Print,Add) extends Program {
      Count c;
      method continue(Passive accumulator) {
        c = new Count(Passive,Count,Chain,Print,Add);
        goto c.continue(new 1(Passive));
      }
    }
    
    class Count() extends Continuation {
      Count c;
      Print p;
      Add a;
      method continue(Passive accumulator) {
        c = new Count(Passive,Count,Chain,Print,Add);
        a = new Add(Passive,Chain);
        a.value = new 1(Passive);
        a.next = c;
        p = new Print(Passive,Chain);
        p.next = a;
        goto p.continue(accumulator);
      }
    }

Coldwater:
  type: Implementation
  implementation-of:
  - Unlikely
  in-distribution: Unlikely distribution
  reference: true
  license: BSD license
  implementation-type: static analyzer
  host-language: Python


Velo: 
  type: Programming Language
  genre: Esolang
  paradigms:
  - Object-oriented
  description: |
    Velo is a vaguely [[Ruby]]-inspired "scripting" language which unifies
    strings with code blocks, and scripts with object classes.  Curly braces
    delimit string literals, and there is no difference between a string literal
    and a block of code given to, say, an `if` statement.  Any given script is
    an object, which inherits from the root object in delegation-OO style.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  inception-date: July 14, 2012
  development-stage: not fully complete
  influences:
  - Ruby
  sample: |-
    yes = {IO.print {Yes}}
    no = {IO.print {No}}
    if ({X}.equals {Y}), yes, no

velo.rb:
  type: Implementation
  implementation-of:
  - Velo
  in-distribution: Velo distribution
  license: Unknown license
  reference: true
  host-language: Ruby
  implementation-type: interpreter


Version:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  - Regular-expression-based
  description: |
    Version is an imperative programming language that uses _ignorance-spaces_
    for flow control; all  instructions which match the current ignorance pattern
    are ignored during execution.
  inception-date: Sep 2001
  development-stage: mature
  computational-class: unknown computational class
  esowiki: Version
  sample: |
    START: ROOM = "VALLEY|BROOK|GLADE"
    CONT: IGNORE = ROOM
    VALLEY: OUTPUT = "You are standing in a valley."
    HILL: OUTPUT = "You are on top of a hill."
    BROOK: OUTPUT = "You are by a brook."
    GLADE: OUTPUT = "You are standing in a sun-dappled glade."
    ROOM: OUTPUT = EOL
    ROOM: DIR = CHOP INPUT
    ROOM: IGNORE = DIR
    ROOM: MASK = "VAPOURS"
    N: CAT = "|N"
    S: CAT = "|S"
    E: CAT = "|E"
    W: CAT = "|W"
    ROOM: IGNORE = MASK
    N: ROOM = "VALLEY|BROOK|GLADE"
    S: ROOM = "HILL|BROOK|GLADE"
    E: ROOM = "VALLEY|HILL|BROOK"
    W: ROOM = "VALLEY|HILL|GLADE"
    LASTLY: IGNORE = "START"
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies

version.pl:
  type: Implementation
  implementation-of:
  - Version
  in-distribution: Version distribution
  license: BSD license
  reference: true
  host-language: Perl
  implementation-type: interpreter


Whothm: 
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  description: |
    Whothm is a simple language for describing infinite two-colour
    bitmapped drawings.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Jun 28, 2010
  development-stage: mature
  computational-class: known not Turing-complete
  sample: |
    r := (0, 0, 1, 2);
    s := (0, 0, 1, 2);
    XOR := TF/FT;
    
    begin
    r.x += r.w;
    r.x += -1;
    r.w += 1;
    r.h += 1;
    draw r, XOR;
    s.x += s.w;
    s.x += -1;
    s.w += 1;
    s.h += 2;
    draw s, XOR;
    end
  online-implementations:
  - 'http://catseye.tc/gallery/esolangs/jwhothm/'

tc.catseye.whothm:
  type: Implementation
  implementation-of:
  - Whothm
  in-distribution: Whothm distribution
  prebuilt-for-platforms:
  - Java
  reference: true
  license: BSD license
  implementation-type: interpreter
  host-language: Java


Wierd:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Stack-based
  - 2-dimensional
  description: |
    Wierd is a language, inspired somewhat by [[Befunge-93]] and [[brainfuck]],
    where instructions are not determined by the symbols in a sequence of symbols,
    but by the *bends* in a sequence of symbols.
  authors:
  - Chris Pressey
  - John Colagioia
  - Ben Olmstead
  computational-class: believed Turing-complete
  inception-date: 1997
  # there are two implementations, neither of which seems to conform to
  # the spec, at least not entirely.
  development-stage: not fully complete
  etymology:
  - typo
  influences:
  - Befunge-93
  notable: true
  dimensionality: 2
  sample: |
    *
     *
      *
       *
      * *  **
     *   ** *
      **     **
        *      *
        *     *
        *     *
        *      *
        *     **
        *    *
        * ** *
        **  *
  sample-credit: Milo van Handel

wierd.c:
  type: Implementation
  # well, "John Wierd"
  implementation-of:
  - Wierd
  in-distribution: Wierd distribution
  authors:
  - John Colagioia
  license: Unknown license
  implementation-type: interpreter
  host-language: ANSI C

wierd-milo.c:
  type: Implementation
  # well, "Milo Wierd"
  implementation-of:
  - Wierd
  in-distribution: Wierd distribution
  authors:
  - Milo van Handel
  license: Unknown license
  implementation-type: interpreter
  host-language: ANSI C


Wunnel: 
  type: Programming Language
  genre: Esolang
  paradigms:
  - Turning tarpit
  description: |
    Wunnel is a two-dimensional language which draws from the [[1L]]
    family of languages and incorporates features from [[reMorse]]. The name
    is both a play on the pronunciation of "1L", and a recursive portmanteau
    of the words _Wunnel_ and _tunnel_ which is used to describe the long sequences
    of identical instructions (often nops) used in Wunnel programs to sync up
    remote parts of the program.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  esowiki: Wunnel
  inception-date: Feb 13, 2011
  development-stage: mature
  influences:
  - 1L
  - reMorse
  sample: |2
              o   ooo  o


    o
    o
    o
    o         o
    o         o
    o         o
    o         o
    o
    o        o     o
    o         o
    o
    o        o
    o              o
    o        o     o
    o              o

             o
    o oooooooo     o
             o
             o
             o

             o    oooo o
  specification-link: esowiki
  online-implementations:
  - 'http://catseye.tc/gallery/esolangs/yoob/'

tc.catseye.yoob.wunnel:
  type: Implementation
  implementation-of:
  - Wunnel
  in-distribution: yoob distribution
  prebuilt-for-platforms:
  - yoob
  reference: true
  license: Public Domain
  implementation-type: interpreter
  host-language: Java
  host-platform: yoob


Xigxag:
  # hmm... well, no.  but for now, yes.
  # technically a family, but the family is not that interesting.
  type: Programming Language
  genre: Esolang
  paradigms:
  - String-rewriting
  description: |
    Xigxag is a simple string-copying automaton that has exponential
    growth almost everywhere (i.e. there are only a finite number of initial
    configurations that don't blow up.)
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  # started 2001
  esowiki: Xigxag
  inception-date: Apr 23, 2007
  development-stage: mature
  sample: |
    ><<
  sample-output: |
    ><<
    <<>><
    <><<<<>>
    <<<<>><><><<><<<><<<>
    ...
  computational-class: unknown computational class
  unusual-computability-properties: true

xigxag.pl:
  type: Implementation
  implementation-of:
  - Xigxag
  in-distribution: Xigxag distribution
  reference: true
  license: Public Domain
  implementation-type: interpreter
  host-language: Perl


Xoomonk: 
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  - Lazy
  description: |
    Xoomonk is a programming language in which _malingering updatable
    stores_ are first-class objects.  Malingering updatable stores unify several
    language constructs, including procedure activations, named parameters, and
    object-like data structures.
    
    The Xoomonk project is also a bit of an experiment
    in _test-driven language design_. The specification includes examples in
    the format of [[Falderal]] tests, which were written while the language was
    being designed and could be used to compare an implementation (when one is
    written) against the spec.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  computational-class: believed Turing-complete
  inception-date: Aug 7, 2011
  development-stage: not fully complete
  sample: |
    l := $loop*
    counter := 5
    l.do := {
      y := x
      print ^.counter
      o := $sub*
      o.x := ^.counter
      o.y := 1
      ^.counter := o.result
      continue := o.result
    }


You are Reading the Name of this Esolang:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  description: |
    You are Reading the Name of this Esolang is an exploration in
    the design space of programming languages with undecidable elements. Its syntax
    is only recursively enumerable: the problem of determining whether or not
    a given string of symbols is a well-formed You are Reading the Name of this
    Esolang program is undecidable.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Nov 2007
  development-stage: mature
  computational-class: Turing-complete
  unusual-computability-properties: true
  esowiki: You_are_Reading_the_Name_of_this_Esolang
  influences:
  - Spoon
  sample: |
    001000000[0010000000111001000011]11100100001[0]
  commentary: |
    The description makes it sound a bit more mind-blowing than it actually is.
    In fact [[C++]] has essentially the same property: it's template system is
    [[Turing-complete]].  In practice, this means you can hang the compiler with
    templates that expand unboundedly (and the compiler has no means by
    which to detect all possible compiler-hanging-templates.)


Ypsilax:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Grid-rewriting
  - Non-deterministic
  - 2-dimensional
  description: |
    Ypsilax is a non-deterministic, reflective, two-dimensional grid-rewriting
    language.  Rewriting rules look for patterns in the grid and replace them
    with other patterns.  These rules are themselves represented by patterns
    in the grid, and therefore rules can match and rewrite other rules.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  esolang: Ypsilax
  computational-class: believed Turing-complete
  inception-date: Aug 2001
  development-stage: mature
  paradigms:
  - Grid-rewriting
  - Reflective
  dimensionality: 2
  etymology:
  - neologism
  sample: |
    (      )  (      )
      #            #
      # ###    ### #
      #            #
   
        ###   ###
   
        #      #
        #      #
        #    ###
  online-implementations:
  - 'http://catseye.tc/gallery/esolangs/yoob/'

ypsilax.pl:
  type: Implementation
  implementation-of:
  - Ypsilax
  in-distribution: Ypsilax distribution
  reference: true
  license: BSD license
  implementation-type: interpreter
  host-language: Perl

tc.catseye.yoob.ypsilax:
  type: Implementation
  implementation-of:
  - Ypsilax
  in-distribution: Ypsilax distribution
  license: Public Domain
  implementation-type: interpreter
  host-language: Java
  host-platform: yoob


Zame:
  # hmm... well, no.  but for now, yes.
  # technically a family.
  type: Programming Language
  genre: Esolang
  paradigms:
  # kind of...
  - Maze-space-rewriting
  variant-of: Etcha
  description: |
    Zame is an automaton which uses the solution of a maze to
    generate an [[Etcha]] program which draws a new maze, then
    the process repeats.  An open question is to find a maze for which
    this process repeats indefinitely.
    
    Information on this language is only available on the Esowiki for now.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  esowiki: Zame
  inception-date: Jan 2009
  development-stage: not fully complete
  sample: |
    #########
    # #     #
    # # # ###
    #   #   #
    ### # # #
    #   # # #
    #########
  computational-class: unknown computational class
  unusual-computability-properties: true
  specification-link: esowiki


ZOWIE:
  type: Programming Language
  genre: Esolang
  paradigms:
  - Imperative
  - Memory-mapped
  - Assembly
  description: |
    ZOWIE is a machine-like language in which all operations *including
    structured control flow* are memory-mapped.  Control flow is structured in
    the sense of structured programming — the programmer never deals with
    `goto`s, or offsets or labels of any kind.  Instead, the program writes to
    a memory location to mark the beginning or end of a loop or conditional.
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: Dec 29, 2009
  development-stage: mature
  computational-class: Turing-complete
  esowiki: ZOWIE
  influences:
  - BitChanger
  sample: |
    MOV R10, 90
    MOV R1, R1
    MOV R0, R10
    MOV R8, R10
    MOV R5, 1
    MOV R10, R8
    MOV R8, R10
    MOV R5, 64
    MOV R3, R8

zowie.py:
  type: Implementation
  implementation-of:
  - ZOWIE
  reference: true
  in-distribution: ZOWIE distribution
  license: Public Domain
  host-language: Python
  implementation-type: interpreter
