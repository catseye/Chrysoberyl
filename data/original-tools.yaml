# encoding: UTF-8
# also contains libraries (like Console::Virtual)
# Note: arguably:
# - Falderal is a language, and the testing tools are implementations of it
# - TPiS is an implementation of Scheme (a static checker)
# - yucca is an implementation of BASIC (a static checker)
# - hatoucan is an implementation of BASIC (a tokenizer)




mzstorkipiwanbotbotbot: 
  type: Tool
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  description: |
    An IRC bot with no purpose or plan.
  inception-date: 2010
  development-stage: unfinished

mzstorkipiwanbotbotbot (Lua):
  type: Implementation
  implementation-of:
  - mzstorkipiwanbotbotbot
  reference: true
  in-distribution: mzstorkipiwanbotbotbot distribution
  license: Public Domain
  host-language: Lua

Rtype:
  type: Implementation
  implementation-of:
  - mzstorkipiwanbotbotbot
  in-distribution: mzstorkipiwanbotbotbot distribution
  license: Public Domain
  host-language: R


realpath:
  # it's a bit of a stretch to call this 'original'
  type: Tool
  description: |
    `realpath` is a tool that reports the real, symbolic-link-free path
    for a filepath which may contain symbolic links.
  no-specification: true
  development-stage: mature

realpath (Python):
  type: Implementation
  implementation-of:
  - realpath
  reference: false
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  inception-date: 2014
  development-stage: mature
  in-distribution: realpath distribution
  license: Public Domain
  host-language: Python


Rooibos:
  type: Library
  summary: Simple, single-module parser combinator library
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  description: |
    Rooibos is a parser combinator library for Python. Modelled somewhat
    after yeanpypa (self-contained, public domain), but compensates for what
    I considered a fatal flaw in yeanpypa (no good way to describe a
    recursive grammar.) Has a fatal flaw of its own (can only parse
    strictly LL(1) grammars â€” no backtracking is yet possible.) Originally
    used in [[Eightebed]], but provided here for ease of transplanting into
    other projects.
  inception-date: '2011'
  development-stage: not fully complete

rooibos.py:
  type: Implementation
  implementation-of:
  - Rooibos
  reference: true
  in-distributions:
  - Eightebed distribution
  license: Public Domain
  host-language: Python


seedbank:
  type: Library
  summary: Records seeds used in random generation and allows re-use
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  description: |
    `seedbank` is a Python module which takes care of recording the seed
    used for random generation, and allowing a previously used seed to
    be used again in the future.
  inception-date: 2014
  development-stage: mature

seedbank (Python):
  type: Implementation
  implementation-of:
  - seedbank
  reference: true
  in-distribution: seedbank distribution
  license: Public Domain
  host-language: Python


shelf: 
  type: Tool
  summary: A "package manager" that doesn't actually install anything
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  description: |
    `shelf` is a "package manager" which doesn't actually install any files.
    Instead, it stores the source trees of sundry packages in a single directory,
    creates link farms to the interesting files within those trees,
    and manages your search paths to include those link farms.
    those trees. The source trees are typically the working directories of
    local git or Mercurial clones, or they can be source distributions from tarballs.
    `shelf`, written in Bourne shell, is a replacement for `toolshelf`, which was
    written in Python.
  inception-date: 2016
  development-stage: work in progress

shelf.sh:
  type: Implementation
  implementation-of:
  - shelf
  reference: true
  in-distribution: shelf distribution
  license: Public Domain
  host-language: Bourne shell


SITU-MON: 
  type: Tool
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  description: |
    SITU-MON is a machine language monitor for [[6502 machine code|6502]]-based
    systems, written (by hand!) during RetroChallenge 2015/07 and entered into
    an emulated [[Commodore 64]] using [[SITU-PAN]].
  inception-date: Jul 2015
  development-stage: mature

SITU-MON (Commodore 64):
  type: Implementation
  implementation-of:
  - SITU-MON
  reference: true
  in-distribution: SITU-SOL distribution
  license: Unknown license
  host-language: 6502 machine code
  host-platform: Commodore 64


SITU-PAN: 
  type: Tool
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  description: |
    SITU-PAN is a *front-panel switches simulator* for the [[Commodore 64]].
    It displays 8 virtual LEDs and 8 virtual dip switches on the screen.
    The LEDs display the bit pattern at the current address in memory.
    Via the keyboard, the switches may be toggled, a new bit pattern
    written into memory, and the address advanced. In this way, machine
    code programs may be entered into memory, and then run.
    SITU-PAN was written during RetroChallenge 2015/07 for the purposes
    of entering [[SITU-MON]] into an emulated C64.
  inception-date: Jul 2015
  development-stage: mature

frontpanel.bas:
  type: Implementation
  implementation-of:
  - SITU-PAN
  reference: true
  in-distribution: SITU-SOL distribution
  license: Unknown license
  host-language: Commodore BASIC 2.0
  host-platform: Commodore 64


The Swallows Engine:
  # ehh, could also be a Library, I suppose
  type: Tool
  summary: An engine for generating non-interactive fiction
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  description: |
    The Swallows Engine is the engine used to generate _The Swallows_
    series of generated novels for [[NaNoGenMo 2013]].
  inception-date: Nov 2013
  development-stage: not fully complete

The Swallows Engine (Python):
  type: Implementation
  implementation-of:
  - The Swallows Engine
  reference: true
  in-distributions:
  - The Swallows distribution
  license: Public Domain
  host-language: Python


toolshelf: 
  type: Tool
  summary: A "package manager" that doesn't actually install anything
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  description: |
    `toolshelf` is a "package manager" which doesn't actually install any files.
    Instead, it stores the source trees of sundry packages in a single directory,
    and manages your search paths to include the relevant subdirectories of
    those trees. The source trees are typically the working directories of
    local git or Mercurial clones, or they can be source distributions from tarballs.
  inception-date: 2012
  development-stage: work in progress

toolshelf.py:
  type: Implementation
  implementation-of:
  - toolshelf
  reference: true
  in-distribution: toolshelf distribution
  license: MIT license
  host-language: Python


TPiS: 
  type: Tool
  subtitle: Total Procedures in Scheme
  summary: Totality-checker for Scheme procedures
  authors:
  - Chris Pressey
  auspices:
  - Cat's Eye Technologies
  description: |
    This is a static analyzer, written in Scheme, which can check if
    given Scheme procedures are total (always terminate, on any input) by
    checking that they are specified primitive-recursively.  What's more, it
    is written almost entirely in a primitive-recursive style, so it can
    check itself!
  inception-date: ca 2006
  development-stage: archival

TPiS (Scheme):
  type: Implementation
  implementation-of:
  - TPiS
  reference: true
  in-distribution: TPiS distribution
  license: BSD license
  host-language: Scheme


